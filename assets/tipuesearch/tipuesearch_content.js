var tipuesearch = {"pages": [{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/3d-secure-2.html"
  },{
    "title": "3-D Secure 2",
    "text": "{% include 3d-secure-2.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/3d-secure-2.html"
  },{
    "title": "",
    "text": "# Uh oh:heavy_exclamation_mark: Seems like you have taken a wrong turn somewhere :construction: :dragon: This page seems to play hide and seek with you. :dragon_face: :circus_tent: Perhaps attempting a search or clicking around in the menus will help? :space_invader: Or perhaps your :princess: is in another castle? :mushroom:",
    "tags": "",
    "url": "/404.html"
  },{
    "title": "Abort Reference",
    "text": "{% include abort-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/abort-reference.html"
  },{
    "title": "Abort",
    "text": "{% include abort-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/abort-reference.html"
  },{
    "title": "Abort Reference",
    "text": "{% include abort-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/abort-reference.html"
  },{
    "title": "Abort Reference",
    "text": "{% include abort-reference.md documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/core/abort-reference.html"
  },{
    "title": "Abort Reference",
    "text": "{% include abort-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/core/abort-reference.html"
  },{
    "title": "Abort Reference",
    "text": "{% include abort-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/abort-reference.html"
  },{
    "title": "Abort",
    "text": "{% include payment-order-abort.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/abort.html"
  },{
    "title": "After Payment",
    "text": "## Options after posting a payment * **Abort**: It is possible to [abort a payment][abort] if the payment has no successful transactions. * If the payment shown above has a completed `authorization`, you will need to implement the `Capture` and `Cancel` requests. * For reversals, you will need to implement the `Reversal` request. * **If CallbackURL is set**: Whenever changes to the payment occur a [Callback request][technical-reference-callback] will be posted to the `callbackUrl`, generated when the payment was created. ## Cancellations The `cancellations` resource lists the cancellation transactions on a specific payment. ### Create cancellation transaction Perform the `create-cancel` operation to cancel a previously created payment. You can only cancel a payment - or part of payment - not yet captured. {:.code-view-header} **Request** ```http POST /psp/mobilepay/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } ``` {:.table .table-striped} | {% icon check %}︎ | Field | Type | Description | | :--------------- | :----------------------- | :----------- | :------------------------------------------------------------------------------------ | | {% icon check %}︎ | `transaction` | `string` | The transaction object contains information about this cancellation. | | {% icon check %}︎ | └➔&nbsp;`description` | `string` | A textual description of the reason for the cancellation. | | {% icon check %}︎ | └➔&nbsp;`payeeReference` | `string(50)` | {% include field-description-payee-reference.md %} | {% include transaction-response.md transaction=\"cancel\" %} ## Cancel Sequence Cancel can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the different between the capture amount and the authorization amount. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant->>SwedbankPay: POST activate Merchant activate SwedbankPay SwedbankPay-->>Merchant: transaction resource deactivate SwedbankPay deactivate Merchant ``` ## Reversals {% include transaction-list-response.md transaction=\"reversal\" %} ## Create reversal transaction The `create-reversal` operation reverses a previously created and captured payment. {:.code-view-header} **Request** ```http POST /psp/mobilepay/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"amount\": 1000, \"vatAmount\": 0, \"description\" : \"Test Reversal\", \"payeeReference\": \"DEF456\" } } ``` {:.table .table-striped} | {% icon check %}︎ | Field | Type | Description | | :--------------- | :----------------------- | :----------- | :------------------------------------------------------------------------------------ | | {% icon check %}︎ | `transaction` | `integer` | The reversal `transaction`. | | {% icon check %}︎ | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %}︎ | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %}︎ | └➔&nbsp;`description` | `string` | A textual description of the capture | | {% icon check %}︎ | └➔&nbsp;`payeeReference` | `string(50)` | {% include field-description-payee-reference.md %} | {% include transaction-response.md transaction=\"reversal\"%} ## Reversal Sequence Reversal can only be done on a payment where there are some captured amount not yet reversed. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant->>SwedbankPay: POST activate Merchant activate SwedbankPay SwedbankPay-->>Merchant: transaction resource deactivate SwedbankPay deactivate Merchant ``` {% include abort-reference.md %} {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless View\" next_href=\"features\" next_title=\"Features\" %} [abort]: /payment-instruments/mobile-pay/after-payment#abort [technical-reference-callback]: /payment-instruments/mobile-pay/features/technical-reference/callback",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/after-payment.html"
  },{
    "title": "After Payment",
    "text": "## Options after posting a payment When you detect that the payer reach your `completeUrl` , you need to do a `GET` request on the payment resource, containing the `paymentID` generated in the first step, to receive the state of the transaction. You will also be able to see the available operations after posting a payment. * *Abort:* It is possible to abort the process if the payment has no successful transactions. [See the Abort description here][abort]. * If the payment shown above is done as a two phase (`Authorization`), you will need to implement the `Capture` and `Cancel` requests. * For `reversals`, you will need to implement the [Reversal request][reversal]. * If `CallbackURL` is set: Whenever changes to the payment occur a [Callback request][callback] will be posted to the `callbackUrl`, which was generated when the payment was created. ## Cancellations `Cancel` can only be done on a authorized transaction. If you do cancel after doing a part-capture you will cancel the difference between the capture amount and the authorization amount. ### Create cancellation transaction Perform the `create-cancel` operation to cancel a previously created - and not yet captured - payment. {:.code-view-header} **Request** ```http POST /psp/creditcard/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------- | :------------ | :--------------------------------------------------------------------------------------- | | {% icon check %} | `transaction` | `object` | The `object` representation of the generic [transaction resource][transaction-resource]. | | {% icon check %} | └➔&nbsp;`description` | `string` | A textual description of the reason for the `cancellation`. | | {% icon check %} | └➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md %} | The `cancel` resource contains information about a cancellation transaction made against a payment. {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"cancellation\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/cancellations/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/transactions/{{ page.transaction_id }}\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Cancellation\", \"state\": \"Initialized\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test Cancellation\", \"payeeReference\": \"ABC123\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } ``` {:.table .table-striped} | Property | Type | Description | | :------------------------ | :-------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `string` | The relative URI of the payment this `cancellation` transaction belongs to. | | `cancellation` | `object` | The `cancellation` resource contains information about the `cancellation` transaction made against a card payment. | | └➔&nbsp;`id` | `string` | The relative URI of the created `cancellation` transaction. | | └➔&nbsp;`transaction` | `object` | The object representation of the generic [transaction resource][transaction-resource]. | | └─➔&nbsp;`id` | `string` | The relative URI of the current transaction resource. | | └─➔&nbsp;`created` | `string` | The ISO-8601 date and time of when the transaction was created. | | └─➔&nbsp;`updated` | `string` | The ISO-8601 date and time of when the transaction was updated. | | └─➔&nbsp;`type` | `string` | Indicates the transaction type. | | └─➔&nbsp;`state` | `string` | Initialized , Completed or Failed . Indicates the state of the transaction | | └─➔&nbsp;`number` | `string` | The transaction number , useful when there's need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that id should be used instead. | | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | └─➔&nbsp;`description` | `string` | {% include field-description-description.md %} | | └─➔&nbsp;`payeeReference` | `string` | {% include field-description-payee-reference.md %} | | └─➔&nbsp;`isOperational` | `boolean` | `true` if the transaction is operational; otherwise `false` . | | └─➔&nbsp;`operations` | `array` | The array of [operations][operations] that are possible to perform on the transaction in its current state. | The `cancellations` resource lists the cancellation transactions on a specific payment. {:.code-view-header} **Request** ```http GET /psp/creditcard/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"cancellation\" %} #### Cancel Sequence ```mermaid sequenceDiagram activate Merchant Merchant->>-SwedbankPay: POST [creditcard cancellactions] activate SwedbankPay SwedbankPay-->>-Merchant: transaction resource ``` ## Reversals This transaction is used when a captured payment needs to be reversed. ### Create reversal transaction The `create-reversal` operation will reverse a previously captured payment. {:.code-view-header} **Request** ```http POST /psp/creditcard/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Reversal\", \"payeeReference\": \"ABC123\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------- | :------------ | :--------------------------------------------------------------------------------------- | | {% icon check %} | `transaction` | `object` | The `object` representation of the generic [transaction resource][transaction-resource]. | | {% icon check %} | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string` | A textual description of the `reversal`. | | {% icon check %} | └➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md %} | The `reversal` resource contains information about the newly created reversal transaction. {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"reversal\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/reversal/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/transactions/{{ page.transaction_id }}\", \"created\": \"2016-09-14T01:01:01.01Z\", \"updated\": \"2016-09-14T01:01:01.03Z\", \"type\": \"Reversal\", \"state\": \"Completed\", \"number\": 1234567890, \"amount\": 1000, \"vatAmount\": 250, \"description\": \"Test transaction\", \"payeeReference\": \"AH123456\", \"failedReason\": \"\", \"isOperational\": false, \"operations\": [] } } } ``` {:.table .table-striped} | Property | Type | Description | | :------------------------ | :-------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `string` | The relative URI of the payment this `reversal` transaction belongs to. | | `reversal` | `object` | The `reversal` resource contains information about the `reversal` transaction made against a card payment. | | └➔&nbsp;`id` | `string` | The relative URI of the created `reversal`transaction. | | └➔&nbsp;`transaction` | `object` | The object representation of the generic [transaction resource][transaction-resource]. | | └─➔&nbsp;`id` | `string` | The relative URI of the current transaction resource. | | └─➔&nbsp;`created` | `string` | The ISO-8601 date and time of when the transaction was created. | | └─➔&nbsp;`updated` | `string` | The ISO-8601 date and time of when the transaction was updated. | | └─➔&nbsp;`type` | `string` | Indicates the transaction type. | | └─➔&nbsp;`state` | `string` | {% include field-description-state.md %} | | └─➔&nbsp;`number` | `string` | The transaction number, useful when there's need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, where `id` should be used instead. | | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | └─➔&nbsp;`description` | `string` | {% include field-description-description.md %} | | └─➔&nbsp;`payeeReference` | `string` | {% include field-description-payee-reference.md %} | | └─➔&nbsp;`failedReason` | `string` | The human readable explanation of why the payment failed. | | └─➔&nbsp;`isOperational` | `boolean` | `true` if the transaction is operational; otherwise `false` . | | └─➔&nbsp;`operations` | `array` | The array of [operations][operations] that are possible to perform on the transaction in its current state. | The `reversals` resource lists the reversal transactions (one or more) on a specific payment. {:.code-view-header} **Request** ```http GET /psp/creditcard/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"reversal\" %} ### Reversal Sequence ```mermaid sequenceDiagram activate Merchant Merchant->>-SwedbankPay: POST [creditcard reversals] activate SwedbankPay SwedbankPay-->>-Merchant: transaction resource ``` {% include abort-reference.md %} ## Remove payment token If you, for any reason, need to delete a paymentToken you use the `Delete payment token` request. {% include alert.html type=\"warning\" icon=\"warning\" body=\"Please note that this call does not erase the card number stored at Swedbank Pay. A card number is automatically deleted six months after a successful `Delete payment token` request. If you want to remove card information beforehand, you need to contact [ehandelsetup@swedbankpay.dk](mailto:ehandelsetup@swedbankpay.dk), [verkkokauppa.setup@swedbankpay.fi](mailto:verkkokauppa.setup@swedbankpay.fi), [ehandelsetup@swedbankpay.no](mailto:ehandelsetup@swedbankpay.no) or [ehandelsetup@swedbankpay.se](mailto:ehandelsetup@swedbankpay.se); and supply them with the relevant transaction reference or payment token.\" %} {:.code-view-header} **Request** ```http PATCH /psp/creditcard/payments/instrumentData/{{ page.payment_token }} HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"state\": \"Deleted\", \"tokenType\" : \"PaymentToken\", \"comment\": \"Comment on why the deletion is happening\" } ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"instrumentData\": { \"id\": \"/psp/creditcard/payments/instrumentdata/{{ page.payment_token }}\", \"paymentToken\": \"{{ page.payment_token }}\", \"payeeId\": \"{{ page.merchant_id }}\", \"isDeleted\": true, \"isPayeeToken\": false, \"cardBrand\": \"MasterCard\", \"maskedPan\": \"123456xxxxxx1111\", \"expiryDate\": \"MM/YYYY\" } } ``` {% include iterator.html prev_href=\"mobile-card-payments\" prev_title=\"Mobile Card Payments\" next_href=\"features\" next_title=\"Features\" %} [abort]: /payment-instruments/card/after-payment#abort [callback]: /payment-instruments/card/features/technical-reference/callback [operations]: /payment-instruments/card/features/technical-reference/operations [reversal]: /payment-instruments/card/features/core/reversal [transaction-resource]: /payment-instruments/card/features/technical-reference/transactions",
    "tags": "",
    "url": "/payment-instruments/card/after-payment.html"
  },{
    "title": "After Payment",
    "text": "## Options after posting a payment When you detect that the payer has reached your `completeUrl`, you need to do a GET request on the payment resource, which contains the paymentID generated in the first step, to receive the state of the transaction. You will also be able to see the available operations after posting a payment. * **Abort:** It is possible to abort the process if the payment has no successful transactions. [See the `abort` description](#abort). * An invoice authorization must be followed by a `capture` or `cancel` request. * For reversals, you will need to implement the `reversal` request. * **If CallbackURL is set:** Whenever changes to the payment occur a [Callback request][callback-request] will be posted to the callbackUrl, which was generated when the payment was created. {% include abort-reference.md %} ## Cancellations ### Create cancel transaction Perform the `create-cancellation` operation to cancel a previously authorized or partially captured invoice payment. {:.code-view-header} ***Request*** ```http POST /psp/invoice/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\", \"payeeReference\": \"customer order reference-unique\", \"description\": \"description for transaction\" } } ``` {:.table .table-striped} | Required | Parameter name | Datatype | Value (with description) | | :--------------: | :--------------------------- | :----------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | {% icon check %}︎ | `transaction.activity` | `string` | `FinancingConsumer`. | | {% icon check %}︎ | `transaction.payeeReference` | `string` | The `payeeReference` is the receipt/invoice number, which is a **unique** reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern `[\\w-]*`. | | {% icon check %}︎ | `transaction.description` | `string(50)` | A textual description for the cancellation. | The `cancel` resource will be returned, containing information about the newly created `cancel` transaction. {% include transaction-response.md transaction=\"cancel\" %} ### Inspecting the Cancellation The `cancellations` resource lists the cancellation transaction made on a specific payment. {:.code-view-header} **Request** ```http GET /psp/invoice/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"cancel\" %} ### Cancel Sequence A `cancel` can only be performed on a successfully authorized transaction which has not been captured yet. If you perform a cancellation after doing a partial capture, you will only cancel the remaining authorized amount. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant->>SwedbankPay: Post activate Merchant activate SwedbankPay SwedbankPay-->>Merchant: transaction resource deactivate Merchant deactivate SwedbankPay ``` ## Reversals ### Create reversal transaction The `create-reversal` operation will reverse a previously captured payment and refund the amount to the payer. To reverse a payment, perform the `create-reversal` operation. The HTTP body of the request should look as follows: {:.code-view-header} **Request** ```http POST /psp/invoice/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\", \"amount\": 1500, \"vatAmount\": 0, \"payeeReference\": \"ABC856\", \"receiptReference\": \"ABC855\", \"description\": \"description for transaction\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------------------- | :----------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %}︎ | `transaction` | `object` | The transaction object containing details about the reversal transaction. | | {% icon check %}︎ | └➔&nbsp;`activity` | `string` | `FinancingConsumer`. | | {% icon check %}︎ | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %}︎ | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %}︎ | └➔&nbsp;`payeeReference` | `string(50)` | The `payeeReference` is the receipt/invoice number if `receiptReference` is not defined, which is a **unique** reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern `[\\w-]*`. | | | └➔&nbsp;`receiptReference` | `string(50)` | The `receiptReference` is a reference from the merchant system. This reference is used as an invoice/receipt number. | | {% icon check %}︎ | └➔&nbsp;`description` | `string` | A textual description of the reversal. | The `reversal` resource will be returned, containing information about the newly created reversal transaction. {% include transaction-response.md transaction=\"reversal\" %} ### Inspecting the Reversal The `reversals` resource will list the reversal transactions (one or more) on a specific payment. {:.code-view-header} ***Request*** ```http GET /psp/invoice/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"reversal\" %} ### Reversal Sequence `Reversal` can only be done on an captured transaction where there are some captured amount not yet reversed. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay Merchant->>SwedbankPay: Post activate Merchant activate SwedbankPay SwedbankPay-->>Merchant: transaction resource deactivate Merchant deactivate SwedbankPay ``` {% include iterator.html prev_href=\"capture\" prev_title=\"Capture\" next_href=\"features\" next_title=\"Features\" %} [callback-request]: /payment-instruments/invoice/features/technical-reference/callback",
    "tags": "",
    "url": "/payment-instruments/invoice/after-payment.html"
  },{
    "title": "After Payment",
    "text": "After the payment is confirmed, the payer will be redirected from the Swish app to the `completeUrl` set in the [create payment request][create-payment]. You need to retrieve payment status with `GET` [Sales transaction][sales-transaction] before presenting a confirmation page to the payer. ## Options after posting a payment * **If CallbackURL is set**: Whenever changes to the payment occur a [Callback request][technical-reference-callback] will be posted to the `callbackUrl`, which was generated when the payment was created. * You can create a reversal transactions by implementing the Reversal request. You can also access and reverse a payment through your merchant pages in the [Swedbank Pay admin portal][payex-admin-portal]. ## Swish transactions All Swish transactions are described below. Please note that Swish does not support [Merchant Initiated Transactions][unscheduled-purchase] for the time being. ## Sales The `sales` resource lists the sales transactions (one or more) on a specific payment. {:.code-view-header} **Request** ```http GET /psp/swish/payments/{{ page.payment_id }}/sales HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"sale\" %} ### Create Sales transaction In browser based solutions the payers `msisdn` (mobile number) is required. This is managed either by sending a `POST` request as seen below, or by redirecting the payer to the hosted payment page. The `msisdn` is only required for browser based solutions. With mobile app based solutions, the payer uses the device that hosts the Swish app to manage the purchase, making `msisdn` optional. {:.code-view-header} **Browser-based Request** ```http POST /psp/swish/payments/{{ page.payment_id }}/sales HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"msisdn\": \"+46739000001\" } } ``` {:.code-view-header} **Browser-based Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/{{ page.payment_id }}\", \"sale\": { \"date\": \"23.10.2017 08:39:37 +00:00\", \"paymentRequestToken\": \"LhXrK84MSpWU2RO09f8kUP-FHiBo-1pB\", \"id\": \"/psp/swish/payments/{{ page.payment_id }}/sales/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"{{ page.transaction_id }}\", \"created\": \"2017-10-23T08:39:35.6478733Z\", \"updated\": \"2017-10-23T08:39:37.3788733Z\", \"type\": \"Sale\", \"state\": \"AwaitingActivity\", \"number\": 992309, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"payeeReference\": \"Postman1508747933\", \"isOperational\": true, \"operations\": [] } } } ``` {:.code-view-header} **In-app Request** ```http POST /psp/swish/payments/{{ page.payment_id }}/sales HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { } } ``` {:.code-view-header} **In-app Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/swish/payments/{{ page.payment_id }}\", \"sale\": { \"date\": \"23.10.2017 08:39:37 +00:00\", \"paymentRequestToken\": \"LhXrK84MSpWU2RO09f8kUP-FHiBo-1pB\", \"id\": \"/psp/swish/payments/{{ page.payment_id }}/sales/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"{{ page.transaction_id }}\", \"created\": \"2017-10-23T08:39:35.6478733Z\", \"updated\": \"2017-10-23T08:39:37.3788733Z\", \"type\": \"Sale\", \"state\": \"AwaitingActivity\", \"number\": 992309, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test Purchase\", \"payeeReference\": \"Postman1508747933\", \"isOperational\": true, \"operations\": [ { \"href\": \"swish://paymentrequest?token=&callbackurl=\", \"method\": \"GET\", \"rel\": \"redirect-app-swish\" } ] } } } ``` The `operation` `redirect-app-swish` is only returned when using in-app flows. The payment now contains a sale transaction with the status (state) `AwaitingActivity`, meaning we are awaiting a response from Swish. When the payer confirms the payment a callback request will follow from Swedbank Pay. ## Reversals The `Reversals` resource list the reversals transactions (one or more) on a specific payment. ### Reversal Sequence A reversal transcation need to match the Payee reference of a completed sales transaction. ```mermaid sequenceDiagram activate Merchant Merchant->>- SwedbankPay: POST activate SwedbankPay SwedbankPay-->>-Merchant: transaction resource ``` {:.code-view-header} **Request** ```http GET /psp/swish/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"reversal\" %} ### Create Reversal transaction A reversal transaction can be created after a completed authorization by performing a request to the `create-reversal` operation. A [callback][technical-reference-callback] request will follow from Swedbank Pay. {:.code-view-header} **Request** ```http POST /psp/swish/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 0, \"description\" : \"Test Reversal\", \"payeeReference\": \"ABC123\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------- | :----------- | :------------------------------------------------------------------------------- | | {% icon check %}︎ | `transaction` | `object` | The `transaction` object, containing information about this `reversal`. | | {% icon check %}︎ | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %}︎ | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %}︎ | └➔&nbsp;`description` | `string` | A textual description of this reversal. | | {% icon check %}︎ | └➔&nbsp;`payeeReference` | `string(35)` | {% include field-description-payee-reference.md %} | {% include transaction-response.md transaction=\"reversal\" %} {% include abort-reference.md %} ## Capture Swish does not support `capture` as it is a one-phase payment method all completed payments are captured. ## Cancel Swish does not support `cancel` as `cancel` can only be used on two-phase payments before they are captured or reversed. ## Recurring Swish does not support `recurring` payments. {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless view\" next_href=\"features\" next_title=\"Features\" %} [create-payment]: /payment-instruments/swish/features/technical-reference/create-payment [payex-admin-portal]: https://admin.payex.com/psp/login/ [sales-transaction]: #sales [technical-reference-callback]: /payment-instruments/swish/features/technical-reference/callback [unscheduled-purchase]: /payment-instruments/card/features/optional/unscheduled-purchase",
    "tags": "",
    "url": "/payment-instruments/swish/after-payment.html"
  },{
    "title": "After Payment",
    "text": "## Options after posting a payment When you detect that the payer has reached your `completeUrl`, you need to do a `GET` request on the payment resource, which contains the `id` of the `payment` generated in the first step, to receive the state of the transaction. You will also be able to see the available `operations` after posting a payment. * **Abort:** It is possible to abort the process if the payment has no successful transactions. [See the `abort` description](#abort). * For reversals, you will need to implement the `reversal` request. * **If CallbackURL is set:** Whenever changes to the payment occur a[Callback request][callback-request] will be posted to the `callbackUrl`,which was set when the payment was created. {% include abort-reference.md %} ## Reversals ### Create reversal transaction The `create-reversal` operation will reverse a payment and refund the amount to the payer. To reverse a payment, perform the `create-reversal` operation. The HTTP body of the request should look as follows: {:.code-view-header} **Request** ```http POST /psp/trustly/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"activity\": \"Sale\", \"amount\": 1500, \"vatAmount\": 0, \"payeeReference\": \"ABC856\", \"receiptReference\": \"ABC855\", \"description\": \"description for transaction\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------------------- | :----------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %}︎ | `transaction` | `object` | The transaction object containing details about the reversal transaction. | | {% icon check %}︎ | └➔&nbsp;`activity` | `string` | `FinancingConsumer`. | | {% icon check %}︎ | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %}︎ | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %}︎ | └➔&nbsp;`payeeReference` | `string(50)` | The `payeeReference` is the receipt/invoice number if `receiptReference` is not defined, which is a **unique** reference with max 50 characters set by the merchant system. This must be unique for each operation and must follow the regex pattern `[\\w-]*`. | | | └➔&nbsp;`receiptReference` | `string(50)` | The `receiptReference` is a reference from the merchant system. This reference is used as an invoice/receipt number. | | {% icon check %}︎ | └➔&nbsp;`description` | `string` | A textual description of the reversal. | The `reversal` resource will be returned, containing information about the newly created reversal transaction. {% include transaction-response.md transaction=\"reversal\" %} ### Inspecting the Reversal The `reversals` resource will list the reversal transactions (one or more) on a specific payment. The URI will be found on a `payment` that has a successful `sale` operation. {:.code-view-header} ***Request*** ```http GET /psp/trustly/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"reversal\" %} ### Reversal Sequence `Reversal` can only be done on completed Sales transactions. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay participant Merchant Merchant->>SwedbankPay: Post activate Merchant activate SwedbankPay SwedbankPay-->>Merchant: transaction resource deactivate Merchant deactivate SwedbankPay ``` {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless View\" next_href=\"features\" next_title=\"Features\" %} [callback-request]: /payment-instruments/trustly/features/technical-reference/callback",
    "tags": "",
    "url": "/payment-instruments/trustly/after-payment.html"
  },{
    "title": "After Payment",
    "text": "### Create Payment To create a Vipps payment, you perform an HTTP `POST` against the `/psp/vipps/payments` resource. An example of a payment creation request is provided below. Each individual field of the JSON document is described in the following section. Use the [expand][expand-parameter] request parameter to get a response that includes one or more expanded sub-resources inlined. {:.code-view-header} **Request** ```http POST /psp/vipps/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Vipps Test\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"{{ page.api_url }}/psp/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"Postmantimestamp\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4793000001\" } } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------------------------- | :----------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %}︎ | `payment` | `object` | The `payment` object. | | {% icon check %}︎ | └➔&nbsp;`operation` | `string` | `Purchase` | | {% icon check %}︎ | └➔&nbsp;`intent` | `string` | `Authorization` | | {% icon check %}︎ | └➔&nbsp;`currency` | `string` | NOK | | {% icon check %}︎ | └➔&nbsp;`prices` | `object` | The [`prices`][prices] object. | | {% icon check %}︎ | └─➔&nbsp;`type` | `string` | `vipps` | | {% icon check %}︎ | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"NOK\" %} | | {% icon check %}︎ | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"NOK\" %} | | {% icon check %}︎ | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %}︎ | └➔&nbsp;`userAgent` | `string` | The user agent reference of the payer's browser - [see user agent][user-agent] | | {% icon check %}︎ | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %}︎ | └➔&nbsp;`urls` | `object` | The object containing URLs relevant for the `payment`. | | {% icon check %}︎ | └─➔&nbsp;`hostUrls` | `array` | The array of URIs valid for embedding of Swedbank Pay Seamless Views. | | {% icon check %}︎ | └─➔&nbsp;`completeUrl` | `string` | The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled, either by the payer or by the merchant trough an `abort` request of the `payment`. | | | └─➔&nbsp;`paymentUrl` | `string` | The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the `payment`. See [`paymentUrl`][paymenturl] for details. | | | └─➔&nbsp;`callbackUrl` | `string` | The URI that Swedbank Pay will perform an HTTP `POST` request against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %}︎ | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %}︎ | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %}︎ | └─➔&nbsp;`payeeReference` | `string(30)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `strin` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `string(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `string(40)` | The `subsite` field can be used to perform split settlement on the payment. The `subsites` must be resolved with Swedbank Pay reconciliation before being used. | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on payment page, if valid. Only Norwegian phone numbers are supported. The country code prefix is +47 | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"description\": \"Vipps Test\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0 weeeeee\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/prices\" }, \"urls\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payers\" }, \"metadata\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/vipps/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/payments/authorize/afccf3d0016340620756d5ff3e08f69b555fbe2e45ca71f4bd159ebdb0f00065\", \"rel\": \"redirect-authorization\" } ] } ``` ### Purchase Posting a payment (operation `Purchase`) returns the options of aborting the payment altogether or creating an authorization transaction through the `redirect-authorization` hyperlink. {:.code-view-header} **Request** ```json { \"payment\": { \"operation\": \"Purchase\" } } ``` ## Operations When a payment resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations are available will vary depending on the state of the payment resource, what the access token is authorized to do, etc. {:.table .table-striped} | Field | Description | | :------- | :------------------------------------------------------------------ | | `href` | The target URI to perform the operation against. | | `rel` | The name of the relation the operation has to the current resource. | | `method` | The HTTP method to use when performing the operation. | The operations should be performed as described in each response and not as described here in the documentation. Always use the `href` and `method` as specified in the response by finding the appropriate operation based on its `rel` value. The only thing that should be hard coded in the client is the value of the `rel` and the request that will be sent in the HTTP body of the request for the given operation. {:.table .table-striped} | Operation | Description | | :----------------------- | :------------------------------------------------------------------------------- | | `update-payment-abort` | [Aborts][abort] the payment before any financial transactions are performed. | | `redirect-authorization` | Used to redirect the payer to Swedbank Pay Payments and the authorization UI. | | `create-capture` | Creates a [`capture`][capture] transaction. | | `create-cancellation` | Creates a [`cancellation`][cancel] transaction. | | `create-reversal` | Creates a [`reversal`][reverse] transaction. | ## Vipps transactions All Vipps after payment transactions are described below. ## Authorizations The `authorizations` resource contains information about the authorization transactions made on a specific payment. {:.code-view-header} **Request** ```http GET /psp/vipps/payments/{{ page.payment_id }}/authorizations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-response.md transaction=\"authorization\" %} {:.code-view-header} **Request** ```http GET /psp/vipps/payments/{{ page.payment_id }}/authorizations/{{ page.transaction_id }} HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-response.md transaction=\"authorization\" %} ## Cancellations The `cancellations` resource lists the cancellation transactions on a specific payment. {:.code-view-header} **Request** ```http GET /psp/vipps/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"cancel\" %} ## Create cancellation transaction A payment may be cancelled if the `rel` `create-cancellation` is available. You can only cancel a payment, or part of it, if it has yet to be captured. To revert a capture, or part of a capture, you must perform a `reversal`. Performing a cancellation will cancel all the remaining authorized amount on a payment. {:.code-view-header} **Request** ```http POST /psp/vipps/payments/{{ page.payment_id }}/cancellations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"payeeReference\": \"testabc\", \"description\" : \"description for transaction\" } } ``` {% include transaction-response.md transaction=\"cancel\" %} ## Reversals The `reversals` resource lists the reversal transactions (one or more) on a specific payment. {:.code-view-header} **Request** ```http GET /psp/vipps/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {% include transaction-list-response.md transaction=\"reversal\" %} ### Create reversal transaction A `reversal` transaction can be created if the `rel` `create-reversal` is available. {:.code-view-header} **Request** ```http POST /psp/vipps/payments/{{ page.payment_id }}/reversals HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"amount\": 1500, \"vatAmount\": 250, \"payeeReference\": \"cpttimestamp\", \"description\" : \"description for transaction\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------- | :----------- | :------------------------------------------------------------------------------- | | {% icon check %} | `transaction` | `object` | The transaction object. | | {% icon check %} | └➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"NOK\" %} | | {% icon check %} | └➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"NOK\" %} | | {% icon check %} | └➔&nbsp;`description` | `string` | A textual description of the capture | | {% icon check %} | └➔&nbsp;`payeeReference` | `string(50)` | {% include field-description-payee-reference.md %} | {% include transaction-response.md transaction=\"reversal\" %} {% include abort-reference.md %} {% include iterator.html prev_href=\"capture\" prev_title=\"Capture\" next_href=\"features\" next_title=\"Features\" %} [abort]: /payment-instruments/vipps/after-payment#abort [callback]: /payment-instruments/vipps/features/technical-reference/callback [cancel]: #cancellations [capture]: #captures [complete-url]: /payment-instruments/vipps/features/technical-reference/complete-url [expand-parameter]: /introduction#expansion [paymenturl]: /payment-instruments/vipps/features/technical-reference/payment-url [prices]: /payment-instruments/vipps/features/technical-reference/prices [reverse]: #reversals [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/vipps/after-payment.html"
  },{
    "title": "After Payment",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/basic/after-payment.html"
  },{
    "title": "After Payment",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/standard/after-payment.html"
  },{
    "title": "After Payment",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/tailored/after-payment.html"
  },{
    "title": "After Payment",
    "text": "{% include payment-order-after-payment.md %} {% include iterator.html prev_href=\"capture\" prev_title=\"Capture\" next_href=\"features\" next_title=\"Features\" %}",
    "tags": "",
    "url": "/checkout/v2/after-payment.html"
  },{
    "title": "After Payment",
    "text": "{% include payment-order-after-payment.md %} {% include iterator.html prev_href=\"capture\" prev_title=\"Capture\" next_href=\"features\" next_title=\"Features\" %}",
    "tags": "",
    "url": "/payment-menu/after-payment.html"
  },{
    "title": "Android Default UI",
    "text": "{% include mobile-sdk-android-default-ui.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/technical-reference/android-default-ui.html"
  },{
    "title": "Android View Model Provider Key",
    "text": "{% include mobile-sdk-android-view-model-provider-key.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/technical-reference/android-view-model-provider-key.html"
  },{
    "title": "Android",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} This guide assumes that you are using the Merchant Backend Configuration and your backend implements the Merchant Backend API. If you are using a custom backend instead, the meaning of `PaymentFragment` arguments will be different, as well as any errors reported, but the basic process is the same. The differences will be highlighted in the chapter on custom backends. ## Installation The Android component of the Swedbank Pay Mobile SDK is distributed through JCenter, which is a default repository in Android Studio projects. Therefore, most applications can integrate the SDK by simply adding the dependency. Please refer to the [Bintray page][sdk-bintray] for the latest version of the SDK. ## Usage ```mermaid sequenceDiagram participant App participant SDK participant Merchant participant SwedbankPay as Swedbank Pay participant Ext as External App rect rgba(238, 112, 35, 0.05) note left of App: Configuration App ->> SDK: MerchantBackendConfiguration.Builder(\"https://example.com/swedbank-pay-mobile/\").build() SDK -->> App: configuration App ->> SDK: PaymentFragment.defaultConfiguration = configuration end opt Unless Guest Payment App ->> SDK: Consumer(language = ..., shippingAddressRestrictedToCountryCodes = ...) SDK -->> App: consumer end rect rgba(138, 205, 195, 0.1) note left of App: Prepare Payment App ->> SDK: PaymentOrderUrls(context, \"https://example.com/swedbank-pay-mobile/\") SDK -->> App: paymentOrderUrls App ->> SDK: PaymentOrder(urls = paymentOrderUrls, ...) SDK -->> App: paymentOrder end App ->> SDK: activity.paymentViewModel.[rich]state.observe(...) App ->> SDK: PaymentFragment.ArgumentsBuilder().consumer(consumer).paymentOrder(paymentOrder).build() SDK -->> App: arguments App ->> SDK: PaymentFragment() SDK -->> App: paymentFragment App ->> SDK: paymentFragment.arguments = arguments App ->> App: Show paymentFragment rect rgba(138, 205, 195, 0.1) note left of App: Discover Endpoints SDK ->> Merchant: GET /swedbank-pay-mobile/ Merchant -->> SDK: { \"consumers\": \"/swedbank-pay-mobile/consumers\", \"paymentorders\": \"/swedbank-pay-mobile/paymentorders\" } end opt Unless Guest Payment SDK ->> Merchant: POST /swedbank-pay-mobile/consumers Merchant ->> SwedbankPay: POST /psp/consumers SwedbankPay -->> Merchant: rel: view-consumer-identification Merchant -->> SDK: rel: view-consumer-identification SDK ->> SDK: Show html page with view-consumer-identification SwedbankPay ->> SDK: Consumer identification process SDK ->> SwedbankPay: Consumer identification process SwedbankPay ->> SDK: consumerProfileRef SDK ->> SDK: paymentOrder.payer = { consumerProfileRef } end rect rgba(138, 205, 195, 0.1) note left of App: Payment Menu SDK ->> Merchant: POST /swedbank-pay-mobile/paymentorders Merchant ->> SwedbankPay: POST /psp/paymentorders SwedbankPay -->> Merchant: rel: view-paymentorder Merchant -->> SDK: rel: view-paymentorder SDK ->> SDK: Show html page with view-paymentorder SwedbankPay ->> SDK: Payment process SDK ->> SwedbankPay: Payment process opt Redirect to Third-Party Page SDK ->> SDK: Show third-party page SDK ->> SDK: Intercept navigation to paymentUrl SDK ->> SDK: Reload html page with view-paymentorder end opt Launch External Application SDK ->> Ext: Start external application Ext ->> Merchant: Open paymentUrl Merchant ->> Ext: Redirect intent://action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER Ext ->> SDK: Start activity\\naction=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER SDK ->> SDK: Reload html page with view-paymentorder end SDK ->> SDK: Intercept navigation to completeUrl SDK ->> SDK: paymentViewModel.state > App: observer.onChanged(SUCCESS) end App ->> App: Remove paymentFragment ``` The public API of the Android SDK is in the package [`com.swedbankpay.mobilesdk`][dokka-pkg]. The main component is [`PaymentFragment`][dokka-payfrag], a `Fragment` that handles a single payment order. To use a `PaymentFragment`, it must have a [`Configuration`][dokka-config]. In most cases it is enough to construct a single `Configuration` and set it as the [default][dokka-payfrag-defconf]. In more advanced cases you will need to subclass `PaymentFragment` and override [`getConfiguration`][dokka-payfrag-getconf]. For using a backend implementing the Merchant Backend API, the SDK also provides utility classes in the package [`com.swedbankpay.mobilesdk.merchantbackend`][dokka-pkg-merch]. The examples on this page make use of these, including the `Configuration` implementation [`MerchantBackendConfiguration`][dokka-merchconfig]. ```kotlin val backendUrl = \"https://example.com/swedbank-pay-mobile/\" val configuration = MerchantBackendConfiguration.Builder(backendUrl) .build() PaymentFragment.defaultConfiguration = configuration ``` To start a payment, you need a [`PaymentOrder`][dokka-paymentorder], and, unless making a guest payment, a [`Consumer`][dokka-consumer]. Using a `Consumer` makes future payments by the same payer easier. The semantics of `Consumer` properties are the same as the fields of the [`POST /psp/consumers`][checkin-consumer] request. There are default values for the `operation` and `language` properties (`ConsumerOperation.INITIATE_CONSUMER_SESSION` and `Language.ENGLISH`, respectively). ```kotlin val consumer = Consumer( language = Language.SWEDISH, shippingAddressRestrictedToCountryCodes = listOf(\"NO\", \"SE\", \"DK\") ) ``` Similarly, the semantics of `PaymentOrder` properties are the same as the fields of the [`POST /psp/paymentorders`][checkin-paymentorder] request. Sensible default values are provided for many of the properties. The `urls` property has no default per se, but there are [convenience constructors][dokka-paymentorderurls-init] available for it, and it is recommended that you use them. Assuming you have the Android Payment Url Helper endpoint set up with the specified static path relative to your backend url (i.e. `sdk-callback/android-intent`), then using the one of the `PaymentOrderUrls(context: Context, backendUrl: String)` variants will set the `paymentUrl` correctly. ```kotlin val paymentOrder = PaymentOrder( currency = Currency.getInstance(\"SEK\"), amount = 1500L, vatAmount = 375L, description = \"Test Purchase\", language = Language.SWEDISH, urls = PaymentOrderUrls(context, backendUrl), payeeInfo = PayeeInfo( // ① payeeName = \"Merchant1\", productCategory = \"A123\", orderReference = \"or-123456\", subsite = \"MySubsite\" ), orderItems = listOf( OrderItem( reference = \"P1\", name = \"Product1\", type = ItemType.PRODUCT, `class` = \"ProductGroup1\", itemUrl = \"https://example.com/products/123\", imageUrl = \"https://example.com/product123.jpg\", description = \"Product 1 description\", discountDescription = \"Volume discount\", quantity = 4, quantityUnit = \"pcs\", unitPrice = 300L, discountPrice = 200L, vatPercent = 2500, amount = 1000L, vatAmount = 250L ) ) ) ``` * ① payeeId and payeeReference are required fields, but default to the empty string. The assumption here is that your Merchant Backend will override the values set here. If your system works better with the Mobile Client setting them instead, they are available here also. To start a payment, create a `PaymentFragment` and set its arguments according to the payment. The [`PaymentFragment.ArgumentsBuilder`][dokka-payfrag-argbuilder] class is provided to help with creating the argument bundle. In most cases you only need to worry about the [`consumer`][dokka-payfrag-argbuilder-consumer] and [`paymentOrder`][dokka-payfrag-argbuilder-paymentorder] properties. The payment process starts as soon as the `PaymentFragment` is visible. ```kotlin val arguments = PaymentFragment.ArgumentsBuilder() .consumer(consumer) .paymentOrder(paymentOrder) .build() val paymentFragment = PaymentFragment() paymentFragment.arguments = arguments // Now use FragmentManager to show paymentFragment. // You can also make a navigation graph with PaymentFragment // and do something like // findNavController().navigate(R.id.showPaymentFragment, arguments) ``` To observe the payment process, use the [`PaymentViewModel`][dokka-paymentvm] [of the containing `Activity`][dokka-activity-paymentvm]. When the `PaymentViewModel` [signals][dokka-paymentvm-livestate] that the payment process has reached a [final][dokka-paymentvm-state-isfinal] state, you should remove the `PaymentFragment` and inform the user of the result. ```kotlin paymentViewModel.state.observe(this, Observer { if (it.isFinal == true) { // Remove PaymentFragment // Check payment status from your backend // Notify user } }) ``` Note that checking the payment status after completion is outside the scope of the Mobile SDK. Your backend should collect any information it needs to perform this check when it services the request to the [Payment Orders endpoint][backend-payment-orders] made by the `PaymentFragment`. ## Errors If any errors happen in the payment, the `PaymentViewModel` will report a state of either `FAILURE` or `RETRYABLE_ERROR`. If the error is retryable, the `PaymentFragment` will show an error message and a retry control (this is configurable), but you can also trigger a retry by calling retryPreviousAction on the `PaymentViewModel`. When the state is `FAILURE` or `RETRYABLE_ERROR`, and the error condition was caused by an exception thrown from the `Configuration`, that exception is available in [`PaymentViewModel.richState.exception`][dokka-paymentvm-richstate-exception]. The exception will be of any type throw by your `Configuration`. When using `MerchantBackendConfiguration`, this means it will be an `IOException` if there was a problem communicating with the backend, and an `IllegalStateException` if you have made a programming error (consult the exception message). A particular `IOException` to check for is [`RequestProblemException`][dokka-problem-exception], which signals that the backend responded with a Problem message. Another one is [`UnexpectedResponseException`][dokka-unexpected-exception], which signals that the SDK did not understand the backend response. ## Problems If errors are encountered in the payment process, the Merchant Backend is expected to respond with a [Problem Details for HTTP APIs (RFC 7807)][rfc-7807] message. If a problem occurs, the application can receive it by observing the [`richState`][dokka-paymentvm-liverichstate] of the `PaymentViewModel`. If a problem has occurred, the [`exception`][dokka-paymentvm-richstate-exception] property of the [`RichState`][dokka-paymentvm-richstate] will contain a [`RequestProblemException`][dokka-problem-exception]. The problem is then accessible as [`exception.problem`][dokka-problem-exception-problem]. The Android SDK will parse any RFC 7807 problem, but it has specialized data types for known problem types, namely the [Common Problems][swedbankpay-problems] and the [Merchand Backend Problems][backend-problems]. Problems are presented as a [class hierarchy][dokka-problem] representing different problem categories. All problems parsed from RFC 7807 messages are classified as either [`Client`][dokka-problem-client] or [`Server`][dokka-problem-server] problems. A `Client` problem is one caused by client behaviour, and is to be fixed by changing the request made to the server. Generally, a `Client` problem is a programming error, with the possible exception of [`Problem.Client.MobileSDK.Unauthorized`][dokka-problem-client-mobilesdk-unauthorized]. A `Server` problem is one caused by a malfunction or lack of service in the server evironment. A `Server` problem is fixed by correcting the behaviour of the malfunctioning server, or simply trying again later. Further, both `Client` and `Server` problems are categorized as `MobileSDK`, `SwedbankPay`, or `Unknown`. `MobileSDK` problems are ones with [Merchant Backend problem types][backend-problems], while `SwedbankPay` problems have [Swedbank Pay API problem types][swedbankpay-problems]. `Unknown` problems are of types that the SDK has no knowledge of. There is also the interface [`SwedbankPayProblem`][dokka-swedbankpayproblem], which encompasses both [`Client`][dokka-problem-client-swedbankpay] and [`Server`][dokka-problem-server-swedbankpay] type `SwedbankPay` problems. ```kotlin paymentViewModel.richState.observe(this, Observer { if (it.state.isFinal == true) { val exeption = it.exception as? RequestProblemException if (exception != null) ( when (val problem = exception.problem) { is MerchantBackendProblem.Client.MobileSDK.Unauthorized -> Log.d(TAG, \"Credentials invalidated: ${problem.message}\") if MerchantBackendProblem.Client.MobileSDK -> Log.d(TAG, \"Other client error at Merchant Backend: ${problem.raw}\") is MerchantBackendProblem.Client.SwedbankPay.InputError -> Log.d(TAG, \"Payment rejected by Swedbank Pay: ${problem.detail}; Fix: ${problem.action}\") is MerchantBackendProblem.Client.Unknown -> if (problem.type == \"https://example.com/problems/special-problem\") { Log.d(TAG, \"Special problem occurred: ${problem.detail}\") } else { Log.d(TAG, \"Unexpected problem: ${problem.raw}\") } is MerchantBackendProblem.Server.MobileSDK.BackendConnectionTimeout -> Log.d(TAG, \"Swedbank Pay timeout: ${problem.message}\") is MerchantBackendProblem.Server.SwedbankPay.SystemError -> Log.d(TAG, \"Generic server error at Swedbank Pay: ${problem.detail}\") is SwedbankPayProblem -> Log.d(TAG, \"Other problem at Swedbank Pay: ${problem.detail}; Fix: ${problem.action}\") else -> Log.d(TAG, \"Unexpected problem: ${problem.raw}\") } } } }) ``` ## Payment URL and External Applications The payment process may involve navigating to third-party web pages, or even launching external applications. To resume processing the payment in the payment menu, each payment order must have a [Payment Url][paymenturl]. As mentioned above, the SDK has convenience constructors to set up a payment url for you, and as the SDK handles showing third-party web pages inside the `PaymentFragment`, it automatically intercepts any navigation to the payment url, and reloads the payment menu. This requires no additional setup. If a third party application is launched, it will signal the return to the payment menu by opening the payment url, using a standard `ACTION_VIEW` `Intent`. The payment url is built such that it uses the [Android Payment Url Helper][android-helper], which serves an html page that converts the url to an [intent url][android-intent-scheme] and redirects to it. The SDK has an intent filter for that intent, so the SDK will receive it, bringing the containing application to the foreground, and reloading the payment menu. If your Merchant Backend serves the Android Payment Url Helper endpoint at the specified path, no further setup is needed. Note that there is an [argument][dokka-payfrag-argbuilder-usebrowser] for debugging purposes that cause third-party web pages to be opened in an external application. In that case the process continues analogously to the external application case. Using this argument should not be necessary, however. If you do find a case that does not work inside the PaymentFragment, but does work when using the browser for third-party sites, please file a bug on the Android SDK. {% include iterator.html prev_href=\"merchant-backend-sample-code\" prev_title=\"Merchant Backend Sample Code\" next_href=\"ios\" next_title=\"iOS\" %} [sdk-bintray]: https://bintray.com/swedbankpay/swedbank-pay-sdk-android/swedbank-pay-sdk-android [dokka-pkg]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/index.md [dokka-pkg-merch]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/index.md [dokka-payfrag]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/index.md [dokka-payfrag-argbuilder]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/-arguments-builder/index.md [dokka-payfrag-argbuilder-consumer]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/-arguments-builder/consumer.md [dokka-payfrag-argbuilder-paymentorder]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/-arguments-builder/payment-order.md [dokka-payfrag-argbuilder-usebrowser]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/-arguments-builder/use-browser.md [dokka-payfrag-defconf]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/-companion/default-configuration.md [dokka-payfrag-getconf]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-fragment/get-configuration.md [dokka-config]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-configuration/index.md [dokka-merchconfig]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-configuration/index.md [dokka-paymentvm]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/index.md [dokka-paymentvm-livestate]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/state.md [dokka-paymentvm-liverichstate]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/rich-state.md [dokka-paymentvm-state-isfinal]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/-state/is-final.md [dokka-paymentvm-richstate]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/-rich-state/index.md [dokka-paymentvm-richstate-exception]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-view-model/-rich-state/exception.md [dokka-consumer]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-consumer/index.md [dokka-paymentorder]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-order/index.md [checkin-consumer]: /checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [checkin-paymentorder]: /checkout/v2/payment-menu#step-3-create-payment-order [dokka-paymentorderurls-init]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-payment-order-urls/-payment-order-urls.md [dokka-activity-paymentvm]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/payment-view-model.md [backend-payment-orders]: merchant-backend#payment-orders-endpoint [dokka-problem-exception]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/ [dokka-problem-exception-problem]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/ [dokka-unexpected-exception]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/ [rfc-7807]: https://tools.ietf.org/html/rfc7807 [swedbankpay-problems]: /introduction#problems [backend-problems]: merchant-backend#problems [dokka-problem]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/index.md [dokka-problem-client]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/-client/index.md [dokka-problem-client-swedbankpay]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/-client/-swedbank-pay/index.md [dokka-problem-client-mobilesdk-unauthorized]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/-client/-mobile-s-d-k/-unauthorized/index.md [dokka-problem-server]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/-server/index.md [dokka-problem-server-swedbankpay]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-merchant-backend-problem/-server/-swedbank-pay/index.md [dokka-swedbankpayproblem]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk.merchantbackend/-swedbank-pay-problem/index.md [paymenturl]: /checkout/v2/features/technical-reference/payment-url [android-helper]: merchant-backend#android-payment-url-helper [android-intent-scheme]: https://developer.chrome.com/multidevice/android/intents",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/android.html"
  },{
    "title": "Authentication",
    "text": "{% include gift-card-authentication.md %}",
    "tags": "",
    "url": "/gift-cards/features/core/authentication.html"
  },{
    "title": "Authorizations",
    "text": "{% include authorizations.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/authorizations.html"
  },{
    "title": "Balance",
    "text": "{% include gift-card-balance.md %}",
    "tags": "",
    "url": "/gift-cards/features/core/balance.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include callback.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include callback.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include callback.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include callback.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include callback.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/callback.html"
  },{
    "title": "Callback",
    "text": "{% include alert-risk-indicator.md %} {% include callback.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/callback.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/cancel.html"
  },{
    "title": "Cancel",
    "text": "{% include cancel.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/cancel.html"
  },{
    "title": "Capture",
    "text": "{% include capture.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} {% include mobilepay-payments-capture.md %} **Et voilà!** The payment should now be complete, secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described in After Payment. {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"after-payment\" next_title=\"After Payment\" %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/capture.html"
  },{
    "title": "Capture",
    "text": "{% include capture.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} {% include card-payments-capture.md %} **Et voilà!** The payment should now be complete, secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described in After Payment. {% include iterator.html prev_href=\"direct\" prev_title=\"Direct\" next_href=\"after-payment\" next_title=\"After Payment\" %}",
    "tags": "",
    "url": "/payment-instruments/card/capture.html"
  },{
    "title": "Capture",
    "text": "{% include capture.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} ## Capture The final step in the integration process for Invoice [Redirect][redirect], [Seamless View][seamless-view] and [Direct][direct] is to complete a `Capture`. {% include invoice-capture.md %} {% include iterator.html prev_href=\"direct\" prev_title=\"Direct\" next_href=\"after-payment\" next_title=\"After Payment\" %} [direct]: /payment-instruments/invoice/direct [redirect]: /payment-instruments/invoice/redirect [seamless-view]: /payment-instruments/invoice/seamless-view",
    "tags": "",
    "url": "/payment-instruments/invoice/capture.html"
  },{
    "title": "Capture",
    "text": "{% include vipps-payments-capture.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} {% include vipps-payments-capture.md %} **Et voilà!** The payment should now be complete, secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described in After Payment. {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless View\" next_href=\"after-payment\" next_title=\"After Payment\" %}",
    "tags": "",
    "url": "/payment-instruments/vipps/capture.html"
  },{
    "title": "Capture",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/basic/capture.html"
  },{
    "title": "Capture",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/standard/capture.html"
  },{
    "title": "Capture",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/tailored/capture.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} {% include payment-order-capture.md %} **Et voilà!** Checkout should now be complete, the payment should be secure and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described below. {% include iterator.html prev_href=\"payment-menu\" prev_title=\"Payment Menu\" next_href=\"after-payment\" next_title=\"After Payment\" %}",
    "tags": "",
    "url": "/checkout/v2/capture.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/capture.html"
  },{
    "title": "Capture",
    "text": "{% include alert-two-phase-payments.md %} {% include payment-order-capture.md %} **Et voilà!** The payment should now be complete and everyone should be happy. But, sometimes you also need to implement the cancellation and reversal operations described in [After Payment][after-payment]. {% include iterator.html prev_href=\"payment-order\" prev_title=\"Payment Order\" next_href=\"after-payment\" next_title=\"After Payment\" %} [after-payment]: /payment-menu/after-payment",
    "tags": "",
    "url": "/payment-menu/capture.html"
  },{
    "title": "Card Authorization Transaction",
    "text": "{% include card-authorization-transaction.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/card-authorization-transaction.html"
  },{
    "title": "Checkin Events",
    "text": "{% include checkin-events.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/checkin-events.html"
  },{
    "title": "Checkin Events",
    "text": "{% include checkin-events.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/checkin-events.html"
  },{
    "title": "Checkin Events",
    "text": "{% include checkin-events.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/checkin-events.html"
  },{
    "title": "Checkin Events",
    "text": "{% include checkin-events.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/checkin-events.html"
  },{
    "title": "Checkin Events",
    "text": "{% include checkin-events.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/checkin-events.html"
  },{
    "title": "Checkout – Checkin",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/standard/checkin.html"
  },{
    "title": "Checkout – Checkin",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/dsca/checkin.html"
  },{
    "title": "Checkout – Checkin",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/tailored/checkin.html"
  },{
    "title": "Checkout – Checkin",
    "text": "## Step 1: Initiate session for consumer identification The payer will be identified with the `consumers` resource and will be persisted to streamline future Payment Menu processes. Payer identification is done through the `initiate-consumer-session` operation. {% include alert.html type=\"informative\" icon=\"info\" header=\"Guest Checkout\" body=\"Note: If the payer is using the Payment Menu as a guest, you can go directly to step 3, which you will find on the next page.\" %} {:.code-view-header} **Request** ```http POST /psp/consumers HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"], \"requireShippingAddress\": true } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :---------------------------------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `operation` | `string` | `initiate-consumer-session`, the operation to perform. | | {% icon check %} | `language` | `string` | Selected language to be used in Checkin. Supported values are {% include field-description-language.md %} | | | `shippingAddressRestrictedToCountryCodes` | `string` | List of supported shipping countries for merchant. Using [ISO-3166] standard. This is required unless `requireShippingAddress` is set to false. | | | `requireShippingAddress` | `bool` | Defaults to true. If set to false we will not collect a shipping address from the consumer. | When the request has been sent, a response containing an array of operations that can be acted upon will be returned: {:.code-view-header} **Response** ```jsonc { \"token\": \"7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"operations\": [ { // Deprecated operation. Do not use! \"method\": \"GET\", \"rel\": \"redirect-consumer-identification\", \"href\": \"{{ page.front_end_url }}/consumers/sessions/7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"{{ page.front_end_url }}/consumers/core/scripts/client/px.consumer.client.js?token={{ page.payment_token }}\", \"contentType\": \"application/javascript\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :-------------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------------------ | | `token` | `string` | A session token used to initiate Checkout UI. | | `operations` | `array` | The array of operation objects to choose from, described in detail in the table below. | | └➔&nbsp;`rel` | `string` | The relational name of the operation, used as a programmatic identifier to find the correct operation given the current state of the application. | | └➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └➔&nbsp;`contentType` | `string` | The HTTP content type of the target URI. Indicates what sort of resource is to be found at the URI, how it is expected to be used and behave. | | └➔&nbsp;`href` | `string` | The target URI of the operation. | ## Step 2: Display Swedbank Pay Checkin module The response from the `POST` of consumer information contains a few operations. The combination of `rel`, `method` and `contentType` should give you a clue how the operation should be performed. The `view-consumer-identification` operation and its `application/javascript` content type gives us a clue that the operation is meant to be embedded in a ` ``` {% include alert.html type=\"informative\" icon=\"info\" body=\"The Checkin and Payment Menu components (the two `` elements) must be separate (one must not replace the other).\" %} In the HTML, you only need to add two `` elements to place the check-in and payment menu inside of. The JavaScript will handle the rest when it comes to handling the check-in and payment menu. {:.code-view-header} **JavaScript** ```js var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. var response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes that the operations from the response of the POST from the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // consumerIdentifiedEvent.consumerProfileRef contains the reference // to the identified consumer which we need to pass on to the // Payment Order to initialize a personalized Payment Menu. console.log(consumerIdentifiedEvent); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example we'll send in all of the information mentioned before, // in the request to the endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes: ['NO', 'SE'] })); ``` {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that we add the script at the end of the body. This ensures that every element (like the container `` elements) has loaded in before we try to access them with our script.\" %} With the scripts loading in after the entire page is loaded, we can access the `` container that the Checkin will be hosted in. When everything has finished loading, you should see something like this: {:.text-center} ![Consumer UI Start Page][checkin-start]{:width=\"425\" height=\"275\"} In this example, the payer's information is pre-filled as provided by the initial `POST`. If not, the fields will appear empty. {% include alert-checkin-agreement-required.md %} From here, there are three ways forwards, depending on the consumer. If they are registered with a profile at Swedbank Pay, the information already provided will be sufficient. The consumer can simply click proceed, and the profile will appear on the page (with sensitive data masked). If Swedbank Pay detects that the consumer hasn't registered any personal details, two options are provided: Store details for future purchases or proceed without storing details. {:.text-center} ![Consumer UI New Consumer Options][checkin-options]{:width=\"425\" height=\"475\"} If he or she chooses to store details, the next step is to enter their SSN. {:.text-center} ![Consumer UI SSN][checkin-ssn]{:width=\"425\" height=\"250\"} Once a valid SSN has been provided, a page for address details appears. When the consumer has entered their address, the profile box shown above will be displayed. {:.text-center} ![Consumer UI Address][checkin-address]{:width=\"425\" height=\"675\"} If the consumer opts out of storing their details, they will be sent directly to the page for address details to enter their shipping address. This info is not stored for future purchases. Please note that this is **not** the same as shopping as a guest. With a `consumerProfileRef` safely tucked into our pocket, the Checkin is complete and we can move on to [Payment Menu][payment-menu]. A complete overview of how the process of identifying the payer through Checkin is illustrated in the sequence diagram below. ```mermaid sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) note left of Consumer: Checkin Consumer ->>+ Merchant: Start Checkin Merchant ->>+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant -->>- Consumer: Show Checkin on Merchant Page Consumer ->>+ Consumer: Initiate Consumer Seamless View (open iframe) ② Consumer ->>+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Consumer SwedbankPay ->>- Consumer: Consumer identification process activate Consumer Consumer ->>+ SwedbankPay: Consumer identification process deactivate Consumer SwedbankPay -->>- Consumer: show consumer completed iframe activate Consumer Consumer ->> Consumer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Consumer end ``` If a browser refresh is performed after the payer has checked in, the payment menu must be shown even though `onConsumerIdentified` is not invoked. Additional events during Checkin can also be implemented in the `configuration` object, such as `onConsumerIdentified`, `onShippingDetailsAvailable`and `onBillingDetailsAvailable`. Read more about these in the [Checkin events][checkin-events] section. ### Note on consumer data During this stage, some consumer data is stored. Read more about our [Data Protection Policy][data-protection] for details on which information we store and its duration. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"payment-menu\" next_title=\"Payment Menu\" %} [checkin-address]: /assets/img/checkout/checkin-address.png [checkin-start]: /assets/img/checkout/checkin-email-msisdn.png [checkin-options]: /assets/img/checkout/checkin-options.png [checkin-ssn]: /assets/img/checkout/checkin-ssn.png [checkin-events]: /checkout/v2/features/technical-reference/checkin-events [data-protection]: /resources/data-protection#paymentorder-consumer-data [payment-menu]: payment-menu [iso-3166]: https://www.iso.org/iso-3166-country-codes.html",
    "tags": "",
    "url": "/checkout/v2/checkin.html"
  },{
    "title": "Co-badge Dankort",
    "text": "{% include cobadge-dankort.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/cobadge-dankort.html"
  },{
    "title": "Code Of Conduct",
    "text": "It is important that the projects governed by Swedbank Pay foster a collaborative, open, inclusive, positive and tolerant community. To underscore this, a `CODE_OF_CONDUCT.md` file from [Contributor Covenant][contributor-covenant] should be added to the project: ## Contributor Code of Conduct As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior by participants include: * The use of sexualized language or imagery * Personal attacks * Trolling or insulting/derogatory comments * Public or private harassment * Publishing other's private information, such as physical or electronic addresses, without explicit permission * Other unethical or unprofessional conduct Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer at [opensource@payex.com][opensource-mail]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident. This Code of Conduct is adapted from the [Contributor Covenant][contributor-covenant], version 1.3.0, available at [http://contributor-covenant.org/version/1/3/0/][version] The Code of Conduct should then be referenced from the `CONTRIBUTING` file, for example with the following paragraphs: > Please note that this project is released with a Contributor Code of Conduct. > By participating in this project you agree to abide by its terms. [contributor-covenant]: https://contributor-covenant.org/ [opensource-mail]: mailto:opensource@payex.com [version]: https://contributor-covenant.org/version/1/3/0/",
    "tags": "",
    "url": "/resources/development-guidelines/code-of-conduct.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/complete-url.html"
  },{
    "title": "CompleteUrl",
    "text": "{% include complete-url.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/complete-url.html"
  },{
    "title": "Configuration",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} While making a payment, the SDK will need to create a payment order, and possibly start a consumer identification session. These are ultimately done using the relevant Swedbank Pay APIs, but as those are protected by secrets you cannot securely embed in a mobile app, you will need our own server in the middle. The SDK cannot communicate directly with your servers, so you must provide a Configuration that specifies how it does that. This page provides a basic overview of the Configuration on both iOS and Android. More details shall be discussed in the platform-specific chapters. ## iOS The Configuration is a value that conforms to the `SwedbankPaySDKConfiguration` protocol. The procotol has two required methods: ```swift struct MyConfiguration : SwedbankPaySDKConfiguration { // This method is called when the SDK starts a consumer identification session. // You need to make a request to your own backend here, that backend must // make a POST /psp/consumers request to Swedbank Pay, finally you must propagate // the result of that request to the completion callback here. // // The consumer and userData arguments are the values set to your // SwedbankPaySDKController. Their precise meaning is up to you. func postConsumers( consumer: SwedbankPaySDK.Consumer?, userData: Any?, completion: @escaping (Result) -> Void ) { // code } // This method is called when the SDK creates the payment order. // You need to make a request to your own backend here, that backend must // make a POST /psp/paymentorders request to Swedbank Pay, finally you must propagate // the result of that request to the completion callback here. // // The paymentOrder and userData arguments are the values set to your // SwedbankPaySDKController. Their precise meaning is up to you. // // If you are making a payment with consumer identification, then the // consumerProfileRef from the identification session will be provided // in the consumerProfileRef argument. Otherwise, consumerProfileRef will be nil. func postPaymentorders( paymentOrder: SwedbankPaySDK.PaymentOrder?, userData: Any?, consumerProfileRef: String?, completion: @escaping (Result) -> Void ) { // code } } ``` ## Android The Configuration is a subclass of the abstract class [`Configuration`][dokka-config]. The class has two abstract methods. These methods are suspending (asynchronous) Kotlin methods; a compatibility class is provided if you need to implement your Configuration in Java instead. ```kotlin class MyConfiguration : Configuration() { // This method is called when the SDK starts a consumer identification session. // You need to make a request to your own backend here, that backend must // make a POST /psp/consumers request to Swedbank Pay, and finally you must // return a ViewConsumerIdentificationInfo object populated with the // results of that request. // // The context argument is an application context for resource access. // The consumer and userData arguments are the values set as arguments // to PaymentFragment. Their precise meaning is up to you. override suspend fun postConsumers( context: Context, consumer: Consumer?, userData: Any? ): ViewConsumerIdentificationInfo { // code } // This method is called when the SDK creates the payment order. // You need to make a request to your own backend here, that backend must // make a POST /psp/paymentorders request to Swedbank Pay, finally you must // return a ViewPaymentOrderInfo object populated with the // results of that request. // // The context argument is an application context for resource access. // The paymentOrder and userData arguments are the values set as arguments // to PaymentFragment. Their precise meaning is up to you. // // If you are making a payment with consumer identification, then the // consumerProfileRef from the identification session will be provided // in the consumerProfileRef argument. Otherwise, consumerProfileRef will be nil. override suspend fun postPaymentorders( context: Context, paymentOrder: PaymentOrder?, userData: Any?, consumerProfileRef: String? ): ViewPaymentOrderInfo { // code } } ``` ## Backend As the mobile application cannot talk directly to Swedbank Pay servers, you will need your own backend to make those requests on the behalf of your Configuration. You are free to design your backend as best suits you, but the next chapter will detail one possible implementation, which also has a bundled-in Configuration implementation available in the SDK. One thing you should keep in mind while designing your backend is that the `paymentUrl` of your payment order needs special consideration in order to work correctly. This is a somewhat complicated issue, discussed in detail in each platform-specific chapter, but the gist of the issue is that the `paymentUrl` will, in some cases, be opened in the browser application, and at that point we must take some measures to return to your application to continue the payment. This can be accomplished by having `paymentUrl` return a redirect response; the details of that redirect will be discussed in the platform-specific pages. It is recommneded that `paymentUrl` be unique to each payment order that you create. The next chapter will go over the Merchant Backend API. It will also explore in detail how `paymentUrl` is handled on a server implementing the Merchant Backend API. The SDK comes ready with a Configuration suitable for a server implementing the Merchant Backend API, which will be discussed in detail in the client platform specific chapters. {% include iterator.html prev_href=\"./\" prev_title=\"Back: Introduction\" next_href=\"merchant-backend\" next_title=\"Next: Merchant Backend\" %} [dokka-config]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-configuration/index.md",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/configuration.html"
  },{
    "title": "Contributing",
    "text": "To make it clear exactly how outside contributors should provide their contributions to the project, a CONTRIBUTING.md file should be created at the root of the repository. Once such a file exists, GitHub will present it to users creating new pull requests, issues, etc. in the repository. Here's an example of how such a file can look like: ## How to contribute To contribute to the Swedbank Pay Development Guidelines, there's just a few things you need to know. ## Getting Started * Read and make sure you agree with the [Code of Conduct][coc]. * Make sure you have a [GitHub account][github]. * Then, you have three options: 1. Submit a ticket for your issue, assuming one does not already exist. * Clearly describe the issue including steps to reproduce when it is a bug. * Make sure you fill in the earliest version that you know has the issue. 2. [Directly edit the file][edit] you want to change on GitHub. 3. [Fork the repository on GitHub][forking]. If you choose option 3 (forking the repository), then please read on. ## Making Changes * Create a new [branch][branching] from where you want to base your work. * This is usually the `master` or `develop` branch. * Please avoid working directly on the `master` and `develop` branch. * Make [commits][commit] of logical units in the new branch. * Check for unnecessary whitespace with `git diff --check` before committing. * Make sure your [commit messages][commit-practice] are well written and in the proper format. * [Push][push] the branch to your [forked repository (remote)][remote]. * Submit a [pull request][pull-request] for the pushed branch. [coc]: /resources/development-guidelines/code-of-conduct [github]: https://github.com/join [edit]: https://help.github.com/articles/editing-files-in-your-repository/ [forking]: https://help.github.com/articles/fork-a-repo/ [branching]: https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell [commit]: https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository [commit-practice]: /resources/development-guidelines/good-commit-practice [push]: https://git-scm.com/docs/git-push [remote]: https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes [pull-request]: https://help.github.com/articles/using-pull-requests/",
    "tags": "",
    "url": "/resources/development-guidelines/contributing.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/create-payment.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/create-payment.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/create-payment.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/create-payment.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/create-payment.html"
  },{
    "title": "Create Payment",
    "text": "{% include create-payment.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/create-payment.html"
  },{
    "title": "Mobile SDK – Custom Backend",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} In this chapter we explore how to integrate the mobile SDK with a fully custom backend server. It is recommended that you first read through the previous chapters and gain an understanding of how the SDK works with a backend implementing the Merchant Backend API. ## Basic Backend Requirements To support the SDK, your backend must be capable of at least [creating a payment order][create-payment-order]. If you wish to use consumer identification, it must also be able to [start an identification session][initiate-consumer-session]. In addition to these, your backend must serve the appropriate html documents at urls used for the [`paymentUrl`][payment-url]; the content of these html documents will be discussed below, but it is noteworthy that they are different for payments from Android applications and those from iOS applications. Further, the urls used for as `paymentUrl` on iOS must be [configured as universal links for your iOS application][ios-aasa]. ## Android Configuration To bind the SDK to your custom backend, you must create a subclass of `com.swedbankpay.mobilesdk.Configuration`. This must be a Kotlin class. If you cannot use Kotlin, you can use the compatibility class `com.swedbankpay.mobilesdk.ConfigurationCompat`. Your subclass must provide implementations of `postConsumers` and `postPaymentorders`. These methods are named after the corresponding Swedbank Pay APIs they are intended to be forwarded to. If you do not intend to use consumer identification, you can have your `postConsumers` implementation throw an exception. The methods will be called with the arguments you give to the `PaymentFragment`. Therefore, the meaning of `consumer`, `paymentOrder`, and `userData` is up to you. If the consumer was identified before creating the paymentOrder, the consumer reference will be passed in the `consumerProfileRef` argument of `postPaymentorders`. The exact implementation of these methods is outside the scope of this document. You must return a `ViewConsumerIdentificationInfo` and a `ViewPaymentOrderInfo` object respectively; please refer to their class documentation on how to populate them from your backend responses. Any exception you throw from these methods will in turn be reported from the `PaymentViewModel`. Whether a given exception is treated as a retryable condition is controlled by the `shouldRetryAfterException` methods; by default they only consider `IllegalStateException` as fatal. Please refer to the `Configuration` documentation on all the features. ```kotlin class MyConfiguration : Configuration() { suspend fun postConsumers( context: Context, consumer: Consumer?, userData: Any? ): ViewConsumerIdentificationInfo { val viewConsumerIdentification = post(\"https://example.com/identify\") return ViewConsumerIdentificationInfo( webViewBaseUrl = \"https://example.com/\", viewConsumerIdentification = viewConsumerIdentification ) } suspend fun postPaymentorders( context: Context, paymentOrder: PaymentOrder?, userData: Any?, consumerProfileRef: String? ): ViewPaymentOrderInfo { val viewPaymentOrder = post(\"https://example.com/pay/android\") return ViewPaymentOrderInfo( webViewBaseUrl = \"https://example.com/\", viewPaymentOrder = viewPaymentOrder, completeUrl = \"https://example.com/complete\", cancelUrl = \"https://example.com/cancel\", paymentUrl = \"https://example.com/payment/android\", termsOfServiceUrl = \"https://example.com/tos\" ) } } ``` ## iOS Configuration On iOS you must conform to the `SwedbankPaySDKConfiguration` protocol. Just like on Android, you must provide implementations for the `postConsumers` and `postPaymentorders` methods. The `consumer`, `paymentOrder`, and `userData` arguments to those methods will be the values you initialize your `SwedbankPaySDKController` with, and their meaning is up to you. The `postPaymentorders` method will optionally receive a `consumerProfileRef` argument, if the consumer was identified before creating the payment order. The methods are asynchronous, and the result is reported by calling the `completion` callback with the result. Successful results have payloads of `SwedbankPaySDK.ViewConsumerIdentificationInfo` and `SwedbankPaySDK.ViewPaymentOrderInfo`, respectively; please refer to the type documentation on how to populate those types. The error of any failure result you report will be propagated back to your app in the `paymentFailed(error:)` delegate method. You must call the `completion` callback exactly once, multiple calls are a programing error. ```swift struct MyConfiguration : SwedbankPaySDKConfiguration { func postConsumers( consumer: SwedbankPaySDK.Consumer?, userData: Any?, completion: @escaping (Result) -> Void ) { post(\"https://example.com/identify\") { result in do { let viewConsumerIdentification = try result.get() let info = ViewConsumerIdentificationInfo( webViewBaseURL: \"https://example.com/\", viewConsumerIdentification: viewConsumerIdentification ) completion(.success(info)) } catch let error { completion(.failure(error)) } } } func postPaymentorders( paymentOrder: SwedbankPaySDK.PaymentOrder?, userData: Any?, consumerProfileRef: String?, completion: @escaping (Result) -> Void ) { post(\"https://example.com/pay/ios\") { result in do { let viewPaymentorder = try result.get() let info = ViewPaymentOrderInfo( webViewBaseURL: \"https://example.com/\", viewPaymentorder: viewPaymentorder, completeUrl: \"https://example.com/complete\", cancelUrl: \"https://example.com/cancel\", paymentUrl: \"https://example.com/payment/ios\", termsOfServiceUrl: \"https://example.com/tos\" ) completion(.success(info)) } catch { completion(.failure(error)) } } } } ``` ## Backend The code examples allude to a run-of-the-mill https API, but you can of course handle the communication in any way you see fit. The important part is that your backend must then communicate with the Swedbank Pay API using your secret token, and perform the requested operation. ### POST consumers The \"POST consumers\" operation is simple, you must make a request to `POST /psp/consumers` with a payload of your choosing, and you must get the `view-consumer-identification` link back to the SDK. {:.code-view-header} **SDK Request** ```http POST /identify HTTP/1.1 Host: example.com ``` {:.code-view-header} **Swedbank Pay Request** ```http POST /psp/consumers HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } ``` {:.code-view-header} **Swedbank Pay Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"operations\": [ { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"{{ page.front_end_url }}/consumers/core/scripts/client/px.consumer.client.js?token={{ page.payment_token }}\", \"contentType\": \"application/javascript\" } ] } ``` {:.code-view-header} **SDK Response** ```http HTTP/1.1 200 OK Content-Type: text/plain {{ page.front_end_url }}/consumers/core/scripts/client/px.consumer.client.js?token={{ page.payment_token }} ``` This is, of course, an over-simplified protocol for documentation purposes. ### POST paymentorders The \"POST paymentorders\" is a bit more complicated, as it needs to tie in with `paymentUrl` handling. Also, the full set of payment order urls must be made available to the app. In this simple example we use static urls for all of those, but in a real application you will want to create at least some of them dynamically, and will therefore need to incorporate them to your protocol. {:.code-view-header} **SDK Request** ```http POST /pay/android HTTP/1.1 Host: example.com ``` {:.code-view-header} **Swedbank Pay Request** ```http POST /psp/paymentorders HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"paymentorder\": { \"urls\": { \"hostUrls\": [\"https://example.com/\"], \"completeUrl\": \"https://example.com/complete\", \"cancelUrl\": \"https://example.com/cancel\", \"paymentUrl\": \"https://example.com/payment/android\" } } } ``` {:.code-view-header} **Swedbank Pay Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"operations\": [ { \"href\": \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` {:.code-view-header} **SDK Response** ```http HTTP/1.1 200 OK Content-Type: text/plain {{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE ``` ### Payment URL As discussed in previous chapters, in some situations the `paymentUrl` of a payment will be opened in the browser. When this happens, we need a way of returning the flow to the mobile application. We need to take a slightly different approach depending on the client platform. #### Android The SDK has an Intent Filter for the `com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER` action. When it receives this action, if the Intent uri is equal to the `paymentUrl` of an ongoing payment (as reported by `ViewPaymentOrderInfo`), it will reload the payment menu of that payment. Therefore, if the `paymentUrl` is opened in the browser, that page must start an activity with such an Intent. This can be done by navigating to an [intent scheme url][android-intent-scheme]. Note that the rules for following intent-scheme navigations can sometimes cause redirects to those url not to work. To work around this, the `paymentUrl` must serve a proper html page, which attempts to immediately redirect to the intent-scheme url, but also has a link the user can tap on. Refer to the intent scheme url documentation on how to form one. You should always include the package name so that your intent is not mistakenly routed to the wrong app. {:.code-view-header} **Request** ```http GET /payment/android HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/html Swedbank Pay Payment Back to app ``` #### iOS Switching apps on iOS is always done by opening a URL. urls. It is preferred to use a Universal Link URL. Your app and backend must be configured such that the `paymentUrl` used on iOS payments is registered as a universal link to your app. Then, on iOS 13.4 or later, in most cases when the `paymentUrl` is navigated to, it will be immediately given to your app to handle. However, Universal Links are not entirely reliable, in particular if you wish to support iOS earlier than 13.4, and we must still not get stuck if the `paymentUrl` is opened in the browser instead. Now, the most straightforward way of escaping this situation is to define a custom url scheme for your app, and do something similar to the Android solution, involving that scheme. If you plan to support only iOS 13.4 and up, where the situation is rather unlikely to occur, this can be sufficient. Doing this on earlier versions is likely to end up suboptimal, though, as doing this will cause an unsightly confirmation dialog to be shown before the app is actually launched. As the situation where `paymentUrl` is opened in the browser is actually quite likely to occur on iOS earlier than 13.4, this means you are more or less subjecting all users on those systems to sub-par user experience. To provide a workaround to the confirmation popup, we devise a system that allows the user to retrigger the navigation to `paymentUrl` in such a way as to maximize the likelyhood that the system will let the app handle it. As one of the criteria is that the navigation must be to a domain different to the current one, the `paymentUrl` itsef will always redirect to a page on a different domain. That page is then able to link back to the `paymentUrl` and have that navigation be routed to the app. You could host this \"trampoline\" page yourself, but Swedbank Pay has a generic one available for use. The trampoline page takes three arguments, `target`, which should be set to your `paymentUrl`, `language`, which supports all the Checkout languages, and `app`, you app name that will be shown on the page. On iOS any URL the app is opened with is delivered to the `UIApplicationDelegate` by either the `application(_:continue:restorationHandler:)` method (for universal links) or `application(_:open:options:)`. To let the SDK respond appropriately, you need to call `SwedbankPaySDK.continue(userActivity:)` or `SwedbankPaySDK.open(url:)` from those methods, respectively. {:.code-view-header} **Request** ```http GET /payment/ios HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 301 Moved Permanently Location: https://ecom.stage.payex.com/externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fpayment%2Fios%3Ffallback%3Dtrue&language=en-US&app=Example%20App ``` The trampoline url will, in turn, serve an html page: {:.code-view-header} **Request** ```http GET /externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fpayment%2Fios%3Ffallback%3Dtrue&language=en-US&app=Example%20App HTTP/1.1 Host: ecom.stage.payex.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/html Swedbank Pay Redirect Back to Example App ``` The page links back to `https://example.com/payment/ios?fallback=true`. Notice the additional parameter. This is, indeed, part of the `target` parameter, and under the control of your backend. The purpose of this is to allow for one final escape hatch, in case the universal link mechanism fails to work. If this url is yet again opened in the browser, the backend responds with a redirect to to a custom-scheme url. (This _should_ only happen if your universal links configuration is broken, or if iOS has somehow failed to load the [Apple App-Site Association file][ios-aasa].) {:.code-view-header} **Request** ```http GET /payment/ios?fallback=true HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 301 Moved Permanently Location: com.example.app://example.com/payment/ios?fallback=true ``` From the app perspective, in our example, the url the app is opened with will be one these three: `https://example.com/payment/ios`, `https://example.com/payment/ios?fallback=true`, or `com.example.app://example.com/payment/ios?fallback=true`. When any of these is passed to the SDK from your `UIApplicationDelegate`, the SDK will then call into your Configuration to check if it matches the `paymentUrl` (`https://example.com/payment/ios` in this example). This can be customized, but by default it will allow the scheme to change and for additional query parameters to be added to the url, so this example would work with the default configuration. #### Apple App-Site Association As the iOS `paymentUrl` needs to be a universal link, the backend will also need an [Apple App-Site Association file][ios-aasa]. This must be served at `/.well-known/apple-app-site-association`, and it must associate any url used as a `paymentUrl` with the app. {:.code-view-header} **Request** ```http GET /.well-known/apple-app-site-association HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"applinks\": { \"apps\": [], \"details\": [ { \"appID\": \"ABCDE12345.com.example.app\", \"paths\": [ \"/payment/ios\" ], \"appIDs\": [ \"ABCDE12345.com.example.app\" ], \"components\": [ { \"/\": \"/payment/ios\" } ] } ] } } ``` Note that the AASA file must be served over `https`, otherwise iOS will not load it. This example AASA file contains both old-style and new-style values for maximum compatibility. You may not need the old-style values in your implementation, depending on your situation. ## Updating a Payment Order The SDK includes a facility for updating a payment order after is has been created. The Merchant Backend Configuration uses this to allow setting the instrument of an instrument mode payment, but your custom Configuration can use it for whatever purpose you need. ### Android First, implement `updatePaymentOrder` in your `Configuration` subclass. This method returns the same data type as `postPaymentorders`, and when it does, the `PaymentFragment` reloads the payment menu according to the new data. The `paymentOrder` and `userData` arguments are what you set for the `PaymentFragment`, the `viewPaymentOrderInfo` argument is the current `ViewPaymentOrderInfo` (as returned from a previous call to this method, or, if this is the first update, the original `postPaymentorders` call). The `updateInfo` argument will be the value you call `PaymentViewModel.updatePaymentOrder` with, its meaning is therefore defined by you. ```kotlin class MyConfiguration : Configuration() { override suspend fun updatePaymentOrder( context: Context, paymentOrder: PaymentOrder?, userData: Any?, viewPaymentOrderInfo: ViewPaymentOrderInfo, updateInfo: Any? ): ViewPaymentOrderInfo { val viewPaymentOrder = post(\"https://example.com/payment/android/frobnicate\") return ViewPaymentOrderInfo( webViewBaseUrl = \"https://example.com/\", viewPaymentOrder = viewPaymentOrder, completeUrl = \"https://example.com/complete\", cancelUrl = \"https://example.com/cancel\", paymentUrl = \"https://example.com/payment/android\", termsOfServiceUrl = \"https://example.com/tos\" ) } } ``` To trigger an update, call `updatePaymentOrder` on the `PaymentViewModel` of the active payment. The argument of that call will be passed to your `Configuration.updatePaymentOrder` as the `updateInfo` argument. ```kotlin activity.paymentViewModel.updatePaymentOrder(\"frob\") ``` ### iOS Implement `updatePaymentOrder` in your configuration. Rather like the Android method, this method takes a callback of the same type as `postPaymentorders`, and when that callback is invoked with a `Success` result, the `SwedbankPaySDKController` reloads the payment menu according to the new data. Unlike `postPaymentorders`, this method must also return a request handle, which can be used to cancel the request if needed. If the request is cancelled, the `completion` callback should _not_ be called. ```swift struct MyConfiguration : SwedbankPaySDKConfiguration { func updatePaymentOrder( paymentOrder: SwedbankPaySDK.PaymentOrder?, userData: Any?, viewPaymentOrderInfo: SwedbankPaySDK.ViewPaymentOrderInfo, updateInfo: Any, completion: @escaping (Result) -> Void ) -> SwedbankPaySDKRequest? { val request = post(\"https://example.com/payment/ios/frobnicate\") { result in do { let viewPaymentorder = try result.get() let info = ViewPaymentOrderInfo( webViewBaseURL: \"https://example.com/\", viewPaymentorder: viewPaymentorder, completeUrl: \"https://example.com/complete\", cancelUrl: \"https://example.com/cancel\", paymentUrl: \"https://example.com/payment/ios\", termsOfServiceUrl: \"https://example.com/tos\" ) completion(.success(info)) } catch NetworkError.cancelled { // no callback } catch { completion(.failure(error)) } } return request } } ``` To trigger an update, call `updatePaymentOrder` on the `SwedbankPaySDKController`. The argument will be passed to your configuration in the `updateInfo` argument. ```swift swedbankPayController.updatePaymentOrder( updateInfo: \"frob\" ) ``` ### Backend The backend implementation makes any needed calls to Swedbank Pay, and returns whatever your implementation expects. It is recommended to always use the `view-paymentorder` link from the update response, in case the update has caused a change to that url. {:.code-view-header} **Request** ```http POST /payment/android/frobnicate HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/plain {{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE ``` ## Errors Any exception you throw from your Configuration will be made available in `PaymentViewModel.exception` or `SwedbankPaySDKDelegate.paymentFailed(error:)`. You are therefore fully in control of the model you wish to use to report errors. We recommend adopting the [Problem Details for HTTP APIs][rfc-7807] convention for reporting errors from your backend. At the moment of writing, the Android SDK also contains a [utility][dokka-problem] for parsing RFC 7807 messages to help with this. ## Other Features ### iOS Payment Menu Redirect Handling In many cases the payment menu will need to navigate to a different web page as part of the payment process. Unfortunately, testing has shown that not all such pages are happy about being opened in a `WKWebView`. To mitigate this, the SDK contains a list of pages we know to work, and any others will be opened in Safari (or whatever browser the user has set as default in recent iOS). If you wish, you can customize this behaviour by overriding `decidePolicyForPaymentMenuRedirect` in your configuration. Note that you can also modify this behaviour by the `webRedirectBehavior` property of `SwedbankPaySDKController`. ```swift struct MyConfiguration : SwedbankPaySDKConfiguration { func decidePolicyForPaymentMenuRedirect( navigationAction: WKNavigationAction, completion: @escaping (SwedbankPaySDK.PaymentMenuRedirectPolicy) -> Void ) { // we like to live dangerously, allow everything completion(.openInWebView) } } ``` ### iOS Payment URL Matching The iOS `paymentUrl` universal-link/custom-scheme contraption makes it so that your app must be able to accept some variations in the urls. The default behaviour is to allow for a different scheme and additional query parameters. If these are not good for your app, you can override the `url(_:matchesPaymentUrl:)` method in your configuration. If you wish to simply specify the allowed custom scheme, you can conform to `SwedbankPaySDKConfigurationWithCallbackScheme` instead. ```swift struct MyConfiguration : SwedbankPaySDKConfiguration { func url(_ url: URL, matchesPaymentUrl paymentUrl: URL) -> Bool { // We trust univeral links enough // so we do not need the custom-scheme fallback return url == paymentUrl } } ``` ```swift struct MyConfiguration : SwedbankPaySDKConfigurationWithCallbackScheme { let callbackScheme = \"com.example.app\" } ``` {% include iterator.html prev_href=\"ios\" prev_title=\"Back: iOS\" next_href=\"other-features\" next_title=\"Next: Other Features\" %} [initiate-consumer-session]: /checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [create-payment-order]: /checkout/v2/payment-menu#step-3-create-payment-order [payment-url]: /checkout/v2/features/technical-reference/payment-url [ios-aasa]: https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app#3001215 [android-intent-scheme]: https://developer.chrome.com/multidevice/android/intents [rfc-7807]: https://tools.ietf.org/html/rfc7807 [dokka-problem]: https://github.com/SwedbankPay/swedbank-pay-sdk-android/blob/dev/sdk/dokka_github/sdk/com.swedbankpay.mobilesdk/-problem/index.md",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/custom-backend.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/custom-logo.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/custom-logo.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/custom-logo.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/custom-logo.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/custom-logo.html"
  },{
    "title": "Custom Logo",
    "text": "{% include custom-logo.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/custom-logo.html"
  },{
    "title": "Data Protection",
    "text": "## Paymentorder consumer data When creating a payment order and checking in a consumer the consumer may opt to create a profile. This will store certain data (listed below) to their profile. If a consumer chooses to not create a profile, we store the consumer data as the provided data is only possible to input during this stage. To have access to this when completing a payment order, such as capturing it when shipping the order the address and name must be available on a profile. To achieve this we store the information temporarily to make sure it is available. This data is deleted after **28 days**. ### Data stored temporarily or on a profile * Billing address * Country code * First name * Last name * Legal address * Social security number * Social security number country code",
    "tags": "",
    "url": "/resources/data-protection.html"
  },{
    "title": "Debugging Features",
    "text": "{% include mobile-sdk-debugging.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/optional/debugging.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/delete-token.html"
  },{
    "title": "Delete Token",
    "text": "{% include delete-token.md token_field_name=\"recurrenceToken\" %} {% include delete-payment-order-token.md token_field_name=\"unscheduledToken\" %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/delete-token.html"
  },{
    "title": "Demoshop",
    "text": "{% include jumbotron.html body= \"We are working on a brand new demoshop for you! In the meantime, knock yourself out with our existing [demoshop](https://ecom.externalintegration.payex.com/pspdemoshop)\" %}",
    "tags": "",
    "url": "/resources/demoshop.html"
  },{
    "title": "Deposit",
    "text": "{% include gift-card-deposit.md %}",
    "tags": "",
    "url": "/gift-cards/features/core/deposit.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md api_resource=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/description.html"
  },{
    "title": "Description",
    "text": "{% include description.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/description.html"
  },{
    "title": "Direct",
    "text": "{% include alert.html type=\"warning\" icon=\"warning\" header=\"Section under review\" body=\"This section of the Developer Portal is under review and may be incomplete or contain minor errors.\" %} {% include alert.html type=\"informative\" icon=\"info\" header=\"Note on 3-D Secure Authentication\" body=\"Although there is no need to redirect to a Swedbank Pay hosted payment page in the Direct Card Payment scenario, payers will need to be **redirected to a 3-D Secure page hosted by the issuing bank if the bank requires it**. Whether 3-D Secure authentication is required for every payment is up to each issuing bank and out of Swedbank Pay's control.\" %} {% include alert.html type=\"danger\" icon=\"error\" header=\"PCI-DSS Complicance\" body=\"The direct integration option requires you to collect the card data on your website, which means it must be [PCI-DSS Compliant]( https://www.pcisecuritystandards.org/).\" %} ## Payment flow Below is a quick stepwise summary of how the Direct Card Payment scenario works. * The payer places an order and you make a `Purchase` request towards Swedbank Pay with the gathered payment information. * The action taken next is the `direct-authorization` operation that is returned in the first request. You `POST` the payer's card data to the URL in the [`direct-authorization`][authorization] operation. * If the issuer requires 3-D Secure authentication, you will then receive an operation called `redirect-authentication`. You must redirect the payer to this URL to let them authenticate against the issuer's 3-D Secure page. * When the 3-D Secure flow is completed, the payer will be redirected back to the URL provided in `completeUrl` or `cancelUrl`, depending on the actions performed by the payer. * If the issuer does not require 3-D Secure authentication, the payment will already be `Completed` after performing the `direct-authorization` request. Note that `Completed` just indicates that the payment is in a final state; the financial transaction could be either OK or failed. * Finally you make a `GET` request towards Swedbank Pay with the `id` of the payment created in the first step, which will return the result of the authorization. ## Step 1: Create a Purchase A `Purchase` payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated `POST` request is provided below. An example of an expanded `POST` request is available in the [other features section][purchase]. {% include alert-risk-indicator.md %} {% include alert-gdpr-disclaimer.md %} {% include purchase.md %} {% include alert-callback-url.md %} {% include alert.html type=\"informative\" icon=\"report_problem\" body=\"**Step 2** is to create an authorization transaction. Implement only Step 2a if **3-D Secure authentication is enabled**. Note that if the issuer does **not require** 3-D Secure authentication, implement only Step 2b. You will see that the requests are the same for both steps. The difference is in the operations, where Step 2a has the `redirect-authentication` operation in its response. This is needed for the payer to be redirected to complete the 3-D Secure authentication.\" %} ## Step 2a: Create authorization without 3-D Secure authentication The `direct-authorization` operation creates an authorization transaction directly. {:.code-view-header} **Request** ```http POST /psp/creditcard/confined/payments/{{ page.payment_id }}/authorizations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"cardNumber\": \"4925000000000004\", \"cardExpiryMonth\": \"12\", \"cardExpiryYear\": \"22\", \"cardVerificationCode\": \"749\", \"cardholderName\": \"Olivia Nyhuus\", \"chosenCoBrand\": \"visa\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------------- | :-------- | :------------------------------------------------------------------------------ | | {% icon check %} | `transaction` | `object` | The transaction object. | | {% icon check %} | └➔&nbsp;`cardNumber` | `string` | Primary Account Number (PAN) of the card, printed on the face of the card. | | {% icon check %} | └➔&nbsp;`cardExpiryMonth` | `integer` | Expiry month of the card, printed on the face of the card. | | {% icon check %} | └➔&nbsp;`cardExpiryYear` | `integer` | Expiry year of the card, printed on the face of the card. | | | └➔&nbsp;`cardVerificationCode` | `string` | Card verification code (CVC/CVV/CVC2), usually printed on the back of the card. | | | └➔&nbsp;`cardholderName` | `string` | Name of the cardholder, usually printed on the face of the card. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"authorization\": { \"direct\": true, \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"maskedPan\": \"492500******0004\", \"expiryDate\": \"12/2022\", \"panToken\": \"eb488c77-8118-4c9f-b3b3-ff134936df64\", \"panEnrolled\": false, \"issuerAuthorizationApprovalCode\": \"L99099\", \"acquirerTransactionType\": \"SSL\", \"acquirerStan\": \"99099\", \"acquirerTerminalId\": \"86\", \"acquirerTransactionTime\": \"2020-04-07T22:35:26Z\", \"nonPaymentToken\": \"ed4683a8-6d2a-4a14-b065-746a41316b8f\", \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/authorizations/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/transactions/{{ page.transaction_id }}\", \"created\": \"2020-04-07T20:35:24.8344431Z\", \"updated\": \"2020-04-07T20:35:26.3472343Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 99100557070, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Books & Ink\", \"payeeReference\": \"cyrusLibrary1586291679\", \"isOperational\": false, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url}}/psp/creditcard/payments/{{ page.payment_id }}/authorizations/{{ page.transaction_id }}\", \"rel\": \"update-authorization-overchargedamount\" } ] } } } ``` {:.table .table-striped} | Field | Type | Description | | :-------------------------------- | :-------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The payment object. | | `authorization` | `object` | The authorization object. | | └➔&nbsp;`direct` | `string` | The type of the authorization. | | └➔&nbsp;`cardBrand` | `string` | `Visa`, `MC`, etc. The brand of the card. | | └➔&nbsp;`cardType` | `string` | `Credit Card` or `Debit Card`. Indicates the type of card used for the authorization. | | └➔&nbsp;`issuingBank` | `string` | The name of the bank that issued the card used for the authorization. | | └➔&nbsp;`paymentToken` | `string` | The payment token created for the card used in the authorization. | | └➔&nbsp;`maskedPan` | `string` | The masked PAN number of the card. | | └➔&nbsp;`expiryDate` | `string` | The month and year of when the card expires. | | └➔&nbsp;`panToken` | `string` | The token representing the specific PAN of the card. | | └➔&nbsp;`panEnrolled` | `string` | | | └➔&nbsp;`acquirerTransactionTime` | `string` | `3DSECURE` or `SSL`. Indicates the transaction type of the acquirer. | | └➔&nbsp;`nonPaymentToken` | `string` | Swedbank Pay's tokenization of the card used; identifies the card, but can not be used for payment transactions. Needs to be activated by Swedbank Pay before use. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"itemDescriptions\" %} | | └➔&nbsp;`transaction` | `object` | The object representation of the generic transaction resource. | | └─➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"transaction\" %} | | └─➔&nbsp;`created` | `string` | The ISO-8601 date and time of when the transaction was created. | | └─➔&nbsp;`updated` | `string` | The ISO-8601 date and time of when the transaction was updated. | | └─➔&nbsp;`type` | `string` | Indicates the transaction type. | | └─➔&nbsp;`state` | `string` | `Initialized`, `Completed` or `Failed`. Indicates the state of the transaction. | | └─➔&nbsp;`number` | `string` | The transaction `number`, useful when there's need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that `id` should be used instead. | | └─➔&nbsp;`amount` | `integer` | Amount is entered in the lowest momentary units of the selected currency. E.g. `10000` = 100.00 NOK, `5000` = 50.00 SEK. | | └─➔&nbsp;`vatAmount` | `integer` | If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. | | └─➔&nbsp;`description` | `string` | {% include field-description-description.md %} | | └─➔&nbsp;`payeeReference` | `string` | {% include field-description-payee-reference.md %} | | └─➔&nbsp;`failedReason` | `string` | The human readable explanation of why the payment failed. | | └─➔&nbsp;`isOperational` | `bool` | `true` if the transaction is operational; otherwise `false`. | | └─➔&nbsp;`operations` | `array` | The array of operations that are possible to perform on the transaction in its current state. | If the issuer does not require 3-D Secure authentication, the payment will be completed after the `direct-authorization` request and the `state` of the `transaction` will be set to `Completed`. If the issuer requires 3-D Secure authentication, read step 2b below for how to complete the authorization. {% include alert.html type=\"informative\" icon=\"info\" header=\"Completed means final, not successful.\" body=\"Note that `Completed` does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further.\" %} ## Step 2b: Create authorization with 3-D Secure authentication If the issuer requires 3-D Secure authentication, the response from the authorization request will contain a `redirect-authentication` operation and the `state` of the `transaction` will be `AwaitingActivity`. This means that the payer will have to be redirected to the issuer to complete the 3-D Secure authentication. See the request and response examples below. {:.code-view-header} **Request** ```http POST /psp/creditcard/confined/payments/{{ page.payment_id }}/authorizations HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"cardNumber\": \"4547781087013329\", \"cardExpiryMonth\": \"12\", \"cardExpiryYear\": \"22\", \"cardVerificationCode\": \"749\", \"cardholderName\": \"Olivia Nyhuus\", \"chosenCoBrand\": \"visa\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------------- | :-------- | :------------------------------------------------------------------------------ | | {% icon check %} | `transaction` | `object` | The transaction object. | | {% icon check %} | └➔&nbsp;`cardNumber` | `string` | Primary Account Number (PAN) of the card, printed on the face of the card. | | {% icon check %} | └➔&nbsp;`cardExpiryMonth` | `integer` | Expiry month of the card, printed on the face of the card. | | {% icon check %} | └➔&nbsp;`cardExpiryYear` | `integer` | Expiry year of the card, printed on the face of the card. | | | └➔&nbsp;`cardVerificationCode` | `string` | Card verification code (CVC/CVV/CVC2), usually printed on the back of the card. | | | └➔&nbsp;`cardholderName` | `string` | Name of the cardholder, usually printed on the face of the card. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"authorization\": { \"direct\": true, \"cardBrand\": \"Visa\", \"cardType\": \"Credit\", \"issuingBank\": \"Utl. Visa\", \"paymentToken\": \"{{ page.payment_token }}\", \"maskedPan\": \"454778******3329\", \"expiryDate\": \"12/2020\", \"panToken\": \"cca2d98d-8bb3-4bd6-9cf3-365acbbaff96\", \"panEnrolled\": true, \"acquirerTransactionTime\": \"0001-01-01T00:00:00Z\", \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/authorizations/{{ page.transaction_id }}\", \"transaction\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/transactions/{{ page.transaction_id }}\", \"created\": \"2020-03-10T13:15:01.9586254Z\", \"updated\": \"2020-03-10T13:15:02.0493818Z\", \"type\": \"Authorization\", \"state\": \"AwaitingActivity\", \"number\": 70100366758, \"amount\": 1500, \"vatAmount\": 0, \"description\": \"Test transaction\", \"payeeReference\": \"1583846100\", \"isOperational\": true, \"operations\": [ { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/psp/creditcard/confined/payments/authorizations/authenticate/{{ page.transaction_id }}\", \"rel\": \"redirect-authentication\" } ] } } } ``` {:.table .table-striped} | Field | Type | Description | | :-------------------------------- | :-------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The payment object. | | `authorization` | `object` | The authorization object. | | └➔&nbsp;`direct` | `string` | The type of the authorization. | | └➔&nbsp;`cardBrand` | `string` | `Visa`, `MC`, etc. The brand of the card. | | └➔&nbsp;`cardType` | `string` | `Credit Card` or `Debit Card`. Indicates the type of card used for the authorization. | | └➔&nbsp;`issuingBank` | `string` | The name of the bank that issued the card used for the authorization. | | └➔&nbsp;`paymentToken` | `string` | The payment token created for the card used in the authorization. | | └➔&nbsp;`maskedPan` | `string` | The masked PAN number of the card. | | └➔&nbsp;`expiryDate` | `string` | The month and year of when the card expires. | | └➔&nbsp;`panToken` | `string` | The token representing the specific PAN of the card. | | └➔&nbsp;`panEnrolled` | `string` | | | └➔&nbsp;`acquirerTransactionTime` | `string` | `3DSECURE` or `SSL`. Indicates the transaction type of the acquirer. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"itemDescriptions\" %} | | └➔&nbsp;`transaction` | `object` | The object representation of the generic transaction resource. | | └─➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"transaction\" %} | | └─➔&nbsp;`created` | `string` | The ISO-8601 date and time of when the transaction was created. | | └─➔&nbsp;`updated` | `string` | The ISO-8601 date and time of when the transaction was updated. | | └─➔&nbsp;`type` | `string` | Indicates the transaction type. | | └─➔&nbsp;`state` | `string` | `Initialized`, `Completed` or `Failed`. Indicates the state of the transaction. | | └─➔&nbsp;`number` | `string` | The transaction `number`, useful when there's need to reference the transaction in human communication. Not usable for programmatic identification of the transaction, for that `id` should be used instead. | | └─➔&nbsp;`amount` | `integer` | Amount is entered in the lowest momentary units of the selected currency. E.g. `10000` = 100.00 NOK, `5000` = 50.00 SEK. | | └─➔&nbsp;`vatAmount` | `integer` | If the amount given includes VAT, this may be displayed for the user in the payment page (redirect only). Set to 0 (zero) if this is not relevant. | | └─➔&nbsp;`description` | `string` | {% include field-description-description.md %} | | └─➔&nbsp;`payeeReference` | `string` | {% include field-description-payee-reference.md %} | | └─➔&nbsp;`failedReason` | `string` | The human readable explanation of why the payment failed. | | └─➔&nbsp;`isOperational` | `bool` | `true` if the transaction is operational; otherwise `false`. | | └─➔&nbsp;`operations` | `array` | The array of operations that are possible to perform on the transaction in its current state. | When you find the `redirect-authentication` operation in the response from the authorization request, you will have to perform an HTTP redirect of the payer to the URI of the `href` to complete the authorization by performing a 3-D Secure authentication with the issuer. When the 3-D Secure flow is completed, the payer will be redirected back to the URL provided in `completeUrl` or `cancelUrl`, depending on the actions performed by the payer. The sequence diagram below shows a high level description of a complete purchase, and the requests you have to send to Swedbank Pay. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant IssuingBank as Issuing Bank activate Payer Payer->>Merchant: Start purchase activate Merchant Merchant->>SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Merchant: First API request SwedbankPay->>Merchant: Payment resource deactivate SwedbankPay Merchant->>Payer: Credit card form deactivate Merchant Payer->>Merchant: Submit credit card form activate Merchant Merchant->>SwedbankPay: POST rel:direct-authorization activate SwedbankPay note left of Merchant: Second API request SwedbankPay->>Merchant: Authorization resource deactivate SwedbankPay alt No 3DSecure required Merchant->>Payer: Redirected to merchant's completeUrl else 3DSecure required Merchant->>Payer: Redirect to rel:redirect-authentication deactivate Merchant note left of Payer: redirect to card issuing bank Payer->>IssuingBank: Perform 3-D Secure authentication activate IssuingBank IssuingBank->>Payer: Redirected to merchant's completeUrl deactivate IssuingBank end note left of Payer: redirect back to merchant Payer->>Merchant: Access merchant's completeUrl activate Merchant Merchant->>SwedbankPay: GET activate SwedbankPay note left of Merchant: Third API request SwedbankPay-->Merchant: Payment resource deactivate SwedbankPay Merchant->>Merchant: Inspect payment status Merchant-->>Payer: Display purchase result deactivate Merchant deactivate Payer ``` ## Options after posting a purchase payment * If the payment shown above is done as a two-phase (Authorization), you will need to implement the [Capture][capture] and [Cancel][cancel] requests. * **Abort:** It is possible to [abort a payment][abort] if the payment has no successful transactions. * For `reversals`, you will need to implement the [Reversal][reversal] request. * **Callback from Swedbank Pay:** Whenever changes to the payment occur a [Callback request][callback] will be posted to the `callbackUrl`, generated when the payment was created. {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless View\" next_href=\"mobile-card-payments\" next_title=\"Mobile Card Payments\" %} [abort]: /payment-instruments/card/after-payment#abort [callback]: /payment-instruments/card/features/technical-reference/callback [cancel]: /payment-instruments/card/features/core/cancel [capture]: /payment-instruments/card/capture [reversal]: /payment-instruments/card/features/core/reversal [authorization]: /payment-instruments/card/features/technical-reference/card-authorization-transaction [purchase]: /payment-instruments/card/features/core/purchase",
    "tags": "",
    "url": "/payment-instruments/card/direct.html"
  },{
    "title": "Direct",
    "text": "{% include alert.html type=\"informative\" icon=\"report_problem\" header=\"Disclaimer\" body=\"Direct Invoice is about to be phased out. This section is only for merchants that currently have a contract with this integration.\" %} ## Invoice Direct implementation flow 1. Collect all purchase information and send it in a `POST` request to Swedbank Pay. Make sure to include personal information (SSN and postal code). 2. Make a new `POST` request towards Swedbank Pay to retrieve the name and address of the customer to create a purchase. 3. Create a `POST`request to retrieve the transaction status. 4. Send a `GET` request with the `paymentID` to get the authorization result. 5. Make a Capture by creating a `POST` request. * An invoice payment is always two-phased based - you create an Authorize transaction, that is followed by a `Capture` or `Cancel` request. The `Capture` , `Cancel`, `Reversal` opions are described in [features][features]. {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that the invoice will not be created/distributed before you have made a `capture` request. By making a Capture, Swedbank Pay will generate the invoice to the payer and the order is ready for shipping.\" %} {% include alert-callback-url.md %} The 3 most important steps in the Invoice Direct flow are shown below. ## Step 1: Create a Purchase Our `payment` example below uses the [`FinancingConsumer`][financing-consumer] value. {% include alert-gdpr-disclaimer.md %} ### Financing Consumer {:.code-view-header} **Request** ```http POST /psp/invoice/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generateReccurenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", } }, \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :-------------------------------- | :------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %}︎︎︎︎︎ | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The [`FinancingConsumer`][financing-consumer] operation is used in our example. Take a look at the Other Features section for a full examples of the following `operation` options: [FinancingConsumer][financing-consumer], [Recur][recur], [Verify][verify] | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`intent` | `string` | `Authorization` is the only intent option for invoice. Reserves the amount, and is followed by a [cancellation][cancel] or [capture][capture] of funds. | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`currency` | `string` | NOK, SEK, DKK, USD or EUR. | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`type` | `string` | Use the `Invoice` type here | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └➔&nbsp;`generateRecurrenceToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | | └─➔&nbsp;`hostUrl` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only `cancelUrl` or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %}︎︎︎︎︎ | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %}︎︎︎︎︎ | └─➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md describe_receipt=true %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SE\", \"amount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payers\" }, \"urls\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/maskedapprovedlegaladdress\" } }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\" }, \"operations\": [ { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" }, { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/cancellations\", \"rel\": \"create-cancel\", \"method\": \"POST\" }, { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :----------------------- | :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The `payment` object contains information about the specific payment. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md %} | | └➔&nbsp;`number` | `integer` | The payment number , useful when there's need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. | | └➔&nbsp;`created` | `string` | The ISO-8601 date of when the payment was created. | | └➔&nbsp;`updated` | `string` | The ISO-8601 date of when the payment was updated. | | └➔&nbsp;`state` | `string` | `Ready`, `Pending`, `Failed` or `Aborted`. Indicates the state of the payment, not the state of any transactions performed on the payment. To find the state of the payment's transactions (such as a successful authorization), see the `transactions` resource or the different specialized type-specific resources such as `authorizations` or `sales`. | | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | └─➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"prices\" %} | | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | └➔&nbsp;`urls` | `string` | The URI to the urls resource where all URIs related to the payment can be retrieved. | | └➔&nbsp;`payeeInfo` | `string` | {% include field-description-payeeinfo.md %} | | └➔&nbsp;`payers` | `string` | The URI to the `payer` resource where the information about the payer can be retrieved. | | `operations` | `array` | The array of possible operations to perform | | └─➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └─➔&nbsp;`href` | `string` | The target URI to perform the operation against. | | └─➔&nbsp;`rel` | `string` | The name of the relation the operation has to the current resource. | ## Step 2: Get `approvedLegalAddress` confirmation {:.code-view-header} **Request** ```http POST /psp/invoice/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"addressee\": { \"socialSecurityNumber\": \"194810205957\", \"zipCode\": \"55560\" } } ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/{{ page.payment_id }}\", \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\", \"addressee\": \"Leo 6\", \"streetAddress\": \"Gata 535\", \"zipCode\": \"55560\", \"city\": \"Vaxholm\", \"countryCode\": \"SE\" } } ``` ## Step 3: Complete a Payment {:.code-view-header} **Request** ```http POST /psp/invoice/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"transaction\": { \"activity\": \"FinancingConsumer\" }, \"consumer\": { \"socialSecurityNumber\": \"194810205957\", \"customerNumber\": \"123456\", \"email\": \"someExample@payex.com\", \"msisdn\": \"+46765432198\", \"ip\": \"127.0.0.1\" }, \"legalAddress\": { \"addressee\": \"Leo 6\", \"streetAddress\": \"Gata 535\", \"zipCode\": \"55560\", \"city\": \"Vaxholm\", \"countryCode\": \"SE\" } } ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": \"/psp/invoice/payments/{{ page.payment_id }}\", \"authorization\": { \"shippingAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/shippingaddress\" }, \"legalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/legaladdress\" }, \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/authorizations/23fc8ea7-57b8-44bb-8313-08d7ca2e1a26\", \"transaction\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/transactions/23fc8ea7-57b8-44bb-8313-08d7ca2e1a26\", \"created\": \"2020-03-17T09:46:10.3506297Z\", \"updated\": \"2020-03-17T09:46:12.2512221Z\", \"type\": \"Authorization\", \"state\": \"Completed\", \"number\": 71100537930, \"amount\": 4201, \"vatAmount\": 0, \"description\": \"Books & Ink\", \"payeeReference\": \"1584438350\", \"isOperational\": false, \"operations\": [] } } } ``` The sequence diagram below shows a high level description of the invoice process, including the four requests you have to send to Swedbank Pay to create an authorized transaction. ## Invoice flow ```mermaid sequenceDiagram Payer->>Merchant: Start purchase (collect SSN and postal number) activate Merchant note left of Merchant: First API request Merchant->>-Swedbank Pay: POST (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay-->>-Merchant: payment resource activate Merchant note left of Merchant: Second API request Merchant->>-Swedbank Pay: POST (SNN and postal number) activate Swedbank Pay Swedbank Pay->>Swedbank Pay: Update payment with payer's delivery address Swedbank Pay-->>-Merchant: Approved legaladdress information activate Merchant Merchant-->>-Payer: Display all details and final price activate Payer Payer->>Payer: Input email and mobile number Payer->>-Merchant: Confirm purchase activate Merchant note left of Merchant: Third API request Merchant->>-Swedbank Pay: POST (Transaction Activity=FinancingConsumer) activate Swedbank Pay Swedbank Pay-->>-Merchant: Transaction result activate Merchant note left of Merchant: Fourth API request Merchant->>-Swedbank Pay: GET activate Swedbank Pay Swedbank Pay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: Display result ``` ## Options after posting a purchase payment Head over to [Capture][capture] to complete the Invoice Direct integration. {% include iterator.html prev_href=\"seamless-view\" prev_title=\"Seamless View\" next_href=\"capture\" next_title=\"Capture\" %} [callback]: /payment-instruments/invoice/features/technical-reference/callback [cancel]: /payment-instruments/invoice/after-payment#cancellations [capture]: /payment-instruments/invoice/capture [complete-url]: /payment-instruments/invoice/features/technical-reference/complete-url [features]: /payment-instruments/invoice/features [financing-consumer]: /payment-instruments/invoice/other-features#financing-consumer [recur]: /payment-instruments/invoice/features/optional/recur [user-agent]: https://en.wikipedia.org/wiki/User_agent [verify]: /payment-instruments/invoice/features/optional/verify",
    "tags": "",
    "url": "/payment-instruments/invoice/direct.html"
  },{
    "title": "Direct",
    "text": "{% capture api_resource %}{% include api-resource.md %}{% endcapture %} ## Payment Flow * When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. * The next step is to collect the payer's Swish registered mobile number and make a `POST` request towards Swedbank Pay to create a sales transaction. * Swedbank Pay will handle the dialogue with Swish and the payer will have to confirm the purchase in the Swish app. * If `callbackURL` is set, you will receive a payment callback when the Swish dialogue is completed. * Make a `GET` request to check the payment status. {% include alert.html type=\"informative\" icon=\"report_problem\" body=\"Swish is a one-phase payment instrument that is based on sales transactions not involving `capture` or `cancellation` operations.\" %} {% include alert-callback-url.md %} ## Step 1: Create a Purchase A `Purchase` payment is created by performing the following request. {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/swish/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"paymentUrl\": \"https://example.com/perform-payment\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"ref-123456\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+46739000001\" } }, \"swish\": { \"enableEcomOnly\": false, \"paymentRestrictedToAgeLimit\": 18, \"paymentRestrictedToSocialSecurityNumber\": \"{{ page.consumer_ssn_se }}\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------------------------- | :------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The [`Purchase`][purchase] operation is used in our example. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization`. | | {% icon check %} | └➔&nbsp;`currency` | `string` | SEK. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Swish | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only cancelUrl or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback-url] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeenInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object holding information which, when available, will be prefilled on the payment page. | | | └─➔&nbsp;`msisdn` | `String` | Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length. | | | └➔&nbsp;`swish` | `object` | An object that holds different scenarios for Swish payments. | | | └─➔&nbsp;`enableEcomOnly` | `boolean` | `true` if to only enable Swish on web based transactions.; otherwise `false` to also enable Swish transactions via in-app payments | | | └─➔&nbsp;`paymentRestrictedToAgeLimit` | `integer` | Positive number that sets the required age needed to fulfill the payment. To use this feature it has to be configured in the contract. | | | └─➔&nbsp;`paymentRestrictedToSocialSecurityNumber` | `string` | When provided, the payment will be restricted to a specific social security number to make sure its the same logged in customer who is also the payer. Format: yyyyMMddxxxx. To use this feature it has to be configured in the contract. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}\", \"number\": 992308, \"created\": \"2017-10-23T08:38:57.2248733Z\", \"instrument\": \"Swish\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"Mozilla/5.0\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/payers\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/swish/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/swish/payments/{{ page.payment_id }}/sales\", \"rel\": \"create-sale\" } ] } ``` ## Step 2a: Create E-Commerce Sale Transaction This operation creates an e-commerce sales transaction in the Direct payment scenario. This is managed either by sending a `POST` request as seen below, or by directing the payer to the hosted payment pages. Note that the `msisdn` value (the payer's mobile number) is required in this request. {:.code-view-header} **Request** ```http POST /psp/swish/payments/{{ page.payment_id }}/sales HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"transaction\": { \"msisdn\": \"+46739000001\" } } ``` {:.table .table-striped} | Field | Type | Required | | :--------------- | :------- | :------------------------------------------------------------------------------------------------ | | `transaction` | `object` | The `transaction` object contains information about the specific transaction. | | └➔&nbsp;`msisdn` | `string` | The payer's mobile number. It must have a country code prefix and be 8 to 15 digits in length. | {% include transaction-response.md transaction=\"sale\" %} ## E-Commerce Purchase Flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The Callback response is a simplified example in this flow. Go to the [Callback][callback-url] section to view the complete flow. ```mermaid sequenceDiagram activate Browser Browser->>-Merchant: Start purchase activate Merchant Merchant->>-SwedbankPay: POST (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment resource activate Merchant Merchant->>- SwedbankPay: POST (operation=create-sale) activate SwedbankPay SwedbankPay-->>-Merchant: Transactions resource activate Merchant note left of Merchant: POST containing MSISDN Merchant->>-Browser: Tell payer to open Swish app Swish_API->>Swish_App: Ask for payment confirmation activate Swish_App Swish_App-->>-Swish_API: Payer confirms payment alt Callback activate SwedbankPay SwedbankPay-->>-Swish_API: Callback response activate SwedbankPay SwedbankPay->>-Merchant: Transaction Callback end activate Merchant Merchant->>- SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant->>-Browser: Payment Status ``` ## Step 2b: Create M-Commerce Sale Transaction This operation creates an m-commerce sales transaction in the Direct payment scenario. This is managed either by sending a `POST` request as seen below, or by directing the payer to the hosted payment pages. Note that the `msisdn` value (the payer's mobile number) is left out in this request. The `redirect-app-swish` operation is only present in the m-commerce flow response. {:.code-view-header} **Request** ```http POST /psp/swish/payments/{{ page.payment_id }}/sales HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"transaction\": { } } ``` {:.table .table-striped} | Field | Type | Required | | :------------ | :------- | :------------------------------------------------------------------- | | `transaction` | `object` | The `transaction` object is empty for m-commerce sale transactions. | {% include transaction-response.md transaction=\"sale\" mcom=true %} ## Step 3: Get the payment status {:.code-view-header} **Request** ```http GET /psp/{{ api_resource }}/payments/{{ page.payment_id }}/ HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/prices\" }, \"payeeInfo\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/payers\" }, \"urls\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/urls\" }, \"transactions\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/transactions\" }, \"captures\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/{{ api_resource }}/payments/{{ page.payment_id }}/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/{{ api_resource }}/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/{{ api_resource }}/payments/{{ page.payment_id }}/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :----------------------- | :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The `payment` object contains information about the specific payment. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md %} | | └➔&nbsp;`number` | `integer` | The payment number , useful when there's need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. | | └➔&nbsp;`created` | `string` | The ISO-8601 date of when the payment was created. | | └➔&nbsp;`updated` | `string` | The ISO-8601 date of when the payment was updated. | | └➔&nbsp;`state` | `string` | `Ready`, `Pending`, `Failed` or `Aborted`. Indicates the state of the payment, not the state of any transactions performed on the payment. To find the state of the payment's transactions (such as a successful authorization), see the `transactions` resource or the different specialized type-specific resources such as `authorizations` or `sales`. | | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | └➔&nbsp;`prices.id` | `string` | {% include field-description-id.md resource=\"prices\" %} | | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | └➔&nbsp;`userAgent` | `string` | The [user agent][user-agent] string of the payer's browser. | | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | └➔&nbsp;`urls` | `string` | The URI to the urls resource where all URIs related to the payment can be retrieved. | | └➔&nbsp;`payeeInfo` | `string` | The URI to the payeeinfo resource where the information about the payee of the payment can be retrieved. | | └➔&nbsp;`payers` | `string` | The URI to the `payer` resource where the information about the payer can be retrieved. | | `operations` | `array` | The array of possible operations to perform | | └─➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └─➔&nbsp;`href` | `string` | The target URI to perform the operation against. | | └─➔&nbsp;`rel` | `string` | The name of the relation the operation has to the current resource. | ## M-Commerce Purchase Flow The sequence diagram below shows the three requests you have to send to Swedbank Pay to make a purchase. The Callback response is a simplified example in this flow. Go to the [Callback][callback-url] section to view the complete flow. ```mermaid sequenceDiagram activate Browser Browser->>-Merchant: Start purchase activate Merchant Merchant->>-SwedbankPay: POST (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment resource activate Merchant Merchant->>- SwedbankPay: POST (operation=create-sale) activate SwedbankPay SwedbankPay-->>-Merchant: Transaction resource activate Merchant note left of Merchant: POST containing MSISDN Merchant-->>-Browser: Tell payer to open Swish app Swish_API->>Swish_App: Ask for payment confirmation activate Swish_App Swish_App-->>-Swish_API: Payer confirms payment activate Swish_API Swish_API->>-Swish_App: Start redirect activate Swish_App Swish_App-->>-Browser: Redirect alt Callback activate SwedbankPay SwedbankPay-->>-Swish_API: Callback response activate SwedbankPay SwedbankPay->>-Merchant: Transaction Callback end activate Merchant Merchant->>- SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant-->>-Browser: Payment Status ``` {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"redirect\" next_title=\"Redirect\" %} [complete-url]: /payment-instruments/swish/features/technical-reference/complete-url [callback-url]: /payment-instruments/swish/features/technical-reference/callback [user-agent]: https://en.wikipedia.org/wiki/User_agent [purchase]: /payment-instruments/swish/direct#m-commerce-purchase-flow",
    "tags": "",
    "url": "/payment-instruments/swish/direct.html"
  },{
    "title": "Delegated Strong Consumer Authentication",
    "text": "{% include delegated-strong-consumer-authentication.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/dsca.html"
  },{
    "title": "Delegated Strong Consumer Authentication",
    "text": "{% include delegated-strong-consumer-authentication.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/dsca.html"
  },{
    "title": "Delegated Strong Consumer Authentication",
    "text": "{% include delegated-strong-consumer-authentication.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/dsca.html"
  },{
    "title": "Delegated Strong Consumer Authentication",
    "text": "{% include delegated-strong-consumer-authentication.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/dsca.html"
  },{
    "title": "Delegated Strong Consumer Authentication",
    "text": "{% include delegated-strong-consumer-authentication.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/dsca.html"
  },{
    "title": "Financing Consumer",
    "text": "{% include financing-consumer.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/financing-consumer.html"
  },{
    "title": "Good Commit Practice",
    "text": "The following document is a fork of [OpenStack's Git Commit Good Practice][good-practice], rewritten to suit Swedbank Pay needs. It is based on experience doing code development, bug troubleshooting and code review across a number of projects using Git. Examination of other open source projects suggested they all follow a fairly common practice. It is motivated by a desire to improve the quality of the Git history in any repository. Quality is a hard term to define in computing; one person's \"Thing of Beauty\" is another's \"Evil Hack\". We can, however, come up with some general guidelines for what to do, or conversely what not to do, when publishing Git commits for merge with a project. This topic can be split into two areas of concern: 1. The structured set/split of the code changes 2. The information provided in the commit message ## Executive Summary The points and examples that will be raised in this document ought to clearly demonstrate the value in splitting up changes into a sequence of individual commits, and the importance in writing good commit messages to go along with them. If these guidelines were widely applied it would result in a significant improvement in the quality of the Git history. Both a carrot and a stick will be required to effect changes. This document intends to be the carrot by alerting people to the benefits, while for anyone doing code reviews, it can act as the stick. In other words, when reviewing a change, do not simply look at the correctness of the code. Review the commit message itself and request improvements to its content. Look out for commits which are mixing multiple logical changes and require the submitter to split them into separate commits. Ensure whitespace changes are not mixed in with functional changes. Ensure no-op code refactoring is done separately from functional changes. And so on. Software source code is \"read mostly, write occassionally\" and thus the most important criteria is to improve the long term maintainability by the large pool of developers in the community, and not to sacrifice too much for the sake of the single author who may never touch the code again. And now the long detailed guidelines and examples of good and bad practice. ## Structural split of changes The cardinal rule for creating good commits is to ensure there is only one \"logical change\" per commit. There are many reasons why this is an important rule: * The smaller the amount of code being changed, the quicker and easier it is to review and identify potential flaws. * If a change is found to be flawed later, it may be necessary to revert the broken commit. This is much easier to do if there are not other unrelated code changes entangled with the original commit. * When troubleshooting problems using Git's [bisect][bisect] capability, small well defined changes will aid in isolating exactly where the code problem was introduced. * When browsing history using Git annotate/blame, small well defined changes also aid in isolating exactly where & why a piece of code came from. ## Things to avoid when creating commits With that in mind, there are some commonly encountered examples of bad things to avoid: ### Mixing formatting changes with functional code changes The formatting (code style, whitespace, etc.) changes will obscure the important functional changes, making it harder for a reviewer to correctly determine whether the change is correct. **Solution**: Create 2 commits, one with the formatting changes and one with the functional changes. Typically the formatting change would be done first, but that need not be a hard rule. ### Mixing two unrelated functional changes Again the reviewer will find it harder to identify flaws if two unrelated changes are mixed together. If it becomes necessary to later revert a broken commit, the two unrelated changes will need to be untangled, with further risk of bug creation. ### Sending large new features in a single giant commit It may well be the case that the code for a new feature is only useful when all of it is present. This does not, however, imply that the entire feature should be provided in a single commit. To group related code changes that for the reasons explained here are split up into several separate commits, intuitively named branches should be used instead. New features often entail refactoring existing code. It is highly desirable that any refactoring is done in commits which are separate from those implementing the new feature. This helps reviewers and test suites validate that the refactoring has no unintentional functional changes. Even the newly written code can often be split up into multiple pieces that can be independently reviewed. For example, changes which add new internal APIs/classes, can be in self-contained commits. Again this leads to easier code review. It also allows other developers to cherry-pick small parts of the work, if the entire new feature is not immediately ready for merge. Addition of new public HTTP APIs or RPC interfaces should be done in commits separate from the actual internal implementation. This will encourage the author & reviewers to think about the generic API/RPC design, and not simply pick a design that is easier for their currently chosen internal implementation. If patch impacts a public HTTP, use the APIImpact flag (see [including external references](#including-external-references)). The basic rule to follow is: > If a code change can be split into a sequence of patches/commits, then it > should be split. **Less is *not* more. More is more**. ### Examples of bad practice Now for some illustrations from Nova history. NB, although commit hashes are quoted for reference, author names are removed, since no single person needs to be blamed/picked on. Almost everybody is guilty of violating these good practice rules at some time or another. In addition the people who reviewed and approved these commits are just as guilty as the person who wrote/submitted them. {:.code-view-header} **Example 1** ```http commit ae878fc8b9761d099a4145617e4a48cbeb390623 Author: [removed] Date: Fri Jun 1 01:44:02 2012 +0000 Refactor libvirt create calls * minimizes duplicated code for create * makes wait_for_destroy happen on shutdown instead of undefine * allows for destruction of an instance while leaving the domain * uses reset for hard reboot instead of create/destroy * makes resume_host_state use new methods instead of hard_reboot * makes rescue/unrescue not use hard reboot to recreate domain Change-Id: I2072f93ad6c889d534b04009671147af653048e7 ``` There are at least two independent changes made in this commit. 1. The switch to use the new `reset` API for the `hard_reboot` method. 2. The adjustment to internal driver methods to not use `hard_reboot`. What is the problem with this? * First there is no compelling reason why these changes needed to be made at the same time. A first commit could have included the changes to stop calling `hard_reboot` in various places. A second commit could have re-written the `hard_reboot` impl. * Second, as the switch to using the libvirt ##reset## method was buried in the large code refactoring, reviewers missed the fact that this was introducing a dependency on a newer libvirt API version. This commit was identified as the culprit reasonably quickly, but a trivial revert is not possible, due to the wide variety of unrelated changes included. {:.code-view-header} **Example 2** ```http commit e0540dfed1c1276106105aea8d5765356961ef3d Author: [removed] Date: Wed May 16 15:17:53 2012 +0400 blueprint lvm-disk-images Add ability to use LVM volumes for VM disks. Implements LVM disks support for libvirt driver. VM disks will be stored on LVM volumes in volume group specified by `libvirt_images_volume_group` option. Another option `libvirt_local_images_type` specify which storage type will be used. Supported values are `raw`, `lvm`, `qcow2`, `default`. If `libvirt_local_images_type` = `default`, usual logic with `use_cow_images` flag is used. Boolean option `libvirt_sparse_logical_volumes` controls which type of logical volumes will be created (sparsed with virtualsize or usual logical volumes with full space allocation). Default value for this option is `False`. Commit introduce three classes: `Raw`, `Qcow2` and `Lvm`. They contain image creation logic, that was stored in `LibvirtConnection._cache_image` and `libvirt_info` methods, that produce right `LibvirtGuestConfigDisk` configurations for libvirt. `Backend` class choose which image type to use. Change-Id: I0d01cb7d2fd67de2565b8d45d34f7846ad4112c2 ``` This is introducing one major new feature, so on the surface it seems reasonable to use a single commit, but looking at the patch, it clearly has entangled a significant amount of code refactoring with the new LVM feature code. This makes it hard to identify likely regressions in support for QCow2/Raw images. This should have been split into at least four separate commits: 1. Replace the `use_cow_images` config FLAG with the new FLAG `libvirt_local_images_type`, with back-compat code for support of legacy `use_cow_images` FLAG 2. Creation of internal \"Image\" class and subclasses for Raw & QCow2 image type impls. 2. Refactor libvirt driver to replace raw/qcow2 image management code, with calls to the new `Image` class APIs. 3. Introduce the new \"LVM\" `Image` class implementation. ### Examples of good practice {:.code-view-header} **Example 1** ```http commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT & RTC timers commit 573ada525b8a7384398a8d7d5f094f343555df56 Author: [removed] Date: Tue May 1 17:09:32 2012 +0100 Add support for configuring libvirt VM clock and timers ```http Together these two changes provide support for configuring the KVM guest timers. The introduction of the new APIs for creating libvirt XML configuration have been clearly separated from the change to the KVM guest creation policy, which uses the new APIs. {:.code-view-header} **Example 2** ```http commit 62bea64940cf629829e2945255cc34903f310115 Author: [removed] Date: Fri Jun 1 14:49:42 2012 -0400 Add a comment to rpc.queue_get_for(). Change-Id: Ifa7d648e9b33ad2416236dc6966527c257baaf88 commit cf2b87347cd801112f89552a78efabb92a63bac6 Author: [removed] Date: Wed May 30 14:57:03 2012 -0400 Add shared_storage_test methods to compute rpcapi. ...snip... Add get_instance_disk_info to the compute rpcapi. ...snip... Add remove_volume_connection to the compute rpcapi. ...snip... Add compare_cpu to the compute rpcapi. ...snip... Add get_console_topic() to the compute rpcapi. ...snip... Add refresh_provider_fw_rules() to compute rpcapi. ...many more commits... ``` This sequence of commits refactored the entire RPC API layer inside nova to allow pluggable messaging implementations. With such a major change in a core piece of functionality, splitting up the work into a large sequence of commits was key to be able to do meaningful code review, and track / identify possible regressions at each step of the process. ## Information in commit messages As important as the content of the change, is the content of the commit message describing it. When writing a commit message there are some important things to remember: ### Do not assume the reviewer understands what the original problem was When reading bug reports, after a number of back & forth comments, it is often as clear as mud, what the root cause problem is. The commit message should have a clear statement as to what the original problem is. The bug is merely interesting historical background on *how* the problem was identified. It should be possible to review a proposed patch for correctness without needing to read the bug ticket. ### Do not assume the reviewer has access to external web services/site In 6 months time when someone is on a train/plane/coach/beach/pub troubleshooting a problem & browsing Git history, there is no guarantee they will have access to the online bug tracker, or online blueprint documents. The great step forward with distributed SCM is that you no longer need to be \"online\" to have access to all information about the code repository. The commit message should be totally self-contained, to maintain that benefit. ### Do not assume the code is self-evident/self-documenting What is self-evident to one person, might be clear as mud to another person. Always document what the original problem was and how it is being fixed, for any change except the most obvious typos, or whitespace only commits. ### Describe *why* a change is being made A common mistake is to just document how the code has been written, without describing *why* the developer chose to do it that way. By all means describe the overall code structure, particularly for large changes, but more importantly describe the intent/motivation behind the changes. ### Read the commit message to see if it hints at improved code structure Often when describing a large commit message, it becomes obvious that a commit should have in fact been split into 2 or more parts. Don't be afraid to go back and rebase the change to split it up into separate commits. ### Ensure sufficient information to decide whether to review When Gerrit sends out email alerts for new patch submissions there is minimal information included, principally the commit message and the list of files changes. Given the high volume of patches, it is not reasonable to expect all reviewers to examine the patches in detail. The commit message must thus contain sufficient information to alert the potential reviewers to the fact that this is a patch they need to look at. ### The first commit line is the most important In Git commits the first line of the commit message has special significance. It is used as email subject line, git annotate messages, gitk viewer annotations, merge commit messages and many more places where space is at a premium. As well as summarizing the change itself, it should take care to detail what part of the code is affected. eg if it affects the libvirt driver, mention 'libvirt' somewhere in the first line. ### Describe any limitations of the current code If the code being changed still has future scope for improvements, or any known limitations then mention these in the commit message. This demonstrates to the reviewer that the broader picture has been considered and what tradeoffs have been done in terms of short term goals vs. long term wishes. ### Do not include patch set-specific comments In other words, if you rebase your change please don't add \"Patch set 2: rebased\" to your commit message. That isn't going to be relevant once your change has merged. Please *do* make a note of that in Gerrit as a comment on your change, however. It helps reviewers know what changed between patch sets. This also applies to comments such as \"Added unit tests\", \"Fixed localization problems\", or any other such patch set to patch set changes that don't affect the overall intent of your commit. The main rule to follow is: > The commit message must contain all the information required to fully > understand & review the patch for correctness. > **Less is *not* more. More is more.** ### Including external references The commit message is primarily targeted towards human interpretation, but there is always some metadata provided for machine use. For source code hosted on GitHub, a reference to an issue can be made by simply writing `#`. All machine targeted metadata is of secondary consequence to humans and thus it should preferably be grouped together at the end of the commit message. For simple references like GitHub issues, this is not required. Note: Although it is common practice across many open source projects using Git to include a `Signed-off-by` tag (generated by 'git commit -s'), this is not required. Prior to gaining the ability to submit code, it should rather be required that all contributors sign a CLA, which serves an equivalent purpose. We encourage the use of `Co-Authored-By: name ` in commit messages to indicate people who worked on a particular patch. It's a convention for recognizing multiple authors, and our projects would encourage the stats tools to observe it when collecting statistics. ### Summary of Git commit message structure * Provide a brief description of the change in the first line. * Insert a single blank line after the first line. * Provide a detailed description of the change in the following lines, breaking paragraphs where needed. * The first line should be limited to 50 characters and should not end with * a period. * Subsequent lines should be wrapped at 72 characters. * vim (the default `$EDITOR` on most distros) can wrap automatically lines for you. In most cases you just need to copy the example vimrc file (which can be found somewhere like `/usr/share/vim/vim74/vimrc_example.vim`) to `/.vimrc` if you don't have one already. * After editing a paragraph, you can re-wrap it by pressing escape, ensuring the cursor is within the paragraph and typing `gqip`. * Put external references at the very end of the commit message. {:.code-view-header} For example: ```http Switch libvirt get_cpu_info method over to use config APIs The get_cpu_info method in the libvirt driver currently uses XPath queries to extract information from the capabilities XML document. Switch this over to use the new config class LibvirtConfigCaps. Also provide a test case to validate the data being returned. DocImpact Closes-Bug: #1003373 Implements: blueprint libvirt-xml-cpu-model Change-Id: I4946a16d27f712ae2adf8441ce78e6c0bb0bb657 ``` ### Some examples of bad practice Now for some illustrations from Nova history, again with authors names removed since no one person is to blame for these. {:.code-view-header} **Example 1** ```http commit 468e64d019f51d364afb30b0eed2ad09483e0b98 Author: [removed] Date: Mon Jun 18 16:07:37 2012 -0400 Fix missing import in compute/utils.py Fixes bug 1014829 Problem: this does not mention what imports where missing and why they were needed. This info was actually in the bug tracker, and should have been copied into the commit message, so that it would provide a self-contained description. e.g.: Add missing import of 'exception' in compute/utils.py nova/compute/utils.py makes a reference to exception.NotFound, however exception has not been imported. ``` {:.code-view-header} **Example 2** ```http commit 2020fba6731634319a0d541168fbf45138825357 Author: [removed] Date: Fri Jun 15 11:12:45 2012 -0600 Present correct ec2id format for volumes and snaps Fixes bug 1013765 * Add template argument to ec2utils.id_to_ec2_id() calls Change-Id: I5e574f8e60d091ef8862ad814e2c8ab993daa366 Problem: this does not mention what the current (broken) format is, nor what the new fixed format is. Again this info was available in the bug tracker and should have been included in the commit message. Furthermore, this bug was fixing a regression caused by an earlier change, but there is no mention of what the earlier change was. e.g.: Present correct ec2id format for volumes and snaps During the volume uuid migration, done by changeset XXXXXXX, ec2 id formats for volumes and snapshots was dropped and is now using the default instance format (i-xxxxx). These need to be changed back to vol-xxx and snap-xxxx. Adds a template argument to ec2utils.id_to_ec2_id() calls Fixes bug 1013765 ``` {:.code-view-header} **Example 3** ```http commit f28731c1941e57b776b519783b0337e52e1484ab Author: [removed] Date: Wed Jun 13 10:11:04 2012 -0400 Add libvirt min version check. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b Problem: This commit message is merely documenting what was done, and not why it was done. It should have mentioned what earlier changeset introduced the new min libvirt version. It should also have mentioned what behaviour is when the check fails. e.g.: Add libvirt version check, min 0.9.7 The commit XXXXXXXX introduced use of the 'reset' API which is only available in libvirt 0.9.7 or newer. Add a check performed at startup of the compute server against the libvirt connection version. If the version check fails the compute service will shutdown. Fixes LP Bug #1012689. Change-Id: I91c0b7c41804b2b25026cbe672b9210c305dc29b ``` ### Examples of good practice {:.code-view-header} **Example 1** ```http commit 3114a97ba188895daff4a3d337b2c73855d4632d Author: [removed] Date: Mon Jun 11 17:16:10 2012 +0100 Update default policies for KVM guest PIT & RTC timers The default policies for the KVM guest PIT and RTC timers are not very good at maintaining reliable time in guest operating systems. In particular Windows 7 guests will often crash with the default KVM timer policies, and old Linux guests will have very bad time drift Set the PIT such that missed ticks are injected at the normal rate, ie they are delayed Set the RTC such that missed ticks are injected at a higher rate to \"catch up\" This corresponds to the following libvirt XML And the following KVM options -no-kvm-pit-reinjection -rtc base=utc,driftfix=slew This should provide a default configuration that works acceptably for most OS types. In the future this will likely need to be made configurable per-guest OS type. Closes-Bug: #1011848 Change-Id: Iafb0e2192b5f3c05b6395ffdfa14f86a98ce3d1f ``` Some things to note about this example commit message * It describes what the original problem is (bad KVM defaults) * It describes the functional change being made (the new PIT/RTC policies) * It describes what the result of the change is (new the XML/QEMU args) * It describes scope for future improvement (the possible per-OS type config) * It uses the Closes-Bug notation {:.code-view-header} **Example 2** ```http commit 31336b35b4604f70150d0073d77dbf63b9bf7598 Author: [removed] Date: Wed Jun 6 22:45:25 2012 -0400 Add CPU arch filter scheduler support In a mixed environment of running different CPU architecutres, one would not want to run an ARM instance on a X86_64 host and vice versa. This scheduler filter option will prevent instances running on a host that it is not intended for. The libvirt driver queries the guest capabilities of the host and stores the guest arches in the permitted_instances_types list in the cpu_info dict of the host. The Xen equivalent will be done later in another commit. The arch filter will compare the instance arch against the permitted_instances_types of a host and filter out invalid hosts. Also adds ARM as a valid arch to the filter. The ArchFilter is not turned on by default. Change-Id: I17bd103f00c25d6006a421252c9c8dcfd2d2c49b ``` Some things to note about this example commit message * It describes what the problem scenario is (mixed arch deployments) * It describes the intent of the fix (make the schedular filter on arch) * It describes the rough architecture of the fix (how libvirt returns arch) * It notes the limitations of the fix (work needed on Xen) [good-practice]: https://wiki.openstack.org/wiki/GitCommitMessages [bisect]: https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git",
    "tags": "",
    "url": "/resources/development-guidelines/good-commit-practice.html"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay is committed to creating a vibrant community around its open source initiative on GitHub and will alongside its partners expose the Swedbank Pay Payment APIs in high quality client modules and libraries. The development of these modules and libraries should be as transparent and accessible to the public as possible. The consequence and meaning of this will be explained in the following chapters of this guideline. Having the source code, tests, documentation, issues and such all in one place makes the projects governing the modules and libraries easier to grasp and understand for new users. GitHub is the world’s most popular developer and source code hosting platform and offers everything we need in an easy to use package. It is therefore a great choice for hosting the source code for the open source modules and all of their related resources. ## Principles For an open source project to become successful, it should follow a few core principles: ### Transparency Being transparent is one of the most important virtues of an open source project. Being able to inspect the source code, read the documentation, view potentially reported bugs and understand the development process in an accessible and easy to understand way is critical to be able to assert the quality of the project. Being transparent also makes it apparent that we don’t have anything to hide, underlining our confidence in the quality of what we publish, which of course should be top notch. ### Quality An important factor to ensure the quality of any given piece of code is to test it. The test should preferably be automated and be run on every code check-in. The automation can be done through a language-native test framework like NUnit, JUnit or PHPUnit and then have a continuous integration system like Travis or TeamCity execute these tests every time code is pushed to the repository on GitHub. Code quality of course depends on a lot of other factors too, such as: * Following best practice of the language and environment the code is being written in. * Adhering to established style guides. * Good understanding of [The Principles of Object Oriented Design][principles-of-object-oriented-design]. * A good domain architecture, modelled after [Domain Driven Design][domain-driven-design]. ### Accessibility The perhaps most important measure of success for an open source project is whether people outside of the project’s core development group contribute to it or not. The contributions can be everything from reported issues to correcting typographic errors in documentation to pull requests for minor or major code contributions. To be able to attract outside contributors, the project needs to be accessible. While accessibility is an abstract term, it can be broken down into smaller and more concrete parts that are easier to measure and understand. Is the development process for the project easy to understand? Where are outstanding features listed, who are the developers working on which features and where do they reside? How easy is it to fork the project and make a pull request that has a high chance of being merged? These are questions that should be asked and that can be answered confidently if the project is managed in a good and orderly fashion. The following list enumerates the most important aspects that a project should be governed by to be perceived as accessible: 1. Outstanding features and bugs should be easy to find in the list of “issues” in the project’s repository. 2. The project’s documentation should be easily accessible in or linked to from the project’s `README` file. 3. The `README` file and associated documentation should be written in simple [Markdown][markdown] markup so it is easy to correct by anyone simply by using GitHub’s online Markdown editing features. 4. How to contribute should be clearly explained in a `CONTRIBUTING` file. 5. The process of contributing should be as simple as possible. 1. The project should follow the norm and best practice of the language and environment it is written in. 2. There should be tests in the project that are easy to get up and running on a developer machine without installing any external services, tools or libraries, unless they are handled by a package manager like NuGet. 3. Contributed code should be checked by a [continuous integration][continuous-integration] server that labels the status of pull request accordingly. If a test fails, the contributor should be alerted of its failure through GitHub’s interface. 6. All code contributions should be run through a public continuous integration server so build failures are visible to the contributor such that it can be fixed without any project manager’s involvement. 7. The development and branching process should preferably be based on an existing scheme such as [GitFlow][gitflow] or [GitHub Flow][github-flow]. 8. All development should be done in public. 1. Code should be pushed to GitHub regularly, so it’s possible to see progress. 2. For incomplete features and bugfixes, [GitFlow][gitflow] with branch prefixes such as `feature/` and `hotfix/` should be used 3. All code in development should be pushed as often as possible. ### Security All source code should be written in a secure way so it avoids the problems enumerated in [OWASP Top 10][owasp-top-10] and [SANS 25][sans-25]. It should preferably exist a test for each of these problems such that it is continually verified that the code does not contain any of these problems now or in the future. No source code should contain secrets, passwords or otherwise sensitive information. If such code is committed by accident, history should be rewritten through interactive rebasing as soon as possible and force-pushed. ## Licensing All of Swedbank Pay' open source software should be licensed under a liberal and enterprise, closed source-compatible [software license][software-license]. ## Copyright The copyright for code written in Swedbank Pay's open source projects is shared between Swedbank Pay and the individual authors of the source code. This should be stated in the above mentioned LICENSE file as well as in each individual source code file and other metadata (such as .NET assembly information, etc.): `Copyright © Swedbank Pay and Project Contributors` ## How to Contribute [Contributing][contributing] details how we ensure that contributors to a project adheres to the rules and principles defined by the project. ## Code of Conduct Every project governed by Swedbank Pay or in its name should have a [Code of Conduct][code-of-conduct]. ## Release Management An essential part of any software project is having it released in one form or another so other people can use it. To be able to release software efficiently, several different strategies and methodologies need to exist and be followed. They will be described in the following chapters. ### Versioning To release software, it needs to be versioned. Swedbank Pay's open source packages should be versioned according to [semantic versioning][semantic-versioning]. This means that whenever backward compatibility is broken, the major version should be incremented. When a new feature is added, the minor version should be incremented and when bug fixes and other minor changes are introduced, the revision number should be incremented. A version of the software should correspond to a commit in the Git repository. This commit should be tagged with the version number it represents and the commit should be in the branch corresponding with what’s being released; stable code should be in the master branch, while pre-release, alpha or beta code should be in the develop branch or in a release/ prefixed branch. If a stable version `1.2.5` of a project is to be released, the commit representing that version should be tagged in Git with the value `1.2.5` and the commit should exist in the master branch. To help with automating versioning in .NET based projects, [GitVersion][git-version] can be used. For most uses, [GitVersionTask][gitversion-task] performs the job perfectly. It understands [GitFlow][gitflow] and increments the version number automatically based on which branch the code being built exists on. ### Branching strategy To make versioning easier, the Git repository should follow [GitFlow][gitflow], [GitHub Flow][github-flow] or derivates, so released and stable code is kept in the master branch, while unstable and pre-released code — if such is required — is kept in the develop branch. While they can be considered optional since all ongoing development can be done directly in the develop branch; features, hotfixes and such should preferably be done in separate branches using the GitFlow-standard branch prefixes `feature`, `hotfix/`, etc. ### Releases Software written for an environment that has a marketplace or other official storefront for applications (or “modules”, “extensions” and what have you) such as [Apple’s App Store][apple-app-store] or [Google Play][google-play], should try to publish the released software in these marketplaces. Releases should correspond to a tagged version number and a [Release][release] for the version should be created on GitHub. The GitHub Release should summarize all changes made since the last release and highlight new features, possibly by referring to blog entries or similar that describes them in more detail. To help with writing release notes, projects can use the tool [GitReleaseNotes][git-release-notes]. [apple-app-store]: https://appstore.com/ [code-of-conduct]: /resources/development-guidelines/code-of-conduct [continuous-integration]: https://en.wikipedia.org/wiki/Continuous_integration [contributing]: /resources/development-guidelines/contributing [domain-driven-design]: https://martinfowler.com/tags/domain%20driven%20design.html [git-release-notes]: https://github.com/GitTools/GitReleaseNotes [git-version]: https://github.com/GitTools/GitVersion [gitflow]: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow/ [github-flow]: https://guides.github.com/introduction/flow/ [gitversion-task]: https://www.nuget.org/packages/GitVersionTask [google-play]: https://play.google.com/store [markdown]: https://help.github.com/articles/github-flavored-markdown/ [owasp-top-10]: https://owasp.org/www-project-top-ten/ [principles-of-object-oriented-design]: https://wiki.c2.com/?PrinciplesOfObjectOrientedDesign [release]: https://help.github.com/articles/creating-releases/ [sans-25]: https://www.sans.org/top25-software-errors/ [semantic-versioning]: https://semver.org/ [software-license]: /resources/development-guidelines/license",
    "tags": "",
    "url": "/resources/development-guidelines/"
  },{
    "title": "Introduction",
    "text": "## Test Data To perform tests of the Swedbank Pay API platform, [test data][test-data] is required to perform various actions in our interfaces, such as in Checkin, performing payments, etc. ## Demoshop Our [Demoshop][demoshop] provides a good demonstration of how our services work and which functionality they provide in a realistic webshop. ## Open Source Development Guidelines All Open Source Software that is developed in Swedbank Pay's name, and under our control, including this very Developer Portal, must adhere to a set of [guidelines][guidelines]. [test-data]: test-data [demoshop]: demoshop [guidelines]: development-guidelines",
    "tags": "",
    "url": "/resources/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/"
  },{
    "title": "Introduction",
    "text": "MobilePay is the main payment app in Denmark and one of the leading apps in Finland, making it one of the essential payment instruments for merchants operating in these Nordic countries. More than 4.2 million Danes and Finns use the app and 140,000 stores are accepting payments. We offer it on our redirect and seamless view platforms. ## Purchase flow When the payment is created, the payer is redirected to a Swedbank Pay landing page where he or she can proceed with the payment by pressing the pay button. {:.text-center} ![screenshot of the Swedbank Pay landing page][swedbankpay-landing-page]{:height=\"425px\" width=\"475px\"} This takes the payer to MobilePay's own payment page where the phone number is entered, and a push message is sent to the phone. {:.text-center} ![screenshot of the MobilePay Online number input page][mobilepay-number-input]{:height=\"700px\" width=\"475px\"} A countdown is shown in the browser and the payment request will appear in the app, waiting to be confirmed by the payer. If you are using the redirect option, the payer will be redirected back to the merchant's site. ## Good To Know ### Intent **`Authorization` (two-phase)**: The intent of a MobilePay Online purchase is always `Authorization`. The amount will be reserved but not charged. You will later (i.e. if a physical product, when you are ready to ship the purchased products) have to make a [`Capture`][mobilepay-capture] or [`Cancel`][mobilepay-cancel] request. ### Payment Type MobilePay Online is one of the instruments using two-phase payments. The `authorization` is done when the payer successfully confirms in the app, and the `abort`, `cancel`, `capture` or `reversal` is done by the merchant at a later time. Read more about the [different operations][features] and the [payment resource][payment-resource]. {% include alert-two-phase-payments.md %} ### Settlement MobilePay Online transactions are handled, processed and settled as card transactions in our system. They are, however, tagged as MobilePay Online transactions and have their own acquirer agreement, so the two payment instruments are settled separately. ### 3-D Secure As MobilePay Online transactions are processed as card transactions, a 3-D Secure agreement is needed to complete the payment instrument setup. This information is provided to you by your acquirer when you set up your agreement with them. If you offer both Card Payments and MobilePay Online, you will need two separate 3-D Secure agreements, one for each payment instrument. Apart from the agreement with the acquirer, no further 3-D Secure compliance is required from you as a merchant in this regard. ### Demoshop MobilePay Online is unfortunately not available in our demoshop at the moment, but it will be in the future. The demoshop in the test environments will use a fakeservice which enables you to test a successful purchase without using the MobilePay app. {% include languages.md %} ## Payment availability Even though MobilePay Online supports several currencies, the payment instrument itself is only available for payers in Denmark and Finland. This allows a shop in Norway to receive payments in NOK from a Danish payer if the shop supports shipping to Denmark, for instance. {% include iterator.html next_href=\"redirect\" next_title=\"Redirect\" %} [mobilepay-number-input]: /assets/img/payments/mobilepay-redirect-en.png [mobilepay-cancel]: /payment-instruments/mobile-pay/after-payment#cancellations [mobilepay-capture]: /payment-instruments/mobile-pay/after-payment#capture [payment-resource]: /payment-instruments/mobile-pay/features/technical-reference/payment-resource [features]: /payment-instruments/mobile-pay/features/technical-reference/operations [swedbankpay-landing-page]: /assets/img/payments/sbp-mobilepaylandingpage-en.png",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/card/features/"
  },{
    "title": "Introduction",
    "text": "{% include alert.html type=\"informative\" icon=\"branding_watermark\" body=\"**Seamless View** is our solution for a payment experience that is integrated directly on your website. The payment process will be executed in an `iframe` on your page.\" %} {% include alert.html type=\"informative\" icon=\"cached\" body=\"**Redirect** will take the payer to a Swedbank Pay hosted payment page where they can perform a safe transaction. The payer will be redirected back to your website after the completion of the payment.\" %} {% include alert.html type=\"informative\" icon=\"open_in_browser\" body=\"**Direct** integration is a way to implement card payments without using Swedbank Pay hosted payment pages. This option allow you to collect the card data on your page. That implies that the process must be [PCI-DSS Compliant](https://www.pcisecuritystandards.org/)\" %} * When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a `POST` request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. You either receive a Redirect URL to a Swedbank Pay hosted page (Redirect integration) or a JavaScript source in response (Seamless View integration). * You need to [redirect][redirect] the payer's browser to that specified URL, or embed the script source on your site to create a Seamless View in an `iframe`; so that the payer can enter the credit card details in a secure Swedbank Pay hosted environment. * Swedbank Pay will handle 3-D Secure authentication when this is required. * Swedbank Pay will redirect the payer's browser to - or display directly in the `iframe` - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. * When you detect that the payer reach your `completeUrl` , you need to do a `GET` request, containing the `id` of the payment generated in the first step, to receive the state of the transaction. You will redirect the payer to Swedbank Pay hosted pages to collect the credit card information. {:.text-center} ![screenshot of the redirect card payment page][card-payment]{:height=\"570px\" width=\"475px\"} When shopping in SEK, the page will look like this. {:.text-center} ![screenshot of the swedish redirect card payment page][swedish-card-payment]{:height=\"605px\" width=\"475px\"} ## Operations The API requests are displayed in the [purchase flow][purchase]. You can [create a card payment][create-payment] with following `operation` options: * [Purchase][purchase] * [Recur][recur] * [Payout][payout] * [Verify][verify] * [Unscheduled Purchase][unscheduled-purchase] Our `payment` example below uses the [`Purchase`][purchase] operation. ## Intent {% include intent.md autocapture=true %} {% include languages.md %} ## Purchase Flow The sequence diagram below shows a high level description of a complete purchase, and the requests you have to send to Swedbank Pay. The links will take you directly to the corresponding API description. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. By default, 3-D Secure should be enabled. Depending on the card issuer, Swedbank Pay will check if the card is enrolled with 3-D Secure. This process has two alternative outcomes: * If the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the authentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. * If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: start purchase activate Merchant Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Merchant: First API Request SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: authorization page activate Payer note left of Payer: redirect to SwedbankPay(If Redirect scenario) Payer->>-Merchant: access merchant page activate Merchant Merchant->>-SwedbankPay: GET activate SwedbankPay note left of Merchant: Second API request SwedbankPay-->>-Merchant: rel: redirect-authorization activate Merchant Merchant-->>-Payer: display purchase result activate Payer ``` ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: start purchase activate Merchant Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Payer: First API request SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: authorization page activate Payer Payer->>-SwedbankPay: access authorization page activate SwedbankPay note left of Payer: redirect to SwedbankPay(If Redirect scenario) SwedbankPay-->>-Payer: display purchase information activate Payer Payer->>Payer: input creditcard information Payer->>-SwedbankPay: submit creditcard information activate SwedbankPay opt Card supports 3-D Secure SwedbankPay-->>-Payer: redirect to IssuingBank activate Payer Payer->>IssuingBank: 3-D Secure authentication process activate IssuingBank Payer->>-SwedbankPay: access authentication page end SwedbankPay-->>-Payer: redirect to merchant activate Payer note left of Payer: redirect back to merchant(If Redirect scenario) Payer->>-Merchant: access merchant page activate Merchant Merchant->>-SwedbankPay: GET activate SwedbankPay note left of Merchant: Second API request SwedbankPay-->>-Merchant: rel: redirect-authorization activate Merchant Merchant-->>-Payer: display purchase result opt Callback is set activate SwedbankPay SwedbankPay->>SwedbankPay: Payment is updated SwedbankPay->>-Merchant: POST Payment Callback end ``` {% include iterator.html next_href=\"redirect\" next_title=\"Redirect\" %} [card-payment]: /assets/img/payments/card-payment.png [create-payment]: /payment-instruments/card/features/technical-reference/create-payment [payout]: /payment-instruments/card/features/optional/payout [purchase]: /payment-instruments/card/features/core/purchase [recur]: /payment-instruments/card/features/optional/recur [redirect]: /payment-instruments/card/redirect [swedish-card-payment]: /assets/img/payments/swedish-card-payment.png [unscheduled-purchase]: /payment-instruments/card/features/optional/unscheduled-purchase [verify]: /payment-instruments/card/features/optional/verify",
    "tags": "",
    "url": "/payment-instruments/card/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/invoice/features/"
  },{
    "title": "Introduction",
    "text": "{% include alert.html type=\"informative\" icon=\"open_in_browser\" body=\"The **Direct** integration puts the control in your hands. You control the collection of the purchase information and personal information before sending them to us. Swedbank Pay receives invoice data, which is used to produce and distribute invoices to the payer.\" %} {% include alert.html type=\"informative\" icon=\"cached\" body=\"**Redirect** is the easiest way to implement Invoice Payments. Redirect will take your payer to a Swedbank Pay hosted payment page where they can perform a secure transaction. The payer will be redirected back to your website after the completion of the payment.\" %} {% include alert.html type=\"informative\" icon=\"branding_watermark\" body=\"**Seamless View** is our solution for a payment experience that is integrated directly on your website. The payment process will be executed in an `iframe` on your page.\" %} ### Important steps before you launch Swedbank Pay Invoice Payments at your website Prior to launching Swedbank Pay Invoice Payments at your site, make sure that you have done the following: 1. Sent a merchant logo in .JPG format to the [Swedish setup][setup-mail-sweden], [Norwegian setup][setup-mail-norway] or [Finnish setup][setup-mail-finland], depending on your country. The logo will be displayed on all your invoices. Minimum accepted size is 600x200 pixels, and at least 300 DPI. 2. Included a link to \"Terms and Conditions\" for Invoice. ## API Requests The API requests are displayed in the purchase flow below. You can create an invoice payment with the following `operation` options: * [Financing Consumer][financing-consumer] * [Recur][recur] * [Verify][verify] Our `payment` example uses the [`FinancingConsumer`][financing-consumer] operation. {:.text-center} ![screenshot of the first Invoice redirect page][fincon-invoice-redirect]{:height=\"725px\" width=\"475px\"} {% include languages.md %} ## Invoice flow This is an example of the Redirect scenario. For other integrations, take a look at the respective sections. The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The diagram also shows the steps in a [purchase][purchase] process. ```mermaid sequenceDiagram Payer->>Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant->>-Swedbank Pay: POST (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: authorization page activate Payer note left of Payer: redirect to Swedbank Pay Payer->>-Swedbank Pay: enter payer details activate Swedbank Pay Swedbank Pay-->>-Payer: redirect to merchant activate Payer note left of Payer: redirect back to Merchant Payer->>Merchant: access merchant page activate Merchant note left of Merchant: Second API request Merchant->>+Swedbank Pay: GET Swedbank Pay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: display purchase result ``` {% include iterator.html next_href=\"redirect\" next_title=\"Redirect\" %} [financing-consumer]: /payment-instruments/invoice/other-features#financing-consumer [fincon-invoice-redirect]: /assets/img/payments/fincon-invoice-redirect-first-en.png [recur]: /payment-instruments/invoice/features/optional/recur [purchase]: /payment-instruments/invoice/features/technical-reference/create-payment [setup-mail-finland]: mailto:verkkokauppa.setup@swedbankpay.fi [setup-mail-norway]: mailto:ehandelsetup@swedbankpay.no [setup-mail-sweden]: mailto:ehandelsetup@swedbankpay.se [verify]: /payment-instruments/invoice/features/optional/verify",
    "tags": "",
    "url": "/payment-instruments/invoice/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/swish/features/"
  },{
    "title": "Introduction",
    "text": "Swish is the main Swedish payment app for mobile phones supported by all Swedish banks, making it one of the essential payment instruments for merchants operating in Sweden. According to Kantar Sifo, it is the preferred online payment method in the age group 18-40, and the payment method with the best convertion rates. We offer both desktop and mobile phone payment flows in our Redirect and Seamless View integrations, in addition to Direct API and Payment Link. Three flexible ways of integrating, two conversion optimized payment flows. Using the Direct API integration will put you in charge of determining which device is being used, and whether the e- or m-commerce flow is the most suitable. We will do this for you in Redirect and Seamless view. ## Payment Flow The following is a quick presentation of the purchase flow when using the Redirect or Seamless view. You can find in-depth descriptions of the separate flows in the corresponding sections. In the desktop intended e-commerce flow, the payer enters a Swish connected mobile phone number on Swedbank Pay's payment page (Redirect) or in the `iframe` (Seamless View) after the payment is created. {:.text-center} ![screenshot of the Swish redirect payment page with number input][swish-payment]{:height=\"400px\" width=\"475px\"} After pushing the pay button, the payer needs to open the Swish app and confirm the payment. If you are using the Redirect option, the payer will be Redirected back to the merchant's site. In the mobile phone intended m-commerce flow, the payment page or `iframe` will only have a pay button, and no mobile phone number input is needed. The Swish app will be launched automatically when you push the pay button. ## Good To Know {% include intent.md sale=true show_authorization=false %} ### Payment Type Swish is one of the instruments using one-phase payments. The `sale` is done when the payer successfully confirms in the app, capturing the funds instantly. The `abort` operation is still available, but the `cancel` and `capture` operations are not. The `reversal`, if needed, is done by the merchant at a later time. Read more about the [different operations][after-payment] and the [payment resource][payment-resource]. ### Certificate We recommend that you apply for Swish as part of our Settlement Service and utilize our Technical Supplier Certificate. A Swedbank Pay sales representative can assist you with this. The Settlement Service will provide you with aggregated and reconciled reports and payments. The Technical Supplier Certificate means setup will be quicker and you will not have to assign a point of contact to monitor and renew a certificate. You could also contact one of the following banks offering Swish Handel: [Danske Bank][danske-bank], [SEB][seb-swish], [lansforsakringar][lansforsakringar], [Sparbanken Syd][sparbanken-syd], [Sparbanken Öresund][sparbanken-oresund], [Nordea][nordea], [Handelsbanken][handelsbanken], in order to get an acquiring agreement, a Swish alias and access to Swish Certificate Management system (several banks do however support Technical Supplier Certificate setups so you can ask them for that). ### Demoshop You can give Swish a go in our demoshop if you like. For Redirect payments, you need to toggle `paymentUrl` off, if you want to try Seamless View, `paymentUrl` must be toggled on. The external integration demoshop used for testing is set up with the Merchant Swish Simulator, which enables you to test without using the Swish App. {% include languages.md %} {% include iterator.html next_href=\"direct\" next_title=\"Direct\" %} [after-payment]: /payment-instruments/swish/after-payment [danske-bank]: https://danskebank.se/sv-se/foretag/medelstora-foretag/onlinetjanster/pages/swish-handel.aspx [handelsbanken]: https://www.handelsbanken.se/sv/foretag/konton-betalningar/ta-betalt/swish-for-foretag [lansforsakringar]: https://www.lansforsakringar.se/stockholm/foretag/bank/lopande-ekonomi/betalningstjanster/swish-handel/ [nordea]: https://www.nordea.se/foretag/produkter/betala/swish-handel.html [payment-resource]: /payment-instruments/swish/features/technical-reference/payment-resource [seb-swish]: https://seb.se/foretag/digitala-tjanster/swish-handel [sparbanken-oresund]: https://www.sparbankenskane.se/foretag/digitala-tjanster/swish/swish-handel.html [sparbanken-syd]: https://www.sparbankensyd.se/vardagstjanster/betala/swish-foretag/ [swish-payment]: /assets/img/payments/swish-redirect-number-input-en.png",
    "tags": "",
    "url": "/payment-instruments/swish/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/trustly/features/"
  },{
    "title": "Introduction",
    "text": "{% include alert.html type=\"informative\" icon=\"cached\" body=\"**Redirect** is the easiest way to do **Direct Bank** payments. Redirect will take the payer to a Swedbank Pay hosted payment page where they can perform a secure transaction. The payer will be redirected back to your website after the completion of the payment.\" %} {% include alert.html type=\"informative\" icon=\"branding_watermark\" body=\"**Seamless View** is our solution for a payment experience that is integrated directly on your website. The payment process will be executed in an `iframe` on your page.\" %} ### Important steps before you launch Swedbank Pay Trustly Payments at your website Prior to launching Trustly Payments at your site, make sure that the payment option is displayed with a Trustly logo, corresponding to [Trustly's guidelines][trustly-guidelines]. ## Payment Type Trustly is one of the instruments using one-phase payments. The `sale` is done when the payer successfully confirms in the app, capturing the funds instantly. The `abort` operation is still available, but the `cancel` and `capture` operations are not. The `reversal`, if needed, is done by the merchant at a later time. Read more about the [different operations][after-payment] and the [payment resource][payment-resource]. ## Languages The displayed languages that we currently support is English (`en-us`), Norwegian (`nb-no`), Swedish (`sv-se`), and Finish (`fi-fi`). ## Banks Trustly is supported by the following Finnish and Swedish banks as of August 14. 2020. ### Finland {% flag fi %} {:.table .table-striped} | Bank | Supported in eCom as of August 2020 | Instant Credit Notification | | :-----------------: | :---------------------------------: | :-------------------------: | | Nordea | {% icon check %} | {% icon check %} | | Aktia | {% icon check %} | {% icon check %} | | OP-Pohjola | {% icon check %} | {% icon check %} | | Säästöpankki | {% icon check %} | {% icon check %} | | POP Pankki | {% icon check %} | {% icon check %} | | Handelsbanken | {% icon check %} | {% icon check %} | | Ålandsbanken | {% icon check %} | {% icon check %} | | S-Pankki | {% icon check %} | {% icon check %} | | Danske Bank (Sampo) | {% icon check %} | {% icon check %} | | Oma Säästöpankki | {% icon check %} | {% icon check %} | ### Sweden {% flag se %} {:.table .table-striped} | Bank | Supported in eCom as of August 2020 | Instant Credit Notification | | :--------------- | :---------------------------------: | :-------------------------: | | Swedbank | {% icon check %} | {% icon check %} | | Nordea | {% icon check %} | {% icon check %} | | Handelsbanken | {% icon check %} | {% icon check %} | | SEB | {% icon check %} | {% icon check %} | | Danske Bank | | {% icon check %}* | | Skandiabanken | {% icon check %} | {% icon check %} | | Länsforsäkringar | {% icon check %} | {% icon check %} | | ICA Banken | | | | Forex | | | | Sparbanken Syd | {% icon check %} | {% icon check %} | | Marginalen Bank | {% icon check %} | {% icon check %} | *Danske Bank in Sweden offers instant credit notifications up to SEK 2500. {% include iterator.html next_href=\"redirect\" next_title=\"Redirect\" %} [after-payment]: /payment-instruments/trustly/after-payment [payment-resource]: /payment-instruments/swish/features/technical-reference/payment-resource [trustly-guidelines]: https://trustly.com/en/developer/documents",
    "tags": "",
    "url": "/payment-instruments/trustly/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/vipps/features/"
  },{
    "title": "Introduction",
    "text": "Vipps is the main Norwegian payment app for mobile phones supported by the major Norwegian banks, making it one of the essential payment instruments for merchants operating in Norway. We offer it on our redirect and seamless view platforms. ## Purchase flow After the payment is created, the payer pushes the payment button on Swedbank Pay's payment page (redirect) or in the `iframe` (seamless view). {:.text-center} ![screenshot of the first Vipps redirect page][vipps-redirect]{:height=\"375px\" width=\"475px\"} The payer is then redirected to Vipps' own payment page where the phone number is entered, and a push message is sent to the phone. {:.text-center} ![screenshot of the Vipps number input page][vipps-number-input]{:height=\"500px\" width=\"475px\"} The payment request will appear in the app and can be confirmed by the payer. If you are using the redirect option, the payer will be redirected back to the merchant's site. ## Good To Know ### Payment Type Vipps is one of the instruments using two-phase payments. The `authorization` is done when the payer successfully confirms in the app, and the `abort`, `cancel`, `capture` or `reversal` is done by the merchant at a later time. Read more about the [different operations][after-payment] and the [payment resource][payment-resource]. {% include alert-two-phase-payments.md %} ### Settlement Vipps transactions are handled, processed and settled as card transactions in our system. They are, however, tagged as Vipps transactions and have their own acquirer agreement, so the two payment instruments are settled separately. ### 3-D Secure As Vipps transactions are processed as card transactions, a 3-D Secure agreement is needed to complete the payment instrument setup. This information is provided to you by your acquirer when you set up your agreement with them. If you offer both Card Payments and Vipps, you will need two separate 3-D Secure agreements, one for each payment instrument. Apart from the agreement with the acquirer, no further 3-D Secure compliance is required from you as a merchant in this regard. ### Demoshop Vipps is unfortunately not available in our demoshop at the moment, but it will be shortly. The demoshop will use a fakeservice which enables you to test a successful purchase without using the Vipps app. {% include languages.md %} {% include iterator.html next_href=\"redirect\" next_title=\"Redirect\" %} [payment-resource]: /payment-instruments/vipps/features/technical-reference/payment-resource [after-payment]: /payment-instruments/vipps/features/technical-reference/operations [vipps-redirect]: /assets/img/payments/vipps-redirect-en.png [vipps-number-input]: /assets/img/payments/vipps-number-input-en.png",
    "tags": "",
    "url": "/payment-instruments/vipps/"
  },{
    "title": "Introduction",
    "text": "Is Card the only payment instrument you need? Go for Card only. Do you want Card and Invoice? Implement Card and Invoice. Want them all? Have them all. Each payment instrument is set up with a separate contract and integration. With a couple of exceptions, our payment instruments are available on three platforms. Choose between our easy-to-use PCI compliant platforms Redirect and Seamless View – or use Swedbank Pay Direct API to integrate directly. Our payment instruments and their platform availability are listed in the table below. {:.table .table-plain} | | Payment instrument | Seamless View | Redirect | Direct API | Region | | :--------------------------: | :------------------------------ | :--------------: | :--------------: | :----------------: | :---------------------------------------- | | {% icon credit_card %} | [Card Payments][card] | {% icon check %} | {% icon check %} | {% icon check %} | ![EarthIcon][earth-icon] | | {% icon insert_drive_file %} | [Swedbank Pay Invoice][invoice] | {% icon check %} | {% icon check %} | | {% flag no %} {% flag se %} {% flag fi %} | | ![Vipps][vipps-logo] | [Vipps][vipps] | {% icon check %} | {% icon check %} | | {% flag no %} | | ![Swish][swish-logo] | [Swish][swish] | {% icon check %} | {% icon check %} | {% icon check %} ︎ | {% flag se %} | | ![MobilePay][mobilepay-logo] | [Mobile Pay][mobile-pay] | | {% icon check %} | | {% flag dk %} {% flag fi %} | | ![Trustly][trustly-logo] | [Trustly][trustly] | {% icon check %} | {% icon check %} | | {% flag se %} {% flag fi %} | ## Prerequisites To start integrating Swedbank Pay Payments, you need the following: * An [HTTPS][https] enabled web server. * An agreement which includes Swedbank Pay Payments. * Credentials (Merchant Access Token) from Swedbank Pay retrieved from Swedbank Pay Admin. ## Platform options Here are our three platform options at a glance. You can read more about the integration process by visiting the sections for each payment instrument. ### Seamless View With [Seamless Views][seamless-view] you can initiate the payment process directly in an `iframe` on your site. If you prefer that the payer isn't redirected away from you, this option enables you to embed our payment page seamlessly into your shopping experience. ### Redirect The [Redirect][redirect] platform redirects the payer to a Swedbank Pay hosted payment page, and back to your page when the payment is completed. ### Direct [Direct][direct] is the option where you integrate directly using our Direct API. This is an integration with the most flexibility and opportunities. If you want to offer Card Payments and choose this option, you have to be PCI-DSS compliant. ## The Fundamentals {% include alert.html type=\"informative\" icon=\"info\" body=\"All Payments APIs in the Swedbank Pay API Platform share a common foundation with a similar payment process for all payment instruments, reducing complexity and enabling a more straightforward integration.\" %} There are two main payment types, **two-phase** and **one-phase** payments. The two seem very similar from a payer's point of view, but there are key differences you should know about. ### Two-Phase Payments A two-phase payment is performed in two steps – an `authorization` which reserves the payer's funds, and a `capture` of the funds at a later time, usually when the goods are shipped. This is the most common payment type, and it is used by Card Payments, Vipps Payments, MobilePay payments and Invoice Payments. A capture of an invoice will *not* capture any funds, but trigger the invoice distribution and send it to the payer. The payment instruments that support two-phase payments are: * [Card][card] * [Invoice][invoice] * [MobilePay Online][mobile-pay] * [Vipps][vipps] ### One-Phase Payments There are two types of one-phase payments – `sale` and `autoCapture`. `sale` is used by payment instruments such as [Swish][swish]. These payments will have a `sale` transaction instead of the `authorization` and `capture`. The funds will be captured from the payer straight away. `autoCapture` is only available for Card Payments. The mechanics work the same way as a two-phase payment, with two separate transactions – one for the `authorization` and one for the `capture`. As the name implies, the capture transaction is performed automatically when the authorization is successful. Because of this, `autoCapture` should only be used when dealing with digital products, since they are shipped instantly. As the funds are captured instantly, `cancel` is not available for either of the one-phase payments. `abort` and `reversal` can be performed the same way as with two-phase payments. The payment instruments that support one-phase payments are: * [Swish][swish] * [Card][card] * [Trustly][trustly] ## The Payment Object The payment is the container object that holds all transactions created during the payment process. When Swedbank Pay receives the payment request body (in JSON format), a payment is created and you will be given a unique payment ID in return. The response also includes (in a true RESTful way) the URIs and operations for further actions, given the state of the payment. After creating a payment, you can: * `Authorize` funds. An authorization transaction reserves the funds. It is possible to `abort` a payment before the payer has completed the payment process. And either: * `Capture` funds. Before delivering the merchandise you need to create a capture transaction to ensure that the money is charged from the payer's card or properly billed by invoice. One-phase payments will combine these two in a `sale` or `autoCapture` transaction as described in the section above. Or: * `Cancel` the authorized amount. Funds that are authorized but not yet captured, can be released back to the payer. This is done by creating a cancel transaction. This is not available for one-phase payments. * `Reverse` captured funds. In some cases you may need to make a reversal of captured funds. This is achieved by creating a reversal transaction. All actions after creating the payment can be done by using our APIs, or from our admin tool. `abort` is only available when using APIs. Please visit our [demoshop][demoshop] to see our Payment Menu and Redirect implementation in action. [demoshop]: {{ page.front_end_url }}/pspdemoshop [card-icon]: /assets/img/icon-card-simple.svg [https]: /introduction#connection-and-protocol [invoice-icon]: /assets/img/icon-invoice-simple.svg [envelope-icon]: /assets/img/envelope-icon.png [keypad-icon]: /assets/img/keypad-icon.png [vipps-logo]: /assets/img/icon-vipps-simple.svg [swish-logo]: /assets/img/icon-swish-simple.svg [mobilepay-logo]: /assets/img/icon-mobilepay-simple.svg [trustly-logo]: /assets/img/icon-trustly-simple.svg [earth-icon]: /assets/img/globe-icon.png [card]: /payment-instruments/card [invoice]: /payment-instruments/invoice [direct-debit]: /payment-instruments/direct-debit [vipps]: /payment-instruments/vipps [swish]: /payment-instruments/swish [mobile-pay]: /payment-instruments/mobile-pay [seamless-view]: /payment-instruments/card/seamless-view [redirect]: /payment-instruments/card/redirect [direct]: /payment-instruments/card/direct [trustly]: /payment-instruments/trustly",
    "tags": "",
    "url": "/payment-instruments/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/"
  },{
    "title": "Introduction",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} The mobile libraries provide standard UI components (a Fragment on Android, a UIViewController on iOS) that you can integrate in your mobile application in the usual fashion. To work, these components need data from the Swedbank Pay APIs, which you must retrieve through your own servers. At the core, the libraries are agnostic as to how the communication between your app and your servers happens, but an implementation is provided for a server that implements what we call the Merchant Backend API. The Merchant Backend API is designed to transparently reflect the Swedbank Pay API, and the data types used to configure the mobile libraries allow you to organically discover the capabilities of the system. The SDK is designed to integrate the Swedbank Pay UI inside your application's native UI. It generates any html pages required to show the Swedbank Pay UI internally; it does not support using a Checkout or Payments web page that you host yourself. If doing the latter fits your case better, you can show your web page in a Web View instead. In that case, you may benefit from the [collection of information about showing Checkout or Payments in a Web View][plain-webview]. ## Prerequisites To start integrating the Swedbank Pay Mobile SDK, you need the following: * An [HTTPS][https] enabled web server. * Agreement that includes [Swedbank Pay Checkout][checkout]. * Obtained credentials (merchant Access Token) from Swedbank Pay through Swedbank Pay Admin. Please observe that Swedbank Pay Checkout encompass both the **`consumer`** and **`paymentmenu`** scope. It is important to secure all communication between your app and your servers. If you wish to use the Merchant Backend API to communicate between your app and your server, an example implementation is provided for Node.js and for Java. ## Introduction As the Mobile SDK is built on top of [Checkout][checkout], it is a good idea to familiarize yourself with it first. The rest of this document will assume some familiarity with Checkout concepts. Note, however, that you need not build a working Checkout example with web technologies to use the Mobile SDK. The Mobile SDK provides a mobile component to show [Checkin][checkin] and [Payment Menu][payment-menu] in a mobile application. The integrating application must set a Configuration, which is responsble for making the necessary calls to your backend. A Configuration for a server implementing the Merchant Backend API is bundled with the SDK, but it is simple to implement a Configuration for your custom server. The [After-Payment][after-payment-capture] part is the same as when using Checkout on a web page, and is thus intentionally left out of the scope of the SDK. See below for a sequence diagram of a payment made using the Mobile SDK. This is a high-level diagram. More detailed views highlighting platform differences will follow for each step. {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that in this diagram, SDK refers to the Mobile SDK Android or iOS component, and Backend refers to your backend server, possibly one implementing the Merchant Backend API.\" %} ```mermaid sequenceDiagram participant App participant SDK participant Backend participant SwedbankPay as Swedbank Pay rect rgba(238, 112, 35, 0.05) App ->> SDK: Set SDK Configuration note right of App: The Configuration is responsible for allcommunication with your backend. end rect rgba(138, 205, 195, 0.1) note left of App: Payment opt Unless guest payment App ->> App: Prepare Consumer to identify end App ->> App: Prepare Payment Order to create App ->> SDK: Create payment UI component with prepared Consumer and Payment Order opt Unless guest payment SDK ->> App: Start identification session App ->> Backend: Start identification session Backend ->> SwedbankPay: Forward call to Swedbank Pay: POST /psp/consumers SwedbankPay -->> Backend: rel: view-consumer-identification Backend -->> App: rel: view-consumer-identification App -->> SDK: rel: view-consumer-identification SDK ->> SDK: Compose and show html using view-consumer-identification link SwedbankPay ->> SDK: Consumer identification process SDK ->> SwedbankPay: Consumer identification process SwedbankPay ->> SDK: consumerProfileRef end SDK ->> App: Create Payment Order App ->> Backend: Create Payment Order Backend ->> SwedbankPay: Forward call to Swedbank Pay: POST /psp/paymentorders SwedbankPay -->> Backend: rel: view-paymentorder Backend -->> App: rel: view-paymentorder App -->> SDK: paymentorder.urls, rel: view-paymentorder SDK ->> SDK: Compose and show html using view-paymentorder link SwedbankPay ->> SDK: Payment process ① SDK ->> SwedbankPay: Payment process SwedbankPay -->> SDK: Navigate to completeUrl SDK ->> App: Callback: Payment completed App ->> App: Remove payment UI component end rect rgba(81,43,43,0.1) note left of App: Capture (not in scope of SDK) Backend ->>+ SwedbankPay: rel:create-paymentorder-capture SwedbankPay -->> Backend: Capture status end ``` * ① The payment process may navigate to 3rd party web pages. This is glossed over in this diagram, but the process and its implications are discussed further in the next pages. ### The Checkin Flow Internally, the SDK uses the same [Checkin][checkin] flow as would be used on a web page. The flow described on the Checkin page reflects closely what happens inside the SDK. From the perspective of the app using the SDK, that is an implementation detail, and is therefore not reflected in the above diagram. You should, nevertheless, read up on the Checkin documentation before continuing with the SDK documentation. {% include iterator.html next_href=\"configuration\" next_title=\"Next: Configuration\" %} [plain-webview]: plain-webview [checkout]: /checkout/v2 [https]: /introduction#connection-and-protocol [checkin]: /checkout/v2/checkin [payment-menu]: /checkout/v2/payment-menu [after-payment-capture]: /checkout/v2/capture",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay offers APIs, SDKs, libraries, modules, extensions and plugins as different ways to integrate and use our products and services. It might not be obvious to everyone what these are, so to describe them we use the analogy of **baking a cake**. ### APIs APIs (Application Programming Interface) are the lowest level building block of our offering and can be compared to **raw ingredients**. They give you a whole lot of flexibility, but also requires you to have more knowledge in how to use them correctly and you need to know which recipe to cook in order to get a workable cake out in the other end. To efficiently use an API, you need to be a trained baker. ### SDKs SDKs (Software Development Kit), also known as libraries, can be compared to a **cake mix**. It requires less knowledge of the ingredients and how to use them and a recipe is provided for you. Because of this, you also have less flexibility because you can't bake any cake, you can only bake the one the mix is for. You still have to mix everything together, so you need some experience in the kitchen is required, but less than using the \"raw\" API. ### Modules Modules, also known as extensions or plugins, can be compared to a **readily baked cake** purchased at a bakery. You don't need any baking skills to have one, but you also have very little flexibility in what goes into the cake or how it tastes. ## Official Modules **Modules, extensions and plugins** are typically used as a way to extend webshop platforms such as [WooCommerce][woocommerce] and [Magento][magento] with functionality that isn't provided in the core platform. Such functionality may be to allow visitors of your website to pay with a payment provider such as Swedbank Pay. {% include alert-unsupported.md type='modules' %} {:.table .table-striped} | Platform | Module | Repository | | :--------------------------: | :--------------------------------------------------------------- | :-------------------------------------------- | | ![Episerver][episerver-icon] | [Swedbank Pay **Checkout** for Episerver][episerver-link] | [`…episerver-checkout`][episerver-repo] | | ![Magento][magento-icon] | [Swedbank Pay **Checkout** for Magento 2][magento-checkout-link] | [`…magento2-checkout`][magento-checkout-repo] | | ![Magento][magento-icon] | [Swedbank Pay **Payments** for Magento 2][magento-payments-link] | [`…magento2-payments`][magento-payments-repo] | | ![WooCommerce][woo-icon] | [Swedbank Pay **Checkout** for WooCommerce][woo-checkout-link] | [`…woocommerce-checkout`][woo-checkout-repo] | | ![WooCommerce][woo-icon] | [Swedbank Pay **Payments** for WooCommerce][woo-payments-link] | [`…woocommerce-payments`][woo-payments-repo] | ## Official SDKs **Software Development Kits** allow developers to integrate with Swedbank Pay's APIs without having to write a lot of low-level code dealing with HTTP, status codes, problem messages, parsing, serializaiton, etc. Developers can use their language of choice and write against a set of typed objects native to their programming language and environment. SDKs are often used as a building block to construct a *Module*. {% include alert-unsupported.md type='SDKs' %} {:.table .table-striped} | Platform | SDK | Repository | | :----------------------: | :------------------------------------------- | :----------------------------- | | ![Android][android-icon] | [Swedbank Pay SDK for Android][android-link] | [`…sdk-android`][android-repo] | | ![iOS][ios-icon] | [Swedbank Pay SDK for iOS][ios-link] | [`…sdk-ios`][ios-repo] | | ![.NET][dotnet-icon] | [Swedbank Pay SDK for .NET][dotnet-link] | [`…sdk-dotnet`][dotnet-repo] | | ![PHP][php-icon] | [Swedbank Pay SDK for PHP][php-link] | [`…sdk-php`][php-repo] | | ![JS][js-icon] | [Swedban k Pay SDK for JavaScript][js-link] | [`…sdk-js`][js-repo] | ## Official Libraries **Software libraries** are bundles of code often used by an *SDK* or in a *Module* to solve one or a set of specific problems. {% include alert-unsupported.md type='libraries' %} {:.table .table-striped} | Platform | Library | Repository | | :----------------------: | :---------------------------------------------------------- | :------------------------------------ | | ![Magento][magento-icon] | [Swedbank Pay Core plugin for Magento 2][magento-core-link] | [`…magento2-core`][magento-core-repo] | | ![WooCommerce][woo-icon] | [Swedbank Pay Core plugin for WooCommerce][woo-core-link] | [`…woocommerce-core`][woo-core-repo] | | ![.NET][dotnet-icon] | [Swedbank Pay SDK Extensions for .NET][dotnet-link] | [`…sdk-dotnet`][dotnet-repo] | [android-icon]: /assets/img/logos/android.svg [android-link]: https://search.maven.org/artifact/com.swedbankpay.mobilesdk/mobilesdk [android-repo]: https://github.com/SwedbankPay/swedbank-pay-sdk-android [dotnet-icon]: /assets/img/logos/dotnet.svg [dotnet-link]: https://www.nuget.org/packages/SwedbankPay.Sdk [dotnet-repo]: https://github.com/SwedbankPay/swedbank-pay-sdk-dotnet [episerver-icon]: /assets/img/logos/episerver.svg [episerver-link]: https://marketplace.episerver.com/apps/swedbank/swedbankpay/ [episerver-repo]: https://github.com/SwedbankPay/swedbank-pay-episerver-checkout [ios-icon]: /assets/img/logos/swift.svg [ios-link]: https://cocoapods.org/pods/SwedbankPaySDK [ios-repo]: https://github.com/SwedbankPay/swedbank-pay-sdk-ios [js-icon]: /assets/img/logos/js.svg [js-link]: https://www.npmjs.com/package/@swedbank-pay/sdk [js-repo]: https://github.com/SwedbankPay/swedbank-pay-sdk-js [magento-checkout-link]: https://marketplace.magento.com/swedbank-pay-magento2-checkout.html [magento-checkout-repo]: https://github.com/SwedbankPay/swedbank-pay-magento2-checkout [magento-core-link]: https://packagist.org/packages/swedbank-pay/magento2-core [magento-core-repo]: https://github.com/SwedbankPay/swedbank-pay-magento2-core [magento-icon]: /assets/img/logos/magento.svg [magento-payments-link]: https://packagist.org/packages/swedbank-pay/magento2-payments [magento-payments-repo]: https://github.com/SwedbankPay/swedbank-pay-magento2-payments [magento]: https://magento.com/ [php-icon]: /assets/img/logos/php.svg [php-link]: https://packagist.org/packages/swedbank-pay/swedbank-pay-sdk-php [php-repo]: https://github.com/SwedbankPay/swedbank-pay-sdk-php [woo-checkout-link]: https://wordpress.org/plugins/swedbank-pay-checkout/ [woo-checkout-repo]: https://github.com/SwedbankPay/swedbank-pay-woocommerce-checkout [woo-core-link]: https://packagist.org/packages/swedbank-pay/swedbank-pay-woocommerce-core [woo-core-repo]: https://github.com/SwedbankPay/swedbank-pay-woocommerce-core [woo-icon]: /assets/img/logos/woocommerce.svg [woo-payments-link]: https://wordpress.org/plugins/swedbank-pay-payments/ [woo-payments-repo]: https://github.com/SwedbankPay/swedbank-pay-woocommerce-payments [woocommerce]: https://woocommerce.com/",
    "tags": "",
    "url": "/modules-sdks/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/gift-cards/features/core/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/gift-cards/features/"
  },{
    "title": "Introduction",
    "text": "## Overview The Gift Cards API is a gateway for receiving gift card payments through our system. It's ment to simplify external integration for prepaid gift cards. ## Prerequisites * An agreement which includes Swedbank Pay Payments. * Gift Card Credentials from Swedbank Pay retrieved from the Swedbank Pay Admin * (VAS CAM). ## Implementation For implementation of the Gift Cards API, please read through the following documentation: * [Test Client][test-client] * [Operations][operations] {% include iterator.html next_href=\"operations\" next_title=\"Operations\" %} [operations]: /gift-cards/operations [test-client]: /gift-cards/test-client",
    "tags": "",
    "url": "/gift-cards/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/"
  },{
    "title": "Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %} ## Technical Reference {% include card-list.html card_list=page.card_list_2 col_class=\"col-lg-4\" %} ## Optional Features {% include card-list.html card_list=page.card_list_3 col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/"
  },{
    "title": "Introduction",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/basic/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/"
  },{
    "title": "Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %} ## Technical Reference {% include card-list.html card_list=page.card_list_2 col_class=\"col-lg-4\" %} ## Optional Features {% include card-list.html card_list=page.card_list_3 col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/"
  },{
    "title": "Introduction",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/standard/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/"
  },{
    "title": "Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %} ## Technical Reference {% include card-list.html card_list=page.card_list_2 col_class=\"col-lg-4\" %} ## Optional Features {% include card-list.html card_list=page.card_list_3 col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/"
  },{
    "title": "Introduction",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/dsca/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/"
  },{
    "title": "Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %} ## Technical Reference {% include card-list.html card_list=page.card_list_2 col_class=\"col-lg-4\" %} ## Optional Features {% include card-list.html card_list=page.card_list_3 col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/"
  },{
    "title": "Introduction",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/tailored/"
  },{
    "title": "Introduction",
    "text": "{:.heading-line} ## Checkout {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %}",
    "tags": "",
    "url": "/checkout/v3/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/checkout/v2/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/checkout/v2/features/"
  },{
    "title": "Introduction",
    "text": "Swedbank Pay Checkout allows your customers to be identified by Swedbank Pay, enabling existing Swedbank Pay Checkout users to pay with their favorite payment methods in just a few simple steps. ## Prerequisites To start integrating Swedbank Pay Checkout, you need the following: * [HTTPS][https] enabled web server. * Agreement that includes Swedbank Pay Checkout. * Obtained credentials (merchant Access Token) from Swedbank Pay through Swedbank Pay Admin. Please observe that Swedbank Pay Checkout encompass both the **`consumer`** and **`paymentmenu`** scope. ## Introduction To get started with Swedbank Pay Checkout, you should learn about its different components and how they work together. Swedbank Pay Checkout consists of two related, but disconnected concepts: **Checkin** and **Payment Menu**. Checkin identifies the consumer in our Consumer API and Payment Menu authorizes the payment with our Payment Menu API. The next step is to **Capture** the payment. You can either capture the total amount, or do a part-capture (as described under [After Payment][after-payment-capture]). Connect these steps and you have Swedbank Pay Checkout. While Checkin is a necessary component to store personal information and access features like storing cards, it is not a mandatory step for the Checkout process to work. If the payer is from a country where we currently don't support Checkin, or if he or she opts not to store their data, that's fine. The Payment Menu can still be used as a **guest**. Below, you will see a sequence diagram showing the sequence of a Swedbank Pay checkout. {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that in this diagram, the Payer refers to the merchant front-end (website) while Merchant refers to the merchant back-end.\" %} ```mermaid sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay participant 3rdParty rect rgba(238, 112, 35, 0.05) note left of Consumer: Checkin Consumer ->>+ Merchant: Start Checkin Merchant ->>+ SwedbankPay: POST /psp/consumers deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-consumer-identification ① deactivate SwedbankPay Merchant -->>- Consumer: Show Checkin on Merchant Page Consumer ->>+ Consumer: Initiate Consumer Seamless View (open iframe) ② Consumer ->>+ SwedbankPay: Show Consumer UI page in iframe ③ deactivate Consumer SwedbankPay ->>- Consumer: Consumer identification process activate Consumer Consumer ->>+ SwedbankPay: Consumer identification process deactivate Consumer SwedbankPay -->>- Consumer: show consumer completed iframe activate Consumer Consumer ->> Consumer: EVENT: onConsumerIdentified (consumerProfileRef) ④ deactivate Consumer end rect rgba(138, 205, 195, 0.1) activate Consumer note left of Consumer: Payment Menu Consumer ->>+ Merchant: Initiate Purchase deactivate Consumer Merchant ->>+ SwedbankPay: POST /psp/paymentorders (paymentUrl, consumerProfileRef) deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant -->>- Consumer: Display Payment Menu on Merchant Page activate Consumer Consumer ->> Consumer: Initiate Payment Menu Seamless View (open iframe) Consumer -->>+ SwedbankPay: Show Payment UI page in iframe deactivate Consumer SwedbankPay ->>+ Consumer: Do payment logic deactivate SwedbankPay Consumer ->> SwedbankPay: Do payment logic deactivate Consumer opt Consumer perform payment out of iFrame activate Consumer Consumer ->> Consumer: Redirect to 3rd party Consumer ->>+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Consumer 3rdParty -->>+ Consumer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Consumer ->> Consumer: Initiate Payment Menu Seamless View (open iframe) Consumer ->>+ SwedbankPay: Show Payment UI page in iframe deactivate Consumer end SwedbankPay -->> Payer: Payment status alt If payment is completed activate Consumer Consumer ->> Consumer: Event: onPaymentCompleted Consumer ->>+ Merchant: Check payment status deactivate Consumer Merchant ->>+ SwedbankPay: GET deactivate Merchant SwedbankPay ->>+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Consumer deactivate Consumer Merchant ->>+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Consumer Consumer ->> Consumer: Event: OnPaymentFailed Consumer ->>+ Merchant: Check payment status deactivate Consumer Merchant ->>+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay -->>+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Consumer deactivate Consumer Merchant ->>+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant -->>- Consumer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Consumer deactivate Consumer SwedbankPay ->> Merchant: POST Payment Callback end end rect rgba(81,43,43,0.1) activate Merchant note left of Consumer: Capture Merchant ->>+ SwedbankPay: rel:create-paymentorder-capture deactivate Merchant SwedbankPay -->>- Merchant: Capture status note right of Merchant: Capture here only if the purchasedgoods don't require shipping.If shipping is required, perform captureafter the goods have shipped.Should only be used for PaymentInstruments that support Authorizations. end ``` ### Explanations Under, you see a list of notes that explains some of the sequences in the diagram. #### Checkin * ① `rel: view-consumer-identification` is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. * ② `Initiate Consumer Seamless View (open iframe)` creates the iframe. * ③ `Show Consumer UI page in iframe` displays the checkin form as content inside of the iframe. * ④ `onConsumerIdentified (consumerProfileRef)` is an event that triggers when the consumer has been identified, and delivers a field `consumerProfileRef` as a reference to be used in the payment menu. #### Payment Menu * ⑤ `Authorize Payment` is when the payer has accepted the payment. {% include languages.md %} {% include iterator.html next_href=\"checkin\" next_title=\"Implement Checkin\" %} [after-payment-capture]: /checkout/v2/capture [https]: /introduction#connection-and-protocol",
    "tags": "",
    "url": "/checkout/v2/"
  },{
    "title": "Checkout",
    "text": "{:.heading-line} {% comment %} Choose between [Swedbank Pay Checkout v2][checkout-2] and [Swedbank Pay Checkout v3][checkout-3] below. For new integrations, **[Swedbank Pay Checkout v3][checkout-3] is recommended**. {% endcomment %} {% include card-list.html card_list=page.card_list col_class=\"col-lg-4\" %} [checkout-2]: /checkout/v2 [checkout-3]: /checkout/v3",
    "tags": "",
    "url": "/checkout/"
  },{
    "title": "Optional Features",
    "text": "{:.heading-line} ## Optional Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-menu/features/optional/"
  },{
    "title": "Core Features",
    "text": "{:.heading-line} ## Core Features {% include card-list.html %}",
    "tags": "",
    "url": "/payment-menu/features/core/"
  },{
    "title": "Technical Reference",
    "text": "{:.heading-line} ## Technical Reference {% include card-list.html %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/"
  },{
    "title": "Features",
    "text": "",
    "tags": "",
    "url": "/payment-menu/features/"
  },{
    "title": "",
    "text": "Swedbank Pay Payment Menu allows your customers to pay with their favorite payment instruments in just a few simple steps. ## Prerequisites To start integrating Swedbank Pay Payment Menu, you need the following: * [HTTPS][https] enabled web server. * Agreement that includes Swedbank Pay Payment Menu. * Obtained credentials (merchant Access Token) from Swedbank Pay through Swedbank Pay Admin. ## Introduction To get started with Swedbank Pay Payment Menu, you should learn about its different components and how they work together. **Payment Menu** authorizes the payment with our Payment Menu API. The next step is to **Capture** the payment. You can either capture the total amount, or do a part-capture (as described under [After Payment][after-payment-capture]). Connect these steps and you have Swedbank Pay Payment Menu. {% include iterator.html next_href=\"payment-order\" next_title=\"Payment Order\" %} [after-payment-capture]: /payment-menu/capture [https]: /introduction#connection-and-protocol",
    "tags": "",
    "url": "/payment-menu/"
  },{
    "title": "Developer Portal",
    "text": "{% assign card_col_class=\"col-xxl-3 col-xl-6 col-lg-6\" %} {% contentfor start %} {% include card.html title='Checkout' title_type=\"h2\" text='With our Checkout you get the pre-built all-in-one payment solution, complete with a checkin interface and payment menu.' icon_content='shopping_cart' icon_outlined=true to='/checkout/' %} {% include card.html title='Payment Menu' title_type=\"h2\" text='With Payment Menu you are in charge of the consumer journey while being able to choose between all available payment instruments in a single integration.' icon_content='menu_book' to='/payment-menu/' %} {% include card.html title='Payment Instruments' title_type=\"h2\" text='Payment Instruments gives you a one-by-one integration with more customization for each payment method to build your own payment menu.' icon_content='credit_card' to='/payments/' %} {% include card.html title='Gift Cards' title_type=\"h2\" text='Our Gift Cards API allows your customers to pay with prepaid gift cards issued by Swedbank Pay.' icon_content='card_giftcard' to='/gift-cards/' %} {% endcontentfor %} {% contentfor sdks %} Looking for SDKs? {% include card.html title='Android SDK' text='Learn more about how to integrate our Android SDK' icon_content='img/sdks/logo-android.svg' icon_svg=true type='sdk' to='/modules-sdks/mobile-sdk/android' %} {% include card.html title='iOS SDK' text='Learn more about how to integrate our iOS SDK' icon_content='img/sdks/logo-swift.svg' icon_svg=true type='sdk' to='/modules-sdks/mobile-sdk/ios' %} {% include card.html title='.NET SDK' text='Learn more about how to integrate our .NET SDK' icon_content='img/sdks/logo-net.svg' icon_svg=true type='sdk' to='/modules-sdks/#official-sdks' %} {% include card.html title='PHP SDK' text='Learn more about how to integrate our PHP SDK' icon_content='img/sdks/logo-php.svg' icon_svg=true type='sdk' to='/modules-sdks/#official-sdks' %} {% endcontentfor %} {% contentfor modules %} Or perhaps modules? {% include card.html title='Episerver' text='See how you can integrate the Episerver module' icon_content='img/modules/logo-episerver.svg' icon_svg=true type='module' to='/modules-sdks/#official-modules' %} {% include card.html title='Magento 2' text='See how you can integrate the Magento 2 module' icon_content='img/modules/logo-magento2.svg' icon_svg=true type='module' to='/modules-sdks/#official-modules' %} {% include card.html title='WooCommerce' text='See how you can integrate the WooCommerce module' icon_content='img/modules/logo-woocommerce.svg' icon_svg=true type='module' to='/modules-sdks/#official-modules' %} {% endcontentfor %} {% contentfor release_notes %} What's new in the documentation {% include release_notes.html num_dates=3 %} See full release notes {% endcontentfor %} {% contentfor extras %} Extra resources {% include card.html title='OS development guidelines' text='This is how we create an inclusive environment' icon_content='account_circle' icon_outlined=true to='/resources/development-guidelines' %} {% include card.html title='Test data' text='Get the required data for testing in our interfaces' icon_content='content_paste' to='/resources/test-data' %} {% include card.html title='Terminology' text='Get a better understanding of the terms we use' icon_content='menu_book' to='/resources/terminology' %} {% include card.html title='See all resources (7)' text='Data protection, public migration key etc' no_icon=true to='/resources' %} {% endcontentfor %}",
    "tags": "",
    "url": "/"
  },{
    "title": "Instrument Mode",
    "text": "{% include mobile-sdk-instrument-mode.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/optional/instrument-mode.html"
  },{
    "title": "Instrument Mode",
    "text": "{% include instrument-mode.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/instrument-mode.html"
  },{
    "title": "Introduction",
    "text": "## Foundation The **Swedbank Pay API Platform** is built using the [REST architectural style][rest] and the request and responses come in the [JSON] format. The API has predictable, resource-oriented URIs and use default HTTP features, like HTTP authentication (using OAuth 2), HTTP methods and headers. These techniques are widely used and understood by most HTTP client libraries. ## Connection and Protocol All requests towards Swedbank Pay API Platform are made with **HTTP/1.1** over a secure a **TLS 1.2** (or higher) connection. Older HTTP clients running on older operating systems and frameworks might receive connection errors when connecting to Swedbank Pay's APIs. This is most likely due to the connection being made from the client with TLS 1.0 or even SSL, which are all insecure and deprecated. If such is the case, ensure that you are able to connect over a TLS 1.2 connection by reading information regarding your programming languages and environments ([Java][java-tls], [PHP Curl][php-curl-tls], [PHP Zend][php-zend-tls], [Ruby][ruby-tls], [Python][python-tls], [Node.js Request][node-tls]). You can inspect [Swedbank Pay's TLS and cipher suite][ssllabs] support at SSL Labs. Support for HTTP/2 in our APIs is being investigated. ## Postel's Robustness Principle We encourage you to keep [Postel's robustness principle][robustness-principle] in mind. Build your integration in a way that is resilient to change, wherever it may come. Don't confine yourself to the limits of our current documentation examples. A `string` looking like a `guid` must still be handled and stored like a `string`, not as a guid, as it could be a `URI` in the future. The day our `transactionNumber` ticks past 1,000,000, make sure your integration can handle number 1,000,001. If some `fields`, `operations` or `headers` can't be understood, you must be able to ignore them. We have built our requests in a way which allows the `payeeInfo` field to be placed before `metadata`, or vice versa if you want. We don't expect a specific order of elements, so we ask that you shouldn't either. ## Headers All requests against the API Platform should have a few common headers: {:.code-view-header} **HTTP request** ```http POST /some/resource HTTP/1.1 Content-Type: application/json; charset=utf-8 Accept: application/problem+json; q=1.0, application/json; q=0.9 Authorization: \"Bearer 123456781234123412341234567890AB\" Session-Id: 779da454399742248f2942bb064c4707 Forwarded: for=82.115.151.177; host=example.com; proto=https ``` {:.table .table-striped} | Required | Header | Description | | :--------------: | :------------------ | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %}︎ | **`Content-Type`** | The [content type][content-type] of the body of the HTTP request. Usually set to `application/json`. | | {% icon check %}︎ | **`Accept`** | The [content type][content-type] accepted by the client. Usually set to `application/json` and `application/problem+json` so both regular responses as well as errors can be received properly. | | {% icon check %}︎ | **`Authorization`** | The OAuth 2 Access Token is generated in [Swedbank Pay Admin][admin]. | | | **`Session-Id`** | A trace identifier used to trace calls through the API Platform (ref [RFC 7329][rfc-7329]). Each request must mint a new [GUID/UUID][uuid]. If no `Session-Id` is provided, Swedbank Pay will generate one for the request. | | | **`Forwarded`** | The IP address of the payer as well as the host and protocol of the payer-facing web page. When the header is present, only the `for` parameter containing the payer's IP address is required, the other parameters are optional. See [RFC 7239][rfc-7239] for details. | ## URI Usage The base URIs of the API Platform are: {% assign api_url_prod = 'https://api.payex.com/' %} {:.table .table-striped} | Environment | Base URL | | :----------------------------------- | :---------------------| | [**Test**]({{ page.api_url }}) | `{{ page.api_url }}/` | | [**Production**]({{ api_url_prod }}) | `{{ api_url_prod }}` | An important part of REST is its use of **hypermedia**. Instead of having to perform complex state management and hard coding URIs and the availability of different operations in the client, this task is moved to the server. The client simply follows links and performs operations provided by the API, given the current state of the resource. The server controls the state and lets the client know through hypermedia what's possible in the current state of the resource. To get an [introduction to **hypermedia**, please watch this 20 minute video][the-rest-and-then-some]. {% include alert.html type=\"warning\" icon=\"warning\" header=\"Don't build URIs\" body=\" It is very important that only the base URIs of Swedbank Pay's APIs are stored in your system. All other URIs are returned dynamically in the response. Swedbank Pay cannot guarantee that your implementation will remain working if you store any other URIs in your system. When performing requests, please make sure to use the complete URIs that are returned in the response. **Do not attempt to parse or build** upon the returned data – you should not put any special significance to the information you might glean from an URI. URIs should be treated as opaque identifiers you can use to retrieve the identified resource – nothing more, nothing less. If you don't follow this advice, your integration most assuredly will break when Swedbank Pay makes updates in the future. \" %} ### Storing URIs {% include alert.html type=\"success\" icon=\"link\" header=\"Storing URIs\" body=\"In general, URIs should be **discovered** in responses to previous requets, **not stored**.\" %} However, URIs that are used to create new resources can be stored or hard coded. Also, the URI of the generated resource can be stored on your end to `GET` it at a later point. Note that the URIs should be stored as opaque identifiers and should not be parsed or interpreted in any way. {% include alert.html type=\"warning\" icon=\"warning\" header=\"Operation URIs\" body=\"URIs that are returned as part of the `operations` in each response should not be stored.\" %} See the abbreviated example below where `psp/creditcard/payments` from the `POST` header is an example of the URI that can be stored, as it is used to create a new resource. Also, the `/psp/creditcard/payments/{{ page.payment_id}}` URI can be stored in order to retrieve the created payment with an HTTP `GET` request later. The URIs found within `operations` such as the `href` of `update-payment-abort`, `{{ page.api_url }}/psp/creditcard/payments/{{ page.payment_id }}` should not be stored. In order to find which operations you can perform on a resource and the URI of the operation to perform, you need to retrieve the resource with an HTTP `GET` request first and then find the operation in question within the `operations` field. {:.code-view-header} **Request** ```http POST /psp/creditcard/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"CreditCard\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", } } ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"instrument\": \"CreditCard\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", }, \"operations\": [ { \"rel\": \"update-payment-abort\", \"href\": \"{{ page.api_url }}/psp/creditcard/payments/{{ page.payment_id }}\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"rel\": \"redirect-authorization\", \"href\": \"{{ page.front_end_url }}/creditcard/payments/authorize/{{ page.payment_token }}\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"rel\": \"view-authorization\", \"href\": \"{{ page.front_end_url }}/creditcard/core/scripts/client/px.creditcard.client.js?token={{ page.payment_token }}\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` ## Uniform Responses When a `POST` or `PATCH` request is performed, the whole target resource representation is returned in the response, as when performing a `GET` request on the resource URI. This is an economic approach that limits the number of necessary `GET` requests. ## Expansion The payment resource contain the ID of related sub-resources in its response properties. These sub-resources can be expanded inline by using the request parameter `expand`. This is an effective way to limit the number of necessary calls to the API, as you return several properties related to a Payment resource in a single request. Note that the `expand` parameter is available to all API requests but only applies to the request response. This means that you can use the expand parameter on a `POST` or `PATCH`request to get a response containing the target resource including expanded properties. This example below add the `urls` and `authorizations` field inlines to the response, enabling you to access information from these sub-resources. {:.code-view-header} **HTTP request with expansion** ```http GET /psp/creditcard/payments/{{ page.payment_id }}?$expand=urls,authorizations HTTP/1.1 Host: {{ page.api_host }} ``` To avoid unnecessary overhead, you should only expand the nodes you need info about. ## Data Types Some datatypes, like currency, dates and amounts, are managed in a coherent manner across the entire API Platform. ### Currency All currencies are expressed according to the [ISO 4217][iso-4217] standard, e.g `SEK`, `EUR`, `NOK`. ### Dates All dates are expressed according to the [ISO 8601][iso-8601] standard that combine dates, time and timezone data into a string, e.g. `2018-09-14T13:21:57.6627579Z`. ### Locale When defining locale, we use the combination of [language][iso-639-1] and [country codes][iso-3166], e.g. `nb-NO`, `sv-SE`, `en-US`. ### Monetary Amounts All monetary amounts are entered in the lowest momentary units of the selected currency. The amount of SEK and NOK are in ören/ører, and EUR is in cents. Another way to put it is that the code amount is expressed as if the true amount is multiplied by 100. {:.table .table-striped} | True amount | Code amount | | ----------: | ----------: | | NOK 100.00 | `10000` | | SEK 50.00 | `5000` | | € 10.00 | `1000` | ## Operations When a resource is created and during its lifetime, it will have a set of operations that can be performed on it. Which operations that are available in a given state varies depending on payment instrument used, what the access token is authorized to do, etc. A subset of possible operations are described below. Visit the technical reference page of a payment instrument for instrument specific operations. {:.code-view-header} **JSON with Operations** ```json { \"payment\": {}, \"operations\": [ { \"href\": \"http://{{ page.api_host }}/psp/creditcard/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"{{ page.front_end_url }}/creditcard/payments/authorize/{{ page.payment_token }}\", \"rel\": \"redirect-authorization\", \"method\": \"GET\" }, { \"href\": \"{{ page.front_end_url }}/swish/core/scripts/client/px.swish.client.js?token={{ page.payment_token }}\", \"rel\": \"view-payment\", \"method\": \"GET\", \"contentType\": \"application/javascript\" }, { \"href\": \"{{ page.api_url }}/psp/creditcard/payments/{{ page.payment_id }}/captures\", \"rel\": \"create-capture\", \"method\": \"POST\" } ] } ``` {:.table .table-striped} | Field | Description | | :------- | :------------------------------------------------------------------ | | `href` | The target URI to perform the operation against. | | `rel` | The name of the relation the operation has to the current resource. | | `method` | The HTTP method to use when performing the operation. | **The operations should be performed as described in each response and not as described here in the documentation**. Always use the `href` and `method` as specified in the response by finding the appropriate operation based on its `rel` value. {% include payee-reference.md %} [Read more about the settlement process here][settlement]. {% include callback.md %} {% include problems/problems.md %} [admin]: https://admin.externalintegration.payex.com/psp/login [content-type]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type [iso-3166]: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 [iso-4217]: https://en.wikipedia.org/wiki/ISO_4217 [iso-639-1]: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes [iso-8601]: https://en.wikipedia.org/wiki/ISO_8601 [java-tls]: https://blogs.oracle.com/java-platform-group/jdk-8-will-use-tls-12-as-default [json]: https://www.json.org/ [node-tls]: https://stackoverflow.com/a/44635449/61818 [php-curl-tls]: https://stackoverflow.com/a/32926813/61818 [php-zend-tls]: https://zend18.zendesk.com/hc/en-us/articles/219131697-HowTo-Implement-TLS-1-2-Support-with-the-cURL-PHP-Extension-in-Zend-Server [python-tls]: https://docs.python.org/2/library/ssl.html#ssl.PROTOCOL_TLSv1_2 [rest]: https://en.wikipedia.org/wiki/Representational_state_transfer [rfc-7239]: https://tools.ietf.org/html/rfc7239 [rfc-7329]: https://tools.ietf.org/html/rfc7329 [robustness-principle]: https://en.wikipedia.org/wiki/Robustness_principle [ruby-tls]: https://stackoverflow.com/a/11059873/61818 [settlement]: /payment-instruments/invoice/features/core/settlement-reconciliation [ssllabs]: https://www.ssllabs.com/ssltest/analyze.html?d=api.payex.com [the-rest-and-then-some]: https://www.youtube.com/watch?v=QIv9YR1bMwY [uuid]: https://en.wikipedia.org/wiki/Universally_unique_identifier",
    "tags": "",
    "url": "/introduction.html"
  },{
    "title": "Invoice Authorization Transaction",
    "text": "{% include invoice-authorization-transaction.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/invoice-authorization-transaction.html"
  },{
    "title": "iOS",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} This guide assumes that you are using the Merchant Backend Configuration and your backend implements the Merchant Backend API. If you are using a custom backend instead, the meaning of `SwedbankPaySDKController` arguments will be different, as well as any errors reported, but the basic process is the same. The differences will be highlighted in the chapter on custom backends. ## Installation The iOS component of the Swedbank Pay Mobile SDK is distributed through [CocoaPods][cocoapods]. If you do not have CocoaPods installed on your development machine, please install it first according to the [instructions][cocoapods-gettingstarted] at the CocoaPods web page. [Add CocoaPods][cocoapods-using] to your project, if needed. Then, add the [SDK pod][sdk-pod]. Do not forget to run `pod install` after editing the `Podfile`. ### Url Scheme and Associated Domain The [Payment Url][payment-url] handling in the iOS SDK uses [Universal Links][ios-universal-links], and additionaly a [custom url scheme][ios-custom-scheme] as a fallback mechanism. You must therefore set these up in the app before using the SDK. The easiest way to add a url scheme to your app is to select the project file, go to the `Info` tab, scroll down to `URL Types`, and click the `+` button to add a new scheme. Insert a single **unique** url scheme to the `URL Schemes` field. You can choose the url `Identifier` freely, but remember that that too should be unique. The `Role` for the url type should be `Editor`. Finally, to mark this url type as the Swedbank Pay payment url scheme, open the `Additional url type properties`, and add a property with the key `com.swedbank.SwedbankPaySDK.callback`, type `Boolean`, and value `YES`. ![Payment url scheme added in project Info tab][custom-scheme-1] You can also edit the `Info.plist` file directly, if you wish. ![Payment url scheme added in Info.plist editor][custom-scheme-2] To set up universal links in your application, you first need to [add the Associated Domains capability][xcode-add-cap]. Then, add your Merchant Backend's domain as an [`applinks` associated domain][xcode-add-assoc-domain]. Additionally, your merchant backend must have the appropriate [Apple App Site Association][backend-aasa] file configured. ![Associated Domains Configured][assoc-domains-entitlement] ## Usage ```mermaid sequenceDiagram participant App participant SDK participant Merchant participant SwedbankPay as Swedbank Pay participant Ext as External App rect rgba(238, 112, 35, 0.05) note left of App: Configuration App ->> SDK: SwedbankPaySDK.MerchantBackendConfiguration(backendUrl: \"https://example.com/swedbank-pay-mobile/\", headers: [:]) SDK -->> App: configuration end opt Unless Guest Payment App ->> SDK: SwedbankPaySDK.Consumer(language = ..., shippingAddressRestrictedToCountryCodes = ...) SDK -->> App: consumer end rect rgba(138, 205, 195, 0.1) note left of App: Prepare Payment App ->> SDK: PaymentOrderUrls(configuration: configuration, language: ...) SDK -->> App: paymentOrderUrls App ->> SDK: PaymentOrder(urls: paymentOrderUrls, ...) SDK -->> App: paymentOrder end App ->> SDK: SwedbankPaySDKController(configuration: configuration, consumer: consumer, paymentOrder: paymentOrder) SDK -->> App: swedbankPaySdkController App ->> SDK: swedbankPaySdkController.delegate = ... App ->> App: Show swedbankPaySdkController rect rgba(138, 205, 195, 0.1) note left of App: Discover Endpoints SDK ->> Merchant: GET /swedbank-pay-mobile/ Merchant -->> SDK: { \"consumers\": \"/swedbank-pay-mobile/consumers\", \"paymentorders\": \"/swedbank-pay-mobile/paymentorders\" } end opt Unless Guest Payment SDK ->> Merchant: POST /swedbank-pay-mobile/consumers Merchant ->> SwedbankPay: POST /psp/consumers SwedbankPay -->> Merchant: rel: view-consumer-identification Merchant -->> SDK: rel: view-consumer-identification SDK ->> SDK: Show html page with view-consumer-identification SwedbankPay ->> SDK: Consumer identification process SDK ->> SwedbankPay: Consumer identification process SwedbankPay ->> SDK: consumerProfileRef SDK ->> SDK: paymentOrder.payer = { consumerProfileRef } end rect rgba(138, 205, 195, 0.1) note left of App: Payment Menu SDK ->> Merchant: POST /swedbank-pay-mobile/paymentorders Merchant ->> SwedbankPay: POST /psp/paymentorders SwedbankPay -->> Merchant: rel: view-paymentorder Merchant -->> SDK: rel: view-paymentorder SDK ->> SDK: Show html page with view-paymentorder SwedbankPay ->> SDK: Payment process SDK ->> SwedbankPay: Payment process opt Redirect to Third-Party Page inside SwedbankPaySDKController ① SDK ->> SDK: Show third-party page SDK ->> SDK: Intercept navigation to paymentUrl SDK ->> SDK: Reload html page with view-paymentorder end opt Redirect to Third-Party Page in Safari ② SDK ->> Ext: Launch Safari Ext ->> SDK: Return from Safari end opt Launch External Application SDK ->> Ext: Start external application Ext ->> SDK: Return from external application ③ end SDK ->> SDK: Intercept navigation to completeUrl SDK ->> SDK: delegate.paymentComplete() end App ->> App: Remove paymentFragment ``` * ① Only pages tested to work with WKWebView are opened inside SwedbankPaySDKController. This list is updated as new pages are verified. * ② Other pages are opened in Safari. See [the section on external applications][ios-payment-url] for details on how the process returns to the SDK afterwards. * ③ See [the section on external applications][ios-payment-url] for details. The iOS SDK is contained in the module `SwedbankPaySDK`. ```swift import SwedbankPaySDK ``` The main component of the SDK is `SwedbankPaySDKController`, a `UIViewController` that handles a single payment order. When initializing a `SwedbankPaySDKController`, you must provide a `SwedbankPaySDKConfiguration` that describes the server environment the `SwedbankPaySDKController` is working with, along with a `SwedbankPaySDK.PaymentOrder`, and, unless making a guest payment, a `SwedbankPaySDK.Consumer`. Providing a `SwedbankPaySDK.Consumer` makes future payments by the same payer easier. The `SwedbankPaySDKConfiguration` is, in most cases, static for a given server environment. Therefore, it makes sense to keep it in a convenient constant. The `SwedbankPaySDK.MerchantBackendConfiguration` initializer can determine your application's custom scheme for payment urls automatically, if you have set it up as described above. ```swift let swedbankPayConfig = SwedbankPaySDK.MerchantBackendConfiguration( backendUrl: \"https://example.com/swedbank-pay-mobile/\", headers: [:] ) ``` The semantics of `SwedbankPaySDK.Consumer` properties are the same as the fields of the [POST /psp/consumers][checkin-consumer]. There are default values for the `operation` and `language` properties (`.InitiateConsumerSession` and `.English`, respectively). ```swift let consumer = SwedbankPaySDK.Consumer( language = .Swedish, shippingAddressRestrictedToCountryCodes: = [\"NO\", \"SE\", \"DK\"] ) ``` Similarly, the semantics of `SwedbankPaySDK.PaymentOrder` properties are the same as the fields of the [POST /psp/paymentorders][checkin-paymentorder] request. Sensible default values are provided for many of the properties. In a similar fashion to how the Android SDK works, while there is no default value for the `urls` property, there are convenience constructors for the `SwedbankPaySDK.PaymentOrderUrls` type, which are recommended for general use. Assuming you have the iOS Payment Url Helper endpoint set up with the specified static path relative to your backend url (i.e. `sdk-callback/ios-universal-link`), then using one of the convenience constructors taking a `SwedbankPaySDK.MerchantBackendConfiguration` argument will set the `paymentUrl` correctly. ```swift let paymentOrder = SwedbankPaySDK.PaymentOrder( currency = \"SEK\", amount = 1500, vatAmount = 375, description = \"Test Purchase\", language = .Swedish, urls = SwedbankPaySDK.PaymentOrderUrls( configuration: swedbankPayConfig, language: .Swedish ), payeeInfo = SwedbankPaySDK.PayeeInfo( // ① payeeName = \"Merchant1\", productCategory = \"A123\", orderReference = \"or-123456\", subsite = \"MySubsite\" ), orderItems = [ SwedbankPaySDK.OrderItem( reference = \"P1\", name = \"Product1\", type = .Product, class = \"ProductGroup1\", itemUrl = URL(string: \"https://example.com/products/123\"), imageUrl = URL(string: \"https://example.com/product123.jpg\"), description = \"Product 1 description\", discountDescription = \"Volume discount\", quantity = 4, quantityUnit = \"pcs\", unitPrice = 300, discountPrice = 200, vatPercent = 2500, amount = 1000, vatAmount = 250 ) ] ) ``` * ① payeeId and payeeReference are required fields, but default to the empty string. The assumption here is that your Merchant Backend will override the values set here. If your system works better with the Mobile Client setting them instead, they are available here also. To start a payment, create a `SwedbankPaySDKController` and display it. The payment process starts as soon as the `SwedbankPaySDKController` is visible. ```swift val paymentController = SwedbankPaySDKController( configuration: swedbankPayConfig, consumer: consumer, paymentOrder: paymentOrder ) present(paymentController, animated: true, completion: nil) // There are, of course, many other ways of displaying a view controller ``` To observe the payment process, set a `delegate` to the `SwedbankPaySDKController`. When the delegate is informed that the payment process is finished, you should remove the `SwedbankPaySDKController` and inform the user of the result. ```swift paymentController.delegate = self ``` ```swift func paymentComplete() { dismiss(animated: true, completion: nil) // Check payment status from your backend // Notify user } func paymentCanceled() { dismiss(animated: true, completion: nil) // Notify user } func paymentFailed(error: Error) { dismiss(animated: true, completion: nil) // Notify user } ``` Note that checking the payment status after completion is outside the scope of the Mobile SDK. Your backend should collect any information it needs to perform this check when it services the request to the [Payment Orders endpoint][backend-payment-orders] made by the `SwedbankPaySDKController`. ## Problems If the payment fails for any reason, the cause will be made available as the argument of the `paymentFailed(error:)` delegate method. The error will be of any type thrown by your `SwedbankPaySDKConfiguration`. In the case of `SwedbankPaySDK.MerchantBackendConfiguration` this means `SwedbankPaySDK.MerchantBackendError`. If errors are encountered in the payment process, the Merchant Backend is expected to respond with a [Problem Details for HTTP APIs (RFC 7807)][rfc-7807] message. If the payment fails because of a problem, the `SwedbankPaySDK.MerchantBackendError` will be `.problem`, the associated value being the problem as parsed from the response. The iOS SDK will parse any RFC 7807 problem, but it has specialized data types for known problem types, namely the [Common Problems][swedbankpay-problems] and the [Merchand Backend Problems][backend-problems]. Problems are expressed in Swift as `enum`s with associated values, representing a hierarchy of problem types. At the root of the hierarchy is `enum SwedbankPaySDK.Problem`, with two cases: `.Client` and `.Server`. A `.Client` problem is one caused by client behaviour, and is to be fixed by changing the request made to the server. Generally, a `.Client` problem is a programming error, with the possible exception of `.Client(.MobileSDK(.Unauthorized))`. A `.Server` problem is one caused by a malfunction or lack of service in the server evironment. A `.Server` problem is fixed by correcting the behaviour of the malfunctioning server, or simply trying again later. Both `.Client` and `.Server` have an associated value, of type `SwedbankPaySDK.ClientProblem` and `SwedbankPaySDK.ServerProblem` respectively, that further classify the problems as `.MobileSDK`, `.SwedbankPay`, `.Unknown` or `.UnexpectedContent`. `MobileSDK` problems are ones with [Merchant Backend problem types][backend-problems], while `SwedbankPay` problems have [Swedbank Pay API problem types][swedbankpay-problems]. `Unknown` problems are of types that the SDK has no knowledge of. `.UnexpectedContent` problems are not proper RFC 7807 problems, but are emitted when the SDK cannot make sense of the response it received from the backend. ```swift func paymentFailed(failureReason: SwedbankPaySDKController.FailureReason) { // remove SwedbankPaySDKController switch failureReason { case .Problem(.Client(.MobileSDK(.Unauthorized(let message, _)))): print(\"Credentials invalidated: \\(message)\") case .Problem(.Client(.MobileSDK)): print(\"Other client error at merchant backend\") case .Problem(.Client(.SwedbankPay(let problem))) where problem.type == .InputError: print(\"Payment rejected by Swedbank Pay: \\(problem.detail); Fix: \\(problem.action)\") case .Problem(.Client(.Unknown(let problem))): if problem.type == \"https://example.com/problems/special-problem\" { print(\"Special problem occurred: \\(problem.detail)\") } else { print(\"Unexpected problem: \\(problem.raw)\") } case .Problem(.Server(.MobileSDK(.BackendConnectionTimeout(let message, _)))): print(\"Swedbank Pay timeout: \\(message)\") case .Problem(.Server(.SwedbankPay(let problem))) where problem.type == .SystemError: print(\"Generic server error at Swedbank Pay: \\(problem.detail)\") default: break } } ``` ## Payment URL and External Applications The payment process may involve navigating to third-party web pages, or even launching external applications. To resume processing the payment in the payment menu, each payment order must have a [Payment Url][payment-url]. Let us now discuss how that payment url is used in the iOS environment. In any case, using the convenience constructors for `SwedbankPaySDK.PaymentOrderUrls` is recommended; they will generate a unique payment url, which will be routed to the application in all cases, assuming the application and the merchant backend are configured correctly. `SwedbankPaySDKController` internally uses a `WKWebView`, and in many cases third-party pages can be opened inside that web view. In these cases the SDK can intercept the navigation to the payment url and reload the payment menu without further setup. Unfortunately, our testing has revealed that some web pages used in confirmation flows are incompatible with being opened in a web view. Because of these cases, `SwedbankPaySDKController` will only open known-good pages internally, and will open other pages in Safari instead. The SDK contains a list of domain names of pages tested to work in the web view. You can also specify your own list of domains, and there are debugging features available for testin unknown pages in the web view. Pull requests updating the list of good domains in the SDK are welcome. ```mermaid sequenceDiagram participant SDK participant Web as Web View participant Safari Web ->> SDK: Navigate to third-party web page SDK ->> SDK: Check if page is in list of good domains alt Domain is good SDK ->> Web: Allow navigation Web ->> Web: Load third-party page else Domain is not good SDK ->> Web: Cancel navigation SDK ->> Safari: Open third-party page end ``` Returning to the payment menu from inside the web view is simple: detect the navigation and override it to reload the payment menu instead. ```mermaid sequenceDiagram participant Page as 3rd Party Page participant Web as Web View participant SDK Page ->> Web: Navigate to payment url Web ->> SDK: Navigate to payment url SDK ->> Web: Cancel navigation SDK ->> SDK: Reload payment menu ``` Returning to the payment menu from Safari is more involved. The merchant backend page [explains][ios-paymenturl-helper] the process from the backend perspective; let us now view it from the iOS side. When the third party page wants to return to the payment menu, it navigates to the payment url. As this navigation is happening inside Safari, the payment url must provide some meaningful respose when Safari makes the request. However, even before that happens, consider the case where the payment url is a [universal link][ios-universal-links] for the application using the SDK. Assuming the [conditions][ios-universal-links-routing] for opening universal links in the registered application are met, then Safari will never actually request the payment url, but will instead open the application, giving it the universal link in its Application Delegate's [`application(_:continue:restorationHandler:)`][uiappdelegate-continueuseractivity] method. Recall that we enabled universal links for the backend url's domain [in the installation instructions](#url-scheme-and-associated-domain). Note that the merchant backend must also be properly configured to [enable univeral links][backend-aasa]. The application delegate is, of course, squarely in the domain of the application; the SDK cannot hook into it automatically. Therefore, you need to implement the [`application(_:continue:restorationHandler:)`][uiappdelegate-continueuseractivity] method, and pass control over to the SDK when a Swedbank Pay SDK Payment Url is passed into it. Do this by calling the `SwedbankPaySDK.continue(userActivity:)` method. ```swift func application( _ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void ) -> Bool { return SwedbankPaySDK.continue(userActivity: userActivity) } ``` ```mermaid sequenceDiagram participant Page as 3rd Party Page participant Safari participant App as Application participant SDK Page ->> Safari: Navigate to payment url Safari ->> Safari: Recognize universal link Safari ->> App: Bring to foreground Safari ->> App: application(application, continue: userActivity, restorationHandler: restorationHandler) App ->> SDK: SwedbankPaySDK.continue(userActivity: userActivity) SDK ->> SDK: Reload payment menu ``` Testing has shown, however, that the navigation to the payment url is not always processed as a universal link, and is instead opened in Safari. A major reason for this happening are the conditions placed on routing a universal link to the registered application. A crucial condition to consider is that the navigation must have started from user interaction. It appears that many third party pages involved in verification flows will navigate to the payment url not from user interaction directly, but through e.g. timers. This will, unfortunately, prevent the link from being opened in the application. As it stands, we need a way to get back to the application even when the payment url is opened in Safari. The simplest way of accomplishing this is to respond with a redirect to a [custom scheme url][ios-custom-scheme]. Doing that will, however, always show an unattractive confirmation alert before the user is directed to the application. Therefore, let us first consider if there is a way to reattempt the universal link navigation, while attempting to maximize the chance of it being routed to the application. Reviewing the [conditions][ios-universal-links-routing] for universal links opening in the registered application, we note two things: Firstly, the navigation must originate from user interaction. Thus, opening the payment url in Safari must produce a page with a control the user can interact with, which must trigger a navigation to the payment url. Secondly, the navigation must be to a domain different to the current page. This means that opening the payment url must redirect to a page on a different domain, so that a navigation back to the payment url from that page is given to the application to handle. As explained on the [mechant backend page][ios-paymenturl-helper], we solve this by having the payment url respond with a redirect response to a page with a link to the payment url (but see below). ```mermaid sequenceDiagram participant User participant Page as 3rd Party Page participant Safari participant Merchant as Payment Url Host participant Trampoline as Payment Url Trampoline participant App as Application participant SDK Page ->> Safari: Navigate to payment url (at Merchant) Safari ->> Merchant: GET Merchant ->> Safari: 301 Moved Permanently Location: Safari ->> Trampoline: GET Trampoline ->> Safari: ...\">... Safari ->> User: Page with \"Back to Application\" button User ->> Safari: Tap on button rect rgba(238, 112, 35, 0.05) note left of Safari: Same as direct path Safari ->> Safari: Recognize universal link Safari ->> App: Bring to foreground Safari ->> App: application(application, continue: userActivity, restorationHandler: restorationHandler) App ->> SDK: SwedbankPaySDK.continue(userActivity: userActivity) SDK ->> SDK: Reload payment menu end ``` Finally, to prevent the user being stuck in a situation where universal links fail to work despite our efforts, and to help in the development phase where configurations may end up being broken from time to time, we also have a custom scheme fallback. The way this works is that the when the payment url link is tapped on the page where the payment url redirected to, then in that instance the payment url will redirect to a custom scheme url instead. Now this is, of course, more or less impossible to do, so we relax the requirements of the payment url slightly: In addition to the original payment url, the SDK accepts a payment url with any number of additional query parameters added (note that none may be removed or modified, though). This enables us to alter the behaviour of the backend on the \"same\" payment url. To forward the custom-scheme payment urls to the SDK, implement the [`application(_:open:options:)`][uiappdelegate-openurl] method in your application delegate, and call `SwedbankPaySDK.open(url: url)` to let the SDK handle the url. ```swift func application( _ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:] ) -> Bool { return SwedbankPaySDK.open(url: url) } ``` ```mermaid sequenceDiagram participant User participant Page as 3rd Party Page participant Safari participant Merchant as Payment Url Host participant Trampoline as Payment Url Trampoline participant App as Application participant SDK Page ->> Safari: Navigate to payment url (at Merchant) Safari ->> Merchant: GET Merchant ->> Safari: 301 Moved Permanently Location: Safari ->> Trampoline: GET Trampoline ->> Safari: ...\">... Safari ->> User: Page with \"Back to Application\" button User ->> Safari: Tap on button Safari ->> Merchant: GET Merchant ->> Safari: 301 Moved Permanently Location: Safari ->> User: Confirmation Dialog User ->> Safari: Accept App Launch Safari ->> App: Bring to foreground Safari ->> App: application(application, open: url) App ->> SDK: SwedbankPaySDK.open(url: url) SDK ->> SDK: Reload payment menu ``` {% include iterator.html prev_href=\"android\" prev_title=\"Back: Android\" next_href=\"custom-backend\" next_title=\"Next: Custom Backend\" %} [sdk-pod]: https://cocoapods.org/pods/SwedbankPaySDK [cocoapods]: https://cocoapods.org/ [cocoapods-gettingstarted]: https://guides.cocoapods.org/using/getting-started.html [cocoapods-using]: https://guides.cocoapods.org/using/using-cocoapods.html [payment-url]: /checkout/v2/features/technical-reference/payment-url [custom-scheme-1]: /assets/img/mobile-sdk/ios-custom-scheme-1.png [custom-scheme-2]: /assets/img/mobile-sdk/ios-custom-scheme-2.png [assoc-domains-entitlement]: /assets/img/mobile-sdk/ios-assoc-domain.png [ios-custom-scheme]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app [ios-universal-links]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content [ios-universal-links-routing]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content#3001753 [ios-paymenturl-helper]: merchant-backend#ios-payment-url-helper [uiappdelegate-continueuseractivity]: https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application [uiappdelegate-openurl]: https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application [backend-aasa]: merchant-backend#apple-app-site-association [xcode-add-cap]: https://help.apple.com/xcode/mac/current/#/dev88ff319e7 [xcode-add-assoc-domain]: https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app#3001207 [rfc-7807]: https://tools.ietf.org/html/rfc7807 [swedbankpay-problems]: /introduction#problems [backend-problems]: merchant-backend#problems [checkin-consumer]: /checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [checkin-paymentorder]: /checkout/v2/payment-menu#step-3-create-payment-order [backend-payment-orders]: merchant-backend#payment-orders-endpoint [ios-payment-url]: /modules-sdks/mobile-sdk/ios#payment-url-and-external-applications",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/ios.html"
  },{
    "title": "Items",
    "text": "{% include items.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/items.html"
  },{
    "title": "Items",
    "text": "{% include items.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/items.html"
  },{
    "title": "License",
    "text": "## Licensing The licensing of Swedbank Pay's open source software should be one approved by the [Open Source Initiative][osi] and preferably one that is compatible with closed source, enterprise software. The [Apache 2.0 License][license] is therefore a good fit and should be chosen when possible: ```license Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright {{ \"now\" | date: \"%Y\" }} Swedbank Pay and contributors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ``` The license should be placed in a file called `LICENSE` in the root of the repository and preferably be included as a header in all source code files in the same repository. [osi]: https://opensource.org/ [license]: https://www.apache.org/licenses/LICENSE-2.0",
    "tags": "",
    "url": "/resources/development-guidelines/license.html"
  },{
    "title": "Merchant Backend Sample Code",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} You can find sample implementations of the Merchant Backend at [this Github repository][backend-samples]. Currently there are available the following: * [node.js][node-sample] * [Java][java-sample] Please refer to the sample code documentation for instructions for running a local development server, and/or deploying to selected cloud services. Do note that if you are running a local server over http, you will need to allow insecure communications in the mobile application; otherwise any payments will immediately fail due to a security error. The samples provide a fully functioning API for the SDK, but the implementations are, of course, devoid of any business logic. They should, nevertheless, provide a good starting point toward integration with your business systems. {% include iterator.html prev_href=\"merchant-backend\" prev_title=\"Merchant Backend\" next_href=\"android\" next_title=\"Android\" %} [backend-samples]: https://github.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant [node-sample]: https://github.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant/tree/master/examples/node.js [java-sample]: https://github.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant/tree/master/examples/java/merchant",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/merchant-backend-sample-code.html"
  },{
    "title": "Merchant Backend",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} The Merchant Backend API serves as a simple starting point, and an illustrative example of how to integrate the SDK to your backend systems. The SDK has a Configuration implementation for a backend implementing this API; in addition, there is both a Node.js and a Java sample implementation of this API available. Even if you plan to integrate the SDK using your own backend API, it is recommended to read through this chapter; especially the section Payment Url Helper Endpoints, which will illustrate how any `paymentUrl` created for the SDK should behave. The Mobile SDK Merchant Backend API contains a total of six endpoints, three of which have statically defined paths. An OpenAPI specification is [available][swagger]. (It may be easier to view it in the [Swagger Editor][swagger-editor].) The main part of the API is designed as a transparent wrapper around the Swedbank Pay API, which is the same one used in Checkout. Additionally, two \"helper\" endpoints are specified, which facilitate the proper routing of the [Payment Url][payment-url] back to the originating app. ## Authentication and Authorization You should have some authorization and authentication measures in place to prevent misuse of your Merchant Backend API. The sample implementations have a very rudimentary API key header check. This may or may not be sufficient to your purposes. You should adapt the sample implementation or create your own according to your security needs. The mobile component of the SDK allows adding your own headers to the requests it makes. Therefore you can build your own authentication and authorization measures by adding custom headers in the app, and checking that they have the correct content in the backend. ## The Merchant Backend Configuration To use a backend implementing the Merchant Backend API, you can use the Merchant Backend Configuration provided with the SDK. This implementation is available as `SwedbankPaySDK.MerchantBackendConfiguration` on iOS and `com.swedbankpay.mobilesdk.merchantbackend.MerchantBackendConfiguration` on Android; on Android you create the `MerchantBackendConfiguration` object via a `MerchantBackendConfiguration.Builder`. At a minimum, you must supply the url of the Merchant Backend, i.e. the url of the Root Endpoint. On iOS, you must also have registered a URL type for the SDK: that URL type must have a single scheme, and an additional property with name `com.swedbank.SwedbankPaySDK.callback`, type `Boolean`, and value `YES`. Alternatively you may set the url scheme explicitly in the initializer. Refer to the class documentation for more options. ## Root Endpoint The root endpoint is used to discover the main API endpoints. The URL of the root endpoint is what is configured as the \"Backend URL\" in the mobile SDK component. The point of this is to not bind your service to any particular path or even domain. In most cases, however, you can serve a static response for the root endpoint, with the other endpoint urls being relative to the root endpoint. The sample implementations do this. {:.code-view-header} **Request** ```http GET /swedbank-pay-mobile/ HTTP/1.1 Host: example.com Your-Api-Key: secretish ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"consumers\": \"/swedbank-pay-mobile/consumers\", \"paymentorders\": \"/swedbank-pay-mobile/paymentorders\" } ``` {:.table .table-striped} | Field | Type | Description | | :-------------- | :------- | :--------------------------------------------------------------------------- | | `consumers` | `string` | URL of the \"consumers\" endpoint. Resolved against the root endpoint URL. | | `paymentorders` | `string` | URL of the \"paymentorders\" endpoint. Resolved against the root endpoint URL. | N.B! The API as specified allows assigning endpoints to hosts other that the root endpoint host. However, as this seen to be an uncommon use case, the mobile component of the SDK is, by default, configured to only accept links to the domain of the root endpoint, or its subdomains. If your configuration uses other hosts, you must manually allow them in your mobile app's configuration. ## Consumers Endpoint The `consumers` endpoint is used to start a consumer identification session. It is specified as a transparent wrapper around the corresponding [Swedbank Pay API][initiate-consumer-session]. The sample implementations do superficial input validation, and forward the request to the Swedbank Pay API without further processing. You are free to override this default behaviour as you see fit in your implementation, but the default should be fine for most use-cases. The expected response is the same as the expected response to the Swedbank Pay API. The default is to pass the response from Swedbank as-is; you should probably not modify this behaviour. Specifically, the response must contain the `view-consumer-identification` operation. {:.code-view-header} **Request** ```http POST /swedbank-pay-mobile/consumers HTTP/1.1 Host: example.com Your-Api-Key: secretish Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :---------------------------------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `operation` | `string` | `initiate-consumer-session`, the operation to perform. | | {% icon check %} | `language` | `string` | Selected language to be used in Checkin. Supported values are {% include field-description-language.md %} | | {% icon check %} | `shippingAddressRestrictedToCountryCodes` | `string` | List of supported shipping countries for merchant. Using ISO-3166 standard. | At this point, the Merchant Backend will make a corresponding request to the Swedbank Pay API, using its secret access token. {:.code-view-header} **Forwarded Request** ```http POST /psp/consumers HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"operation\": \"initiate-consumer-session\", \"language\": \"sv-SE\", \"shippingAddressRestrictedToCountryCodes\" : [\"NO\", \"SE\", \"DK\"] } ``` The Merchant Backend will then forward the response it received back to the calling app. {:.code-view-header} **Response &amp; Forwarded Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"token\": \"7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"operations\": [ { \"method\": \"GET\", \"rel\": \"redirect-consumer-identification\", \"href\": \"{{ page.front_end_url }}/consumers/sessions/7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"rel\": \"view-consumer-identification\", \"href\": \"{{ page.front_end_url }}/consumers/core/scripts/client/px.consumer.client.js?token={{ page.payment_token }}\", \"contentType\": \"application/javascript\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :-------------------- | :------- | :------------------------------------------------------------------------------------------------------------------------------------------------ | | `token` | `string` | A session token used to initiate Checkout UI. | | `operations` | `array` | The array of operation objects to choose from, described in detail in the table below. | | └➔&nbsp;`rel` | `string` | The relational name of the operation, used as a programmatic identifier to find the correct operation given the current state of the application. | | └➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └➔&nbsp;`contentType` | `string` | The HTTP content type of the target URI. Indicates what sort of resource is to be found at the URI, how it is expected to be used and behave. | | └➔&nbsp;`href` | `string` | The target URI of the operation. | ## Payment Orders Endpoint The `paymentorders` endpoint is used to create a new Payment Order. It is specified as a transparent wrapper around the corresponding [Swedbank Pay API][create-payment-order]. However, it is to be expected that your backend will need to process the payment order both before making the Swedbank Pay API call, and after receiving the response from Swedbank Pay. The sample implementations validate the input, then create an internal unique identitifer for the payment order, and set that as `paymentorder.payeeInfo.payeeReference`, before making the Swedbank Pay call. After receiving the response, the backend stores the `id` of the Payment Order for future use, and forwards the response to the SDK. Optionally, if your implementation uses [instrument mode payments][instrument-mode], your backend can return the list of valid instruments, along with an endpoint to change the instrument. If you do this, you must also implement the Change Instrument endpoint. The Merchant Backend Configuration on the client side can then use this endpoint to change the instrument of an ongoing payment order. A production implementation should validate the payment order also from a business logic perspective. This is, naturally, outside the scope of the SDK, as is any other processing you may wish to perform with the payment order. The SDK expects the same form of response as returned from the Swedbank Pay API. Specifically, the response must contain the `view-paymentorder` operation. {:.code-view-header} **Request** ```http POST /swedbank-pay-mobile/paymentorders HTTP/1.1 Host: example.com Your-Api-Key: secretish Content-Type: application/json { \"paymentorder\": { \"①\": \"\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------- | :------- | :-------------------------- | | {% icon check %} | `paymentorder` | `object` | The payment order to create | * ① The contents of `paymentorder` are omitted here. See [Checkout Documentation][create-payment-order] for details. At this point, the Merchant Backend will preform necessary processing, and make a corresponding request to the Swedbank Pay API, using its secret access token. {:.code-view-header} **Forwarded Request** ```http POST /psp/paymentorders HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"paymentorder\": { } } ``` {:.code-view-header} **Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\" }, \"operations\": [ { \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` The Merchant Backend will then forward the response it received back to the calling app. If instrument mode is used, an you wish to be able to change the instrument, you can provide the list of valid instruments, and an endpoint for changing the instrument. This additional data is placed in an object under the key \"mobileSDK\". {:.code-view-header} **Forwarded Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\" }, \"operations\": [ { \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] \"mobileSDK\": { \"validInstruments\": [\"CreditCard\", \"Invoice-PayExFinancingSe\"], \"setInstrument\": \"/paymentorders/1234/setInstrument\" } } ``` ## Set Instrument Endpoint You only need to implement this endpoint if you are using instrument mode payments. This endpoint is invoked when making a request to the `mobileSDK.setInstrument` url of a payment order created with the Payment Orders endpoint. This endpoint forwards the PATCH request made to it to the corresponding Swedbank Pay endpoint, as identified by the `update-paymentorder-setinstrument` operation of the payment order. It passes the response to that request back to the SDK. The sample implementation verifies the request body to contain exactly the operation `SetInstrument` and a string `instrument`. {:.code-view-header} **Request** ```http POST /swedbank-pay-mobile/paymentorders HTTP/1.1 Host: example.com Your-Api-Key: secretish Content-Type: application/json { \"paymentorder\": { \"operation\": \"SetInstrument\", \"intrument\": \"CreditCard\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------------- | :------- | :---------------------------------------- | | {% icon check %} | `paymentorder` | `object` | The changes to make to the payment order | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation to perform: \"SetInstrument\" | | {% icon check %} | └➔&nbsp;`instrument` | `string` | The instrument to set | Merchant Backend will then make a corresponding request to the Swedbank Pay API. {:.code-view-header} **Forwarded Request** ```http PATCH /psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"paymentorder\": { \"operation\": \"SetInstrument\", \"intrument\": \"CreditCard\" } } ``` The Merchant Backend will then forward the response it received back to the calling app. If needed, you can append the `mobileSDK` object to this response as well. If it is missing, the SDK will assume the original values are still valid. {:.code-view-header} **Response &amp; Forwarded Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/09ccd29a-7c4f-4752-9396-12100cbfecce\" }, \"operations\": [ { \"href\": \"https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5a17c24e-d459-4567-bbad-aa0f17a76119&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` ## Payment Url Helper Endpoints The [Payment Url][payment-url] helper endpoints do not interact directly with Swedbank Pay. Instead, they are used to route any navigations to the payment order's payment url to the app using the SDK. The payment url allows navigations to third-party sites to happen as a part of the payment process. To continue the payment after any third-party processes, navigating to the payment url is expected to load the payment menu again. In the case of an app using the SDK, this means that the payment url must be routed to that app, and the app must react to that url by reloading the payment menu. Furthermore, for maximum compatibility, the payment url should be a regular https url. Since we want the payment urls to be https urls, they must be hosted somewhere. These helper endpoints facilitate that. Each platform has its own payment url helper, due to the platforms' different requirements for url routing. The endpoints take query arguments to enable apps using the SDK to locally generate unique payment urls for each payment order. The endpoints have no side-effects, and will always return the same response for the same query arguments. The payment url helper endpoints are specified with static paths relative to the root endpoint url. This is done so that payment urls can be generated locally on the app, without needing to make a network round trip at that point. The SDK has no hard requirement for the helper endpoint urls to have such a relationship to the root endpoint url, but it does contain utility methods for easier integration when that is the case. If you wish to host the payment url helper endpoints elsewhere, or, indeed, replicate the behaviour with some other schema for the payment urls, you must manually set `paymentorder.urls.paymentUrl` to the correct value when creating your payment orders. Importantly, the payment url helper endpoints must be accessible without any authentication headers. This is because the scenario where they will be used is when a third-party site wishes to navigate back to the payment order. Such a site will necessarily not have any authentication tokens related to your backend. Consequently, it is important to ensure that these endpoints do not inadvertently disclose information. The sample implementations serve these payment url helper endpoints at the specified static paths. N.B! The SDK generates unique payment urls by adding unique query arguments to the helper endpoint url. These payment urls only have meaning on the generating device, in the generating app. Opening them on another device will be unable to navigate the user to the originating payment menu. ### Android Payment Url Helper The Android payment url helper endpoint expects a query parameter named `package`: the package name of the Android application to redirect to. It has no requirements as to the existence or value of other query parameters. As the application using the SDK knows its own package name, it can use this endpoint to generate a payment url that is routed back to itself. The specified path for the Android payment url helper endpoint is `sdk-callback/android-intent`. The default constructors of the Android SDK form payment urls by appending `sdk-callback/android-intent` to the backend url, i.e. the root endpoint, and adding the `package` query parameter with the containing application's package name, and an `id` query parameter with a random value. The endpoint responds with an html document that attempts to immediately redirect to an [Intent-scheme Url][android-intent-scheme]. That url is constructed such that it uses the value of the `package` query parameter as the target package of the intent. The action of the intent shall be `com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER`; the SDK has an intent filter for this action. The uri (data) of the intent shall be the full url used in the request. The html document shall also contain a link to that same url. This is needed because in some cases the browser will block the redirect to an Intent-scheme url, and will instead require that the navigation to that url happen from a user interaction. {:.code-view-header} **Request** ```http GET /swedbank-pay-mobile/sdk-callback/android-intent?package=your.ecom.app&id=abb50c53-53c1-4138-923f-59fcf0acd08d HTTP/1.1 Host: example.com ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :-------- | :------- | :--------------------------------------------------------- | | {% icon check %} | `package` | `string` | The package name of the Android application to redirect to | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/html Swedbank Pay Payment Back to app ``` * ① The `intent` url is transformed to an Android Intent using the data after the `#Intent;` token. The uri of that intent is the intent url up to that token, with the `intent` scheme replaced according to the `scheme=` parameter – in this case `https`. Using a payment url crafted this way causes an intent with the payment url to be delivered to the application when a third-party page navigates to the payment url. The SDK receives this intent, recognizes the payment url, and reloads the payment menu. N.B! It is possible to craft arbitrary `com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER` intents using this endpoint. However, further processing of such intents is dependent on local data, and thus this endpoint leaks no information. Indeed, it is conceptually possible for two different devices to use the same payment url to refer to different payments. Your implementation may restrict the requests it serves; e.g. you may only allow a specific `package`. ### iOS Payment Url Helper #### Background The iOS payment url helper endpoint is more involved than the Android one. While a similar mechanism could be used with [custom url schemes][ios-custom-scheme], doing so will not provide optimal user experience: custom schemes will show a confirmation dialog before being routed to the handling application, and the content of that dialog is not under developer control. Instead, the best practice for assigning urls to applications is to use [Universal Links][ios-universal-links]. With the merchant backend host and the iOS application using the SDK configured correctly, the payment url becomes a universal link. Universal links function such that they are given directly to the handling application. This means that if the navigation to the payment url is handled as a unversal link, the actual payment url is never dereferenced before being handled by the application. In this scenario, is does not matter what kind of response would be received by making a `GET` request to the payment url. Unfortunately, this is not guaranteed to happen. As [documented][ios-universal-links-routing], universal links open the registered application \"when [the user] tap[s] links to your website within Safari\", but \"When a user browses your website in Safari and taps a universal link in the same domain, the system opens that link in Safari -- If the user taps a universal link in a different domain, the system opens the link in your app.\" This presents two preconditions: the navigation must originate from user interaction, and the domain of the universal link must be different to the domain of the current page. Also, practice has shown that universal links may still sometimes fail to work as intended, so we must have some way of escaping that situation. In order to have a foolproof system with optimal user experience, we must therefore work correctly in different scenarios: 1. The initial navigation to the payment url is opened in the application: no requirements for the payment url 2. The initial navigation to the payment url is opened in Safari: need a way to link back to the payment url such that it is opened in the application instead * 2a: The second navigation to the payment url is opened in the application: no further requirements for the payment url * 2b: The second navigation to the payment url is also opened in Safari: out of nice-UX options; need to redirect to a custom scheme url This state of matters necessitates an unintuitive and cumbersome system involving two hosts and a custom url scheme. The usage of two hosts is unavoidable if maximum compatibility combined with optimum user experience is desired. The custom url scheme is unavoidable if an escape hatch in badly behaving scenarios is desired. However, universal links need be configured only to one of the involved hosts, namely the one hosting the payment url. Thus, the page with a link back to the payment url can be on a generic server hosted by Swedbank Pay. \\[Development note: the Swedbank Pay server for this purpose is not yet available in the production environment.\\] #### iOS Payment Url System The iOS payment url helper endpoint expects the following query parameters: * `scheme`: The custom scheme for Swedbank Pay SDK payment urls in the application * `language`: The language to use in the back-link web page in the case 2 above The endpoint also accepts two optional query parameters: * `app`: The name of the application to show in the back-link web page * `fallback`: If `true`, redirects to a custom-scheme url instead of the back-link web page Like the Android payment url helper endpoint, the iOS payment url helper endpoint imposes no requirements on any other query parameters. The specified path for the iOS payment url helper endpoint is `sdk-callback/ios-universal-link`. The default constructors of the iOS SDK form payment urls by appending `sdk-callback/ios-universal-link` to the backend url, i.e. the root endpoint, and adding the `scheme` query parameter with the custom scheme registered in the app for handling Swedbank Pay SDK payment urls, the `language` parameter with the chosen language, the `app` parameter with the application name (if available), and an `id` query parameter with a random value. The `fallback` parameter is _not_ set for the payment url. Let us consider the cases above, when a third-party page wants to navigate back to the payment menu. Case 1 requires no further analysis. The univeral link system works as we intend, the payment url is opened in the app as-is. Case 2 causes the payment url to be opened in Safari. In this case we want to show a web page with a link back to the payment url, so the user can tap the link and it will be opened in the application, as provided by the conditions outlined above. Since this page must be served from a different domain, the payment url itself must respond with a redirect response. {:.code-view-header} **Request** ```http GET /swedbank-pay-mobile/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abb50c53-53c1-4138-923f-59fcf0acd08d&app=Your%20Ecom%20App HTTP/1.1 Host: example.com ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------- | :-------- | :------------------------------------------------------------------ | | {% icon check %} | `scheme` | `string` | The custom scheme for handling Swedbank Pay payment urls in the app | | {% icon check %} | `language` | `string` | The language to use in the back-link page | | | `app` | `string` | The application name to display in the back-link page | | | `fallback` | `boolean` | If `true`, redirect to custom scheme rather than back-link page | {:.code-view-header} **Response** ```http HTTP/1.1 301 Moved Permanently ① Location: https://ecom.stage.payex.com/externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fswedbank-pay-mobile%2Fsdk-callback%2Fios-universal-link%3Fscheme%3Dyourecomapp%26language%3Den-US%26id%3Dabb50c53-53c1-4138-923f-59fcf0acd08d%26app%3DYour%2520Ecom%2520App%26fallback%3Dtrue&language=en-US&app=Your%20Ecom%20App ``` This example uses the public server hosted by Swedbank Pay \\[Development note: The public server is not yet available in the production environment. The url will be updated when it is released.\\], but you can also host the back-link page yourself if desired. Safari will immediately follow the redirect: {:.code-view-header} **Request** ```http GET /externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fswedbank-pay-mobile%2Fsdk-callback%2Fios-universal-link%3Fscheme%3Dyourecomapp%26language%3Den-US%26id%3Dabb50c53-53c1-4138-923f-59fcf0acd08d%26app%3DYour%2520Ecom%2520App%26fallback%3Dtrue&language=en-US&app=Your%20Ecom%20App HTTP/1.1 Host: ecom.stage.payex.com ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------- | :------- | :----------------------------------------------------- | | {% icon check %} | `target` | `string` | The link to open when the button on the page is tapped | | {% icon check %} | `language` | `string` | The language to use in the page | | | `app` | `string` | The application name to display in the page | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/html Swedbank Pay Redirect Back to Your Ecom App ``` The back-link page contains a link to the payment url, but with an added with the `fallback=true` parameter. In case 2a the link will be opened in the application, and we are done. In case 2b, however, the link is again opened in Safari. Since the back-link page did not work, it makes no sense to redirect back to it again. Instead we will redirect to a custom scheme url, as those will always be opened in the registered application, albeit only after a confirmation dialog. Of course, this means that we need to know that the payment url is being opened from the back-link page. The `fallback=true` parameter signals to the iOS payment url helper endpoint to alter its behaviour this way. You may note that in case 2a the application was not opened with the original payment url, but with one with an extra query parameter. The SDK handles this by considering the query part of the payment url separately, allowing additional parameters. Case 2b continues by making a request to the payment url with the added `fallback=true` parameter. The endpoint responds with a redirect similar to the Android one: the scheme is replaced with the custom scheme, and the rest of the request url is unmodified. {:.code-view-header} **Request** ```http GET /swedbank-pay-mobile/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abb50c53-53c1-4138-923f-59fcf0acd08d&app=Your%20Ecom%20App&fallback=true HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 301 Moved Permanently ① Location: yourecomapp://example.com/swedbank-pay-mobile/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abb50c53-53c1-4138-923f-59fcf0acd08d&app=Your%20Ecom%20App&fallback=true ``` Note that this custom-scheme link is otherwise equal to the universal link opened in case 2a; accordingly, the SDK handles this by allowing the scheme of the payment url to be either the original scheme, or the custom scheme registered to the application. * ① 302 Found is perhaps a more appropriate status. This may be changed in the future, after testing that the routing works correctly with that status. #### Apple App Site Association The iOS payment url helper endpoint must be configured as a universal link to the application for it to work correctly. Doing this requires an [Apple app site association][ios-aasa] file on the host of the iOS payment url. This file must be at a path relative to the host root (namely `/.well-known/apple-app-site-association`), and is thus outside the scope of, but linked to, the merchant backend API. The example implementations assume they are rooted at host root, and serve an Apple app site association using a configurable application ID. {:.code-view-header} **Request** ```http GET /.well-known/apple-app-site-association HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"applinks\": { \"apps\": [], \"details\": [ { \"appID\":\"YOURTEAMID.your.ecom.app\", \"paths\":[\"/swedbank-pay-mobile/sdk-callback/*\"] } ] } } ``` ## Problems If there are any errors in servicing a request, they should be reported using [Problem Details for HTTP APIs (RFC 7807)][rfc-7807] messages, like the [Swedbank Pay APIs do][swedbankpay-problems]. In particular, if the Swedbank Pay API response contains a problem, that problem should be forwarded to the client making the original request. ### Merchant Backend Problems The following problem types are defined for Merchant Backend specific errors. The mobile SDK components contain data types for easy processing of these error types. The sample implementations emit these errors in the specified circumstances; your own implementation is encouraged to do so as well. All these Merchant Backend problem types will have a URI in the format `https://api.payex.com/psp/errordetail/mobilesdk/`. {:.table .table-striped} | Type | Status | Description | | :--------------- | :----: | :------------------------------------------------------------------------------ | | `gatewaytimeout` | `504` | The Swedbank Pay API did not respond in time. | | `badgateway` | `502` | The Merchant Backend did not understand the response from the Swedbank Pay API. | | `unauthorized` | `401` | The request did not have proper credentials to perform the operation. | | `badrequest` | `400` | The Merchant Backend did not undestand the request. | Your implementation is encouraged to define its own problem types for any domain-specific errors; you should namespace those problem types under a domain name under your control – usually the host name of the Merchant Backend. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"merchant-backend-sample-code\" next_title=\"Merchant Backend Sample Code\" %} [swagger]: https://github.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant/blob/master/documentation/swedbankpaysdk_openapi.yaml [swagger-editor]: https://editor.swagger.io/?url=https://raw.githubusercontent.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant/master/documentation/swedbankpaysdk_openapi.yaml [payment-url]: /payment-menu/features/technical-reference/payment-url [initiate-consumer-session]: /checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [create-payment-order]: /checkout/v2/payment-menu#step-3-create-payment-order [android-intent-scheme]: https://developer.chrome.com/multidevice/android/intents [ios-custom-scheme]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app [ios-universal-links]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content [ios-universal-links-routing]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content#3001753 [ios-aasa]: https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app#3001215 [rfc-7807]: https://tools.ietf.org/html/rfc7807 [swedbankpay-problems]: /introduction#problems [instrument-mode]: /payment-menu/features/optional/instrument-mode",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/merchant-backend.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md api_resource=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/metadata.html"
  },{
    "title": "Metadata",
    "text": "{% include metadata.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/metadata.html"
  },{
    "title": "Mobile",
    "text": "## Card Payments in Mobile Apps The implementation sequence for Card Payments in mobile apps is identical to the standard Redirect scenario, but also includes explanations of how to include this redirect in mobile apps or in mobile web pages. ### Screenshots for Payments You will redirect the payer to Swedbank Pay hosted pages to collect the card information. {:.text-center} ![Mobile Redirect Payment Page][mobile-redirect-page]{:width=\"435\" height=\"770\"} Transactions in SEK will have an option for selecting debit or credit card: {:.text-center} ![Swedish Mobile Redirect Payment Page][swedish-mobile-redirect-page]{:width=\"435\" height=\"810\"} ## API Requests for Payments The API requests are displayed in the [purchase flow][purchase]. You can [create a card `payment`][create-payment] with following `operation` options: * [`Purchase`][purchase] * [`Recur`][recur] * [`Payout`][payout] * [`Verify`][verify] Our `payment` example below uses the [`Purchase`][purchase] value. ## Purchase flow mobile The sequence diagram below shows a high level description of a complete purchase, and the two requests you have to send to Swedbank Pay. The links will take you directly to the corresponding API description. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: * 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. * Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: start purchase activate Merchant Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Merchant: First API Request SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: authorization page activate Payer note left of Payer: redirect to SwedbankPay Payer->>-Merchant: access merchant page activate Merchant Merchant->>-SwedbankPay: GET activate SwedbankPay note left of Merchant: Second API request SwedbankPay-->>-Merchant: rel: redirect-authorization activate Merchant Merchant-->>-Payer: display purchase result ``` ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: start purchase activate Payer Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate Merchant note left of Payer: First API request SwedbankPay-->-Merchant: payment resource activate SwedbankPay Merchant-->>-Payer: authorization page activate Merchant Payer->>-SwedbankPay: access authorization page activate Payer note left of Payer: redirect to SwedbankPay SwedbankPay-->>-Payer: display purchase information activate SwedbankPay Payer->>Payer: input creditcard information Payer->>-SwedbankPay: submit creditcard information activate Payer opt Card supports 3-D Secure SwedbankPay-->>-Payer: redirect to IssuingBank activate SwedbankPay Payer->>IssuingBank: 3-D Secure authentication process Payer->>-SwedbankPay: access authentication page activate Payer end SwedbankPay-->>-Payer: redirect to merchant activate SwedbankPay note left of Payer: redirect back to merchant Payer->>-Merchant: access merchant page activate Payer Merchant->>-SwedbankPay: GET activate Merchant note left of Merchant: Second API request SwedbankPay-->>-Merchant: rel: redirect-authorization activate SwedbankPay Merchant-->>Payer: display purchase result activate Merchant opt Callback is set activate SwedbankPay SwedbankPay->>SwedbankPay: Payment is updated SwedbankPay->>Merchant: POST Payment Callback activate SwedbankPay end ``` {% include iterator.html prev_href=\"direct\" prev_title=\"Direct\" next_href=\"after-payment\" next_title=\"After Payment\" %} [create-payment]: /payment-instruments/card/features/technical-reference/create-payment [payout]: /payment-instruments/card/features/optional/payout [purchase]: /payment-instruments/card/features/core/purchase [mobile-redirect-page]: /assets/img/payments/mobile-card-page.png [swedish-mobile-redirect-page]: /assets/img/payments/swedish-mobile-card-page.png [recur]: /payment-instruments/card/features/optional/recur [verify]: /payment-instruments/card/features/optional/verify",
    "tags": "",
    "url": "/payment-instruments/card/mobile-card-payments.html"
  },{
    "title": "MOTO",
    "text": "{% include moto.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/moto.html"
  },{
    "title": "MOTO",
    "text": "{% include moto.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/moto.html"
  },{
    "title": "Observing The Payment Process",
    "text": "{% include mobile-sdk-observing-the-payment-process.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/technical-reference/observing-the-payment-process.html"
  },{
    "title": "One-Click Payments",
    "text": "{% include one-click-payments.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/one-click-payments.html"
  },{
    "title": "One-Click Payments",
    "text": "{% include one-click-payments.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/optional/one-click-payments.html"
  },{
    "title": "One-Click Payments",
    "text": "{% include one-click-payments.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/one-click-payments.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payments-operations.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "## Gift card resource For security and headers see [Security][security]. ## Get New Gift Card {:.code-view-header} **Request** ```http POST /api/payments/gift-card/get-new-gift-card HTTP/1.1 Authorization: Bearer Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"email\": \"example@exampleprovider.com\", \"msisdn\": 99999999, \"productId\": 7854 } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :---------- | :-------- | :----------------------------------------------------------------------------------------- | | {% icon check %} | `amount` | `integer` | Total amount of Payment (in cents), ie. 100Kr -> 10000. If amount is 0 no deposit is made. | | | `email` | `string` | customers email. | | | `msisdn` | `string` | customers mobile number. | | | `productId` | `string` | A product identifier provided by Swedbank Pay. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"accountSummaryGiftCard\": { \"accountKey\": 7013360000000001000, \"balance\": 10000, \"cvc\": 123, \"expiryDate\": \"2020-01-15\" }, \"paymentId\": 4526987 } ``` ## Pre Deposit {:.code-view-header} **Request** ```http POST /api/payments/gift-card/pre-deposit HTTP/1.1 Authorization: Bearer Hmac: HMAC authentication filter Content-Type: application/json { \"amount\": 10000, \"currency\": \"NOK\", \"description\": \"string\", \"orderRef\": \"UUID\", \"simpleAccountIdentifier\": { \"accountKey\": 7013360000000001000, \"cvc\": 123, \"expiryDate\": \"12/20\" }, \"transactionRef\": \"UUID\" } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------------------ | :-------- | :------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `amount` | `integer` | Total amount of Payment (in cents), ie. 100Kr -> 10000. If amount is 0 no deposit is made. | | {% icon check %} | `currency` | `string` | Currency for Payment. | | | `description` | `string` | Payment description. | | {% icon check %} | `orderRef` | `string` | Merchant ref, Unique from merchant per session. | | | `transactionRef` | `string` | Unique ID for each transaction. | | {% icon check %} | `SimpleAccountIdentifier` | `Object` | | | {% icon check %} | `accountKey` | `string` | Primary Account Number (PAN) for card/account. This is mandatory if ‘track2’ is not present. | | | `cvc` | `string` | Card Verification Code. | | | `expiryDate` | `string` | Expiry date on card (only applicable for PaymentInstrumentType ‘creditcard’) where expiry date is printed on card. Format MM/YY. | {:.code-view-header} **Response:** ```json { \"_links\": [ { \"deprecation\": \"string\", \"href\": \"string\", \"hreflang\": \"string\", \"media\": \"string\", \"rel\": \"string\", \"templated\": true, \"title\": \"string\", \"type\": \"string\" } ], \"balance\": 10000, \"paymentId\": 4526987 } ``` {% include iterator.html prev_href=\"index\" prev_title=\"Introduction\" next_href=\"security\" next_title=\"Security\" %} [security]: /gift-cards/security",
    "tags": "",
    "url": "/gift-cards/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/operations.html"
  },{
    "title": "Operations",
    "text": "{% include payment-order-operations.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/operations.html"
  },{
    "title": "Order Items",
    "text": "{% include order-items.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/order-items.html"
  },{
    "title": "Order Items",
    "text": "{% include order-items.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/order-items.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md api_resource=\"swish\" documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeInfo",
    "text": "{% include payee-info.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payee-info.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md api_resource=\"swish\" documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payee-reference.html"
  },{
    "title": "PayeeReference",
    "text": "{% include payee-reference.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payee-reference.html"
  },{
    "title": "Payer Aware Payment Menu",
    "text": "{% include mobile-sdk-papm.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/optional/payer-aware-payment-menu.html"
  },{
    "title": "Payer Aware Payment Menu",
    "text": "{% include payer-aware-payment-menu.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/payer-aware-payment-menu.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/optional/payment-link.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/payment-link.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/optional/payment-link.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/optional/payment-link.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/optional/payment-link.html"
  },{
    "title": "Payment Link",
    "text": "{% include payment-link.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/optional/payment-link.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payment-menu-events.html"
  },{
    "title": "Payment Menu",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/standard/payment-menu.html"
  },{
    "title": "Payment Menu",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/dsca/payment-menu.html"
  },{
    "title": "Payment Menu",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/tailored/payment-menu.html"
  },{
    "title": "Payment Menu",
    "text": "## Step 3: Create Payment Order Once the consumer has been identified, the next step is to initiate the payment using `consumerProfileRef` retrieved in the previous step. We start by performing a `POST` request towards the `paymentorder` resource with the payer information (such as `consumerProfileRef`) we obtained in the checkin process described above. This information will appear prefilled in the Payment Menu. If you are sending a guest user `POST` request, simply leave out the `consumerProfileRef` from the input, and the payer will be sent to an empty Payment Menu. Information like `email`, `address` and `msisdn` can still be added manually in the payer node. If added, it will appear prefilled in the Payment Menu. Remember to read up on our [URL resource][urls]. {% include alert-risk-indicator.md %} {% include alert-gdpr-disclaimer.md %} {% include payment-url.md when=\"selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments\" %} ### Request {% include payment-order-purchase.md %} ### Response The response back should look something like this (abbreviated for brevity): {:.code-view-header} **Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\" }, \"operations\": [ { \"href\": \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :------------- | :------- | :--------------------------------------------------------------------------------- | | `paymentorder` | `object` | The payment order object. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"paymentorder\" %} | | `operations` | `array` | The array of possible operations to perform, given the state of the payment order. | The `paymentorder` object is abbreviated since it's just the `id` and `operations` we are interested in. Store the `id` of the Payment Order in your system to look up status on the completed payment later. Then find the `view-paymentorder` operation and embed its `href` in a `` element. That script will then load the Seamless View for the Payment Menu. We will look into how to hook that up next. {% include alert.html type=\"informative\" icon=\"info\" body=\" `orderReference` must be sent as a part of the `POST` request to `paymentorders` and must represent the order ID of the webshop or merchant website.\" %} ## Step 4: Display the Payment Menu To load the Payment Menu from the JavaScript URL obtained in the back end API response, it needs to be set as a `script` element's `src` attribute. You can cause a page reload and do this with static HTML, or you can avoid the page refresh by invoking the POST to create the payment order through Ajax and then create the script element with JavaScript, all inside the event handler for [`onConsumerIdentified`][technical-reference-onconsumer-identified]. The HTML code will be unchanged in this example. For the guest Payment Menu, lines 23-44 in the JavaScript should be your main focus. They contain what you need to display the Payment Menu without Checkin. {:.code-view-header} **JavaScript** ```js var request = new XMLHttpRequest(); request.addEventListener('load', function () { // We will assume that our own backend returns the // exact same as what SwedbankPay returns. response = JSON.parse(this.responseText); var script = document.createElement('script'); // This assumes the operations from the response of the POST of the // payment order is returned verbatim from the server to the Ajax: var operation = response.operations.find(function (o) { return o.rel === 'view-consumer-identification'; }); script.setAttribute('src', operation.href); script.onload = function () { payex.hostedView.consumer({ // The container specifies which id the script will look for // to host the checkin component container: 'checkin', onConsumerIdentified: function onConsumerIdentified(consumerIdentifiedEvent) { // When the consumer is identified, we need to perform an AJAX request // to our server to forward the consumerProfileRef in a server-to-server // POST request to the Payment Orders resource in order to initialize // the Payment Menu. var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); // This is identical to how we get the 'view-consumer-identification' // script from the check-in. var script = document.createElement('script'); var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // When the 'view-paymentorder' script is loaded, we can initialize the // Payment Menu inside our 'payment-menu' container. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Like before, you should replace the address here with // your own endpoint. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // In this example, we send the entire Consumer Identified Event Argument // Object as JSON to the server, as it contains the consumerProfileRef. request.send(JSON.stringify(consumerIdentifiedEvent)); }, onShippingDetailsAvailable: function onShippingDetailsAvailable(shippingDetailsAvailableEvent) { console.log(shippingDetailsAvailableEvent); } }).open(); }; // Appending the script to the head var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // Place in your own API endpoint here. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We send in the previously mentioned request here to the checkin endpoint. request.send(JSON.stringify({ operation: 'initiate-consumer-session', language: 'sv-SE', shippingAddressRestrictedToCountryCodes : ['NO', 'SE'] })); ``` This should bring up the Payment Menu in a Seamless View looking like this, depending on whether the payer is logged in (top two) or a guest user (bottom two). Payments done in SEK will have radio buttons for choosing debit or credit card. {:.text-center} ![Payment Menu with payer logged in and card payment opened][login-payment-menu-image]{:width=\"475\" height=\"760\"} {:.text-center} ![Payment Menu with swedish payer logged in and card payment opened][swedish-login-payment-menu-image]{:width=\"475\" height=\"800\"} {:.text-center} ![Payment Menu with guest payer and card payment opened][guest-payment-menu-image]{:width=\"475\" height=\"710\"} {:.text-center} ![Payment Menu with swedish guest payer and card payment opened][swedish-guest-payment-menu-image]{:width=\"475\" height=\"965\"} When the the payment is completed, the Payment Menu script will be signaled and a full redirect to the `completeUrl` sent in with the Payment Order will be performed. When the `completeUrl` on your server is hit, you can inspect the status on the stored `paymentorder.id` on the server, and then perform `capture`. If the payment is a `Sale` or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using `.open()` and `.close()` functions. You can also invoke `.refresh()` to [update the Payment Menu][operations] after any changes to the order. Below, you will see a complete overview of the payment menu process. Notice that there are two ways of performing the payment: * Consumer perform payment **out** of `iframe`. * Consumer perform payment **within** `iframe`. ```mermaid sequenceDiagram participant Consumer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Consumer note left of Consumer: Payment Menu Consumer ->>+ Merchant: Initiate Purchase deactivate Consumer Merchant ->>+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant -->>- Consumer: Display Payment Menu on Merchant Page activate Consumer Consumer ->> Consumer: Initiate Payment Menu Seamless View (open iframe) Consumer -->>+ SwedbankPay: Show Payment UI page in iframe deactivate Consumer SwedbankPay ->>+ Consumer: Do payment logic deactivate SwedbankPay opt Consumer perform payment out of iFrame Consumer ->> Consumer: Redirect to 3rd party Consumer ->>+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Consumer 3rdParty -->>+ Consumer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Consumer ->> Consumer: Initiate Payment Menu Seamless View (open iframe) Consumer ->>+ SwedbankPay: Show Payment UI page in iframe deactivate Consumer SwedbankPay ->> Consumer: Do payment logic end SwedbankPay -->> Consumer: Payment status deactivate SwedbankPay alt If payment is completed activate Consumer Consumer ->> Consumer: Event: onPaymentCompleted Consumer ->>+ Merchant: Check payment status deactivate Consumer Merchant ->>+ SwedbankPay: GET deactivate Merchant SwedbankPay ->>+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Consumer deactivate Consumer Merchant ->>+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Consumer Consumer ->> Consumer: Event: OnPaymentFailed Consumer ->>+ Merchant: Check payment status deactivate Consumer Merchant ->>+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay -->>+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Consumer deactivate Consumer Merchant ->>+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant -->>- Consumer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Consumer deactivate Consumer SwedbankPay ->> Merchant: POST Payment Callback end end ``` Now that you have completed the Payment Menu integration, you can move on to finalizing the payment in the [After Payment section][after-payment]. {% include iterator.html prev_href=\"checkin\" prev_title=\"Checkin\" next_href=\"capture\" next_title=\"Capture\" %} [after-payment]: after-payment [guest-payment-menu-image]: /assets/img/checkout/guest-payment-menu.png [login-payment-menu-image]: /assets/img/checkout/loggedin-payment-menu.png [swedish-guest-payment-menu-image]: /assets/img/checkout/swedish-guest-payment-menu.png [swedish-login-payment-menu-image]: /assets/img/checkout/swedish-logged-in-payment-menu.png [operations]: /checkout/v2/features/technical-reference/operations [technical-reference-onconsumer-identified]: /checkout/v2/checkin#step-2-display-swedbank-pay-checkin-module [urls]: /checkout/v2/features/technical-reference/urls#urls-resource",
    "tags": "",
    "url": "/checkout/v2/payment-menu.html"
  },{
    "title": "Abort",
    "text": "{% include payment-order-abort.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/payment-order-abort.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/payment-order-capture.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/payment-order-capture.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/payment-order-capture.html"
  },{
    "title": "Capture",
    "text": "{% include payment-order-capture.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/payment-order-capture.html"
  },{
    "title": "Update Payment Order",
    "text": "{% include update-payment-order.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/payment-order-update.html"
  },{
    "title": "Payment Order",
    "text": "{% include payment-order.md %} {% include view-payment-order.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payment-order.html"
  },{
    "title": "Payment Order",
    "text": "{% include payment-order.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payment-order.html"
  },{
    "title": "Payment Order",
    "text": "{% assign view_payment_order_javascript_url = \"{{ page.front_end_url }}/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token={{ page.payment_token }}&culture=sv-SE\"%} ## Step 1: Create Payment Order We start by performing a `POST` request towards the `paymentorder` resource in order to create a Payment Order. {% include alert-risk-indicator.md %} {% include alert-gdpr-disclaimer.md %} {% include payment-url.md payment_order=true when=\"selecting the payment instrument Vipps or in the 3-D Secure verification for Credit Card Payments\" %} ### Request {% include payment-order-purchase.md %} ### Response The response back should look something like this (abbreviated for brevity): {:.code-view-header} **Response** ```http HTTP/1.1 201 Created Content-Type: application/json { \"paymentorder\": { \"id\": \"/psp/paymentorders/{{ page.payment_order_id }}\" }, \"operations\": [ { \"href\": \"{{ view_payment_order_script_url }}\", \"rel\": \"view-paymentorder\", \"method\": \"GET\", \"contentType\": \"application/javascript\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :------------- | :------- | :--------------------------------------------------------------------------------- | | `paymentorder` | `object` | The payment order object. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md resource=\"paymentorder\" %} | | `operations` | `array` | The array of possible operations to perform, given the state of the payment order. | The `paymentorder` object is abbreviated since it's just the `id` and `operations` we are interested in. Store the `id` of the Payment Order in your system to look up status on the completed payment later. {% include alert.html type=\"informative\" icon=\"info\" header=\"URL Storage\" body=\"The `id` of the Payment Order should be stored for later retrieval. [Read more about URL usage](/introduction#uri-usage).\" %} Then find the `view-paymentorder` operation and embed its `href` in a ` ``` What happens inside `` should look something alike the following: {:.code-view-header} **JavaScript** ```js var request = new XMLHttpRequest(); request.addEventListener('load', function () { response = JSON.parse(this.responseText); var script = document.createElement('script'); // The JavaScript expects a JSON response looking like the created // Payment Order, containing the operation 'view-paymentorder. var operation = response.operations.find(function (o) { return o.rel === 'view-paymentorder'; }); script.setAttribute('src', operation.href); script.onload = function () { // Initialize the Payment Menu and inject it into the 'payment-menu' // container defined in the HTML document above. payex.hostedView.paymentMenu({ container: 'payment-menu', culture: 'sv-SE' }).open(); }; // Append the Payment Menu script to the var head = document.getElementsByTagName('head')[0]; head.appendChild(script); }); // You should replace the address here with your own backend endpoint. request.open('POST', '', true); request.setRequestHeader('Content-Type', 'application/json; charset=utf-8'); // We will send an object containing the amount the Payment Order should be // created with. This should of course not be hard coded and you may want to // send more data from the front-end to the back-end to create a Payment Order // for your particular use-case. request.send(JSON.stringify({ amount: 1200 })); ``` This should bring up the Payment Menu in a Seamless View. It should look like this, depending on whether the payer is identified (top) or a guest user (bottom): {:.text-center} ![Payment Menu with payer identified in and card payment opened][login-payment-menu-image]{:width=\"450\" height=\"900\"} {:.text-center} ![Payment Menu with guest payer and card payment opened][guest-payment-menu-image]{:width=\"450\" height=\"850\"} When the payer completes the payment, the Payment Menu script will be signaled and a full redirect to the `completeUrl` sent in with the Payment Order will be performed. When the `completeUrl` on your server is hit, you can inspect the status on the stored `paymentorder.id` on the server, and then perform `capture`. If the payment is a `Sale` or one-phase purchase, it will be automatically captured. A third scenario is if the goods are sent physically to the payer; then you should await capture until after the goods have been sent. You may open and close the payment menu using `.open()` and `.close()` functions. You can also invoke `.refresh()` to [update the Payment Menu][operations] after any changes to the order. Below, you will see a complete overview of the payment menu process. Notice that there are two ways of performing the payment: * Payer performs payment **out** of `iframe`. * Payer performs payment **within** `iframe`. {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that in this diagram, the Payer refers to the merchant front-end (website) while Merchant refers to the merchant back-end.\" %} ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay rect rgba(138, 205, 195, 0.1) activate Payer note left of Payer: Payment Menu Payer ->>+ Merchant: Initiate Purchase deactivate Payer Merchant ->>+ SwedbankPay: POST /psp/paymentorders (paymentUrl, payer) deactivate Merchant SwedbankPay -->>+ Merchant: rel:view-paymentorder deactivate SwedbankPay Merchant -->>- Payer: Display Payment Menu on Merchant Page activate Payer Payer ->> Payer: Initiate Payment Menu Seamless View (open iframe) Payer -->>+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay ->>+ Payer: Do payment logic deactivate SwedbankPay opt Payer perform payment out of iFrame Payer ->> Payer: Redirect to 3rd party Payer ->>+ 3rdParty: Redirect to 3rdPartyUrl URL deactivate Payer 3rdParty -->>+ Payer: Redirect back to paymentUrl (merchant) deactivate 3rdParty Payer ->> Payer: Initiate Payment Menu Seamless View (open iframe) Payer ->>+ SwedbankPay: Show Payment UI page in iframe deactivate Payer SwedbankPay ->> Payer: Do payment logic end SwedbankPay -->> Payer: Payment status deactivate SwedbankPay alt If payment is completed activate Payer Payer ->> Payer: Event: onPaymentCompleted Payer ->>+ Merchant: Check payment status deactivate Payer Merchant ->>+ SwedbankPay: GET deactivate Merchant SwedbankPay ->>+ Merchant: rel: paid-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if paid-paymentorder operation exist) activate Payer deactivate Payer Merchant ->>+ SwedbankPay: GET rel: paid-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end opt If payment is failed activate Payer Payer ->> Payer: Event: OnPaymentFailed Payer ->>+ Merchant: Check payment status deactivate Payer Merchant ->>+ SwedbankPay: GET {paymentorder.id} deactivate Merchant SwedbankPay -->>+ Merchant: rel: failed-paymentorder deactivate SwedbankPay opt Get PaymentOrder Details (if failed-paymentorder operation exist) activate Payer deactivate Payer Merchant ->>+ SwedbankPay: GET rel: failed-paymentorder deactivate Merchant SwedbankPay -->> Merchant: Payment Details deactivate SwedbankPay end end activate Merchant Merchant -->>- Payer: Show Purchase complete opt PaymentOrder Callback (if callbackUrls is set) activate Payer deactivate Payer SwedbankPay ->> Merchant: POST Payment Callback end end ``` {% include iterator.html prev_href=\"index\" prev_title=\"Introduction\" next_href=\"capture\" next_title=\"Capture\" %} [guest-payment-menu-image]: /assets/img/checkout/guest-payment-menu-450x850.png [login-payment-menu-image]: /assets/img/checkout/logged-in-payment-menu-450x900.png [operations]: /checkout/v2/features/technical-reference/operations",
    "tags": "",
    "url": "/payment-menu/payment-order.html"
  },{
    "title": "Payment Orders",
    "text": "{% include mobile-sdk-payment-order.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/core/payment-orders.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md api_resource=\"swish\" documentation_section=\"swish\" show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment Resource",
    "text": "{% include payment-resource.md show_status_operations=true %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payment-resource.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payment-state.html"
  },{
    "title": "Payment State",
    "text": "{% include payment-state.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payment-state.html"
  },{
    "title": "Transactions states",
    "text": "{% include payment-transaction-states.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payment-transaction-states.html"
  },{
    "title": "Transactions states",
    "text": "{% include payment-transaction-states.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payment-transaction-states.html"
  },{
    "title": "Transactions states",
    "text": "{% include payment-transaction-states.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payment-transaction-states.html"
  },{
    "title": "Transactions states",
    "text": "{% include payment-transaction-states.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payment-transaction-states.html"
  },{
    "title": "Payment and Transactions States",
    "text": "{% include payment-transaction-states.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payment-transaction-states.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md api_resource=\"swish\" documentation_section=\"swish\" full_reference=true %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/payment-url.html"
  },{
    "title": "PaymentUrl",
    "text": "{% include payment-url.md full_reference=true %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/payment-url.html"
  },{
    "title": "Payout",
    "text": "{% include payout.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/payout.html"
  },{
    "title": "Plain Webview",
    "text": "{% capture disclaimer %} This page is prodived for informational purposes only, and is not part of the Mobile SDK documentation proper. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} ## Quick Fix List Here is a list of common gotchas. Please read through the whole document, though. * On Android, you need to set `webView.settings.javaScriptEnabled = true` * On Android, you need to set `webView.settings.domStorageEnabled = true` (used by some 3D-Secure pages) * Web Views will not launch apps by themselves. You _must_ intercept navigations and launch apps yourself. See [External Applications](#external-applications) for details. * On Android, `@JavascriptInterface` methods only take primitive arguments. You will need to `JSON.stringify` any complex arguments. * Some 3D-Secure pages will not work if you open them in a Web View. This appears to be related to them launching an external application, which, in turn, opens a url in the browser app. See [Dealing with Picky Web Pages](#dealing-with-picky-web-pages) for strategies. * Some pages make use of Javascript dialogs. Web Views do not display these on their own; you must add support by your `WebCromeClient` or `WKUIDelegate`. * On Android, remember to call `webView.onResume()` and `webView.onPause()`. * Remember that you can debug Web View contents! ## The Mobile SDK And You A major goal for the Mobile SDK is to provide a platform where you can start developing your mobile e-commerce application rapidly, in a regular, native mobile application development workflow. Hence, it is designed to be a fairly self-contained whole, with a prescribed interface between the mobile client side and the backend server side. This, of course, means that to use the SDK, your backend must integrate with the SDK architecture. If you already have a working solution for web pages, this may not be ideal; indeed, you may wish to reuse your existing web page using Checkout or Payments, and expect to embed it inside your mobile application using a web view. Indeed, on a high level this is what the SDK mobile client components do, in addition to providing native Swift and Kotlin APIs to the servie. The SDK internally generates a web page that shows the Checkout payment menu, so the developer need not concern themselves with html or other web-specific technologies. An exisiting web implementation would not really benefit from the extra discoverability and quality-of-life improvements of a mobile-native API, so the SDK's value proposition seems to be little benefit for substantial reimplementation work. That said, there are important considerations in embedding a Swedbank-Pay-enabled web page in a web view; considerations, which have been taken into account in the development of the SDK. There are currently no plans to offer any first-party components to help with embedding an existing Swedbank Pay web page, but this page shall serve as best-effort documentation for anyone attempting such. ## Basics Let us assume that the urls of the payment are as follows: * `https://example.com/perform-payment` is the page containing the Payment Menu or Payment Seamless View, i.e. the `paymentUrl` * `https://example.com/payment-completed` is the `completeUrl` * `https://example.com/payment-canceled` is the `cancelUrl` Swedbank Pay payments use JavaScript, so that needs to be enabled: {:.code-view-header} **iOS** ```swift // WKPreferences.javaScriptEnabled is true by default, // so usually there is no need to to do this. // Other properties of WKWebViewConfiguration will be // needed for later steps, though, so it is good to have // it from the beginning. let configuration = WKWebViewConfiguration() configuration.preferences.javaScriptEnabled = true // Note: You can only set a configuration by using this initializer. // You cannot set a configuration in Interface Builder. let webView = WKWebView(frame: .zero, configuration: configuration) ``` {:.code-view-header} **Android** ```kotlin val webView = WebView(context) // or get it from a layout // WebSettings.javaScriptEnabled is false by default, // so failing to do this will result in the payment page not working. // Setting javaScriptEnabled to true causes a linter warning, // which can be suppressed with an annotation. webView.settings.javaScriptEnabled = true ``` Some pages use the DOM Storage API, which must be enabled separately on Android: {:.code-view-header} **Android** ```kotlin webView.settings.domStorageEnabled = true ``` With this setup, you can load to the web view the page that shows the Payment Menu or the Payment Seamless View, and see what happens. You should be able to see the Swedbank Pay payment interface, and in many cases also complete a payment. It is not unlikely, though, that some payment methods will not work as expected. Also, you will be more or less stuck after the payment is complete. {:.code-view-header} **iOS** ```swift let paymentUrl = URL(string: \"https://example.com/perform-payment\")! webView.load(URLRequest(url: paymentUrl)) ``` {:.code-view-header} **Android** ```kotlin webView.loadUrl(\"https://example.com/perform-payment\") ``` ## Completion There are two ways of being notified of payment completion: listening for navigations, or using JavaScript hooks. Which one you want to use is partly a matter of taste, but if your existing system does some processing in the `completeUrl` page, it may be easier to use JavaScript hooks. ### Listening for Navigations The iOS `WKNavigationDelegate` protocol and Android `WebViewClient` class can be used to listen for navigations, and change their behaviour. {:.code-view-header} **iOS** ```swift // This example uses Self as the delegate. // It could be a separate object also. webView.navigationDelegate = self ``` ```swift extension MyClass : WKNavigationDelegate { // WKNavigationDelegate methods } ``` {:.code-view-header} **Android** ```kotlin webView.webViewClient = object : WebViewClient() { // WebViewClient methods } ``` In the simplest case you could listen for a navigation to the `completeUrl` or `cancelUrl`, and intercept it. {:.code-view-header} **iOS** ```swift func webView( _ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void ) { switch navigationAction.request.url?.absoluteString { case \"https://example.com/payment-completed\": decisionHandler(.cancel) // Handle payment completion (success/failure) case \"https://example.com/payment-canceled\": decisionHandler(.cancel) // Handle payment cancellation default: decisionHandler(.allow) } } ``` {:.code-view-header} **Android** ```kotlin override fun shouldOverrideUrlLoading( view: WebView?, url: String? ): Boolean { return when (url) { \"https://example.com/payment-completed\" -> { // Handle payment completion (success/failure) true } \"https://example.com/payment-canceled\" -> { // Handle payment cancellation true } else -> false } } ``` If your `completeUrl`, or `cancelUrl` for that matter, do some processing and redirect further, you can adapt these patterns to listen to your custom urls instead. ### Adding JavaScript Hooks On both iOS and Android, it is possible to add custom JavaScript interfaces to a web view. These interfaces then result in callbacks to native (Swift/Kotlin/ObjC/Java) methods, where you can execute your application specific actions. To observe payment completion and cancellation this way, you need to modify your `completeUrl` and `cancelUrl` pages to call these mobile-app-specific JavaScript interfaces. How you do this is beyond our scope here. #### JavaScript Hooks: iOS On iOS, JavaScript interfaces are added through the `WKUserContentController` of the `WKWebView`. The `WKUserContentController` is set by the `WKWebViewConfiguration` used when creating the `WKWebView`; you cannot change the `WKUserContentController` of a `WKWebView`. You can, however, modify the `WKUserContentController` of a live `WKWebView`, if you want more fine-grained control on which interfaces are exposed at what time. {:.code-view-header} **iOS** ```swift let userContentController = webView .configuration .userContentController // Alternatively, add the script message handler(s) // to configuration.userContentController // before creating the WKWebView. // This example uses Self as the handler. // It could be a separate object also. userContentController.add(self, name: \"completed\") userContentController.add(self, name: \"canceled\") ``` ```swift extension MyClass : WKScriptMessageHandler { func userContentController( _ userContentController: WKUserContentController, didReceive message: WKScriptMessage ) { switch message.name { case \"completed\": // Handle payment completion (success/failure) case \"canceled\": // Handle payment cancellation } // the argument of the call is available at message.body } } ``` On iOS, the interfaces added by `WKUserContentController.add(_:name:)` are exposed in JavaScript as `window.webkit.messageHandlers..postMessage(body)`, so your `completeUrl` and `cancelUrl` pages would need to eventually execute code like ```js window.webkit.messageHandlers.completed.postMessage(\"success\") ``` ```js window.webkit.messageHandlers.canceled.postMessage() ``` #### JavaScript Hooks: Android {% include alert.html type=\"warning\" icon=\"warning\" header=\"Security Warning\" body=\"Never use `WebView.addJavascriptInterface` on Android versions earlier than 4.2 (`Build.VERSION_CODES.JELLY_BEAN_MR1`)!\" %} On Android, JavaScript interfaces are added by the `WebView.addJavascriptInterface` method. Any public methods with the `@JavascriptInterface` annotation of the passed-in object are exposed in JavaScript. {:.code-view-header} **Android** ```kotlin webView.addJavascriptInterface( MyJsInterface(), \"callbacks\" ) ``` ```kotlin class MyJsInterface { // IMPORTANT! // Methods annotated with @JavascriptInterface are // NOT called on the main thread. They are called on // a private, background, WebView thread. // Make sure to only call methods that are safe // to call in a background thread, or move execution to // the main thread, e.g. by ViewModel.viewModelScope // or LifecycleOwner.lifecycleScope (remember that // FragmentActivity and Fragment implement LifecycleOwner). @JavascriptInterface fun completed(status: String) { // Handle payment completion (success/failure) } @JavascriptInterface fun canceled() { // Handle payment cancellation } } ``` On Android, the objects added by `WebView.addJavascriptInterface` are exposed as globals with the specified name, and their `@JavascriptInterface public` methods with their JVM names (N.B! Be careful not to break the JVM names with Proguard or similar). Thus, your `completeUrl` and `cancelUrl` pages would need to eventually execute code like ```js callbacks.completed(\"success\") ``` ```js callbacks.canceled() ``` ## External Applications Before starting to implement lauching external applications, you should try to get at least one card payment working. With completion observing in place, you should be able to complete a payment flow, at least using the External Integration environment and its test cards. Sometimes, a payment flow calls for launching an external application, like BankID or Swish. A web page does this by opening a url that is handled by the app in question. To accommodate for this, we extend the \"Listening for Navigations\" approach above. If you opted for JavaScript hooks for completion, you will now need to add a navigation listener for external apps. Determining whether a url should launch an external app is straightforward, though on Android it involves a bit of a judgement call. Let us take a look at the arguably simpler iOS case first. ### External Applications: iOS You cannot query the system for an arbitrary url to see if it can be opened – this is a deliberate privacy measure. What can be done, and what also happens to be exactly what we want to do, is to attempt to open a url and receive a callback telling us whether it succeeded. Nowadays, the recommended way of opening external applications is to use Universal Links, anyway, which are, on the surface, indistiguishable from web links. {:.code-view-header} **iOS** ```swift func webView( _ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void ) { // Check for completeUrl and cancelUrl here, if applicable. if let url = navigationAction.request.url { openInExternalApp( url: url, decisionHandler: decisionHandler ) } else { // N.B. This should never happen. decisionHandler(.allow) } } private func openInExternalApp( url: URL, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void ) { // First, check for universal link UIApplication.shared.open( url, options: [.universalLinksOnly: true] ) { universalLinkOpened in if universalLinkOpened { // Url was opened in external app, so do not open it in WKWebView. decisionHandler(.cancel) } else { // Url was not opened in external app, see if WKWebView can handle it. if let scheme = url.scheme, WKWebView.handlesURLScheme(scheme) { // Regular http(s) url, proceed. decisionHandler(.allow) } else { // Custom-scheme url. Try to open it. UIApplication.shared.open(url) // Cancel the navigation regardless of the result, // as WKWebView does not know what to do with the url anyway. decisionHandler(.cancel) } } } } ``` ### External Applications: Android On Android, web pages attempting to launch external apps happens in one of three ways: * Custom-scheme links * Http(s) links matching a pattern * Intent-scheme links Each of these maps into an `Intent`. For custom-scheme and patterned http(s) links, that `Intent` has the original url as its `uri`, an `action` of `android.intent.action.VIEW`, and the categories `android.intent.category.BROWSABLE` and `android.intent.category.DEFAULT`. An `Intent` created from an intent-scheme url can have any `action` and categories, although they too should have an implicit `android.intent.category.BROWSABLE` category. Their `uri` is parsed from the intent-scheme url, but we need not trouble ourselves with the specifics here. On Android we can, and indeed should, query the system whether it can launch Activities from arbitrary Intents. We should note, however, that an Android system is likely to have an app that accepts all http(s) url, namely the browser. Hence, we should exercise a bit of discretion when choosing to launch activities in place of web view navigations. {:.code-view-header} **Android** ```kotlin override fun shouldOverrideUrlLoading( view: WebView?, url: String? ): Boolean { // Check for completeUrl and cancelUrl here, if applicable. if (url == null) return false // should never happen val uri = Uri.parse(url) if (openInExternalApp(uri)) { return true } else { // uri was not opened in a external app. // Let WebView take care of it, if it is // a normal http(s) url. return when (uri.scheme) { \"http\", \"https\" -> false else -> true } } } private fun openInExternalApp(uri: Uri): Boolean { when (uri.scheme) { \"intent\" -> { openIntentUri(uri) // intent uris are always intercepted, // as WebView cannot handle them anyway return true } else -> { return openRegularUri(uri) } } } private fun openIntentUri(uri: Uri) { val intent = try { Intent.parseUri( uri.toString(), Intent.URI_INTENT_SCHEME ) } catch (_: URISyntaxException) { return } // Web pages should only be allowed to start activities // with CATEGORY_BROWSABLE. intent.addCategory(Intent.CATEGORY_BROWSABLE) if (canStartActivity(intent)) { try { startActivity(intent) } catch (_: Exception) { // Could not start activity. // There is little we can do here. } } else { openIntentUriFallbackUrl(intent) } } private fun openIntentUriFallbackUrl(intent: Intent) { val fallbackUrl = intent.getStringExtra(\"browser_fallback_url\") if (fallbackUrl != null) { val fallbackIntent = Intent( Intent.ACTION_VIEW, Uri.parse(fallbackUrl) ).addCategory(Intent.CATEGORY_BROWSABLE) if (canStartActivity(fallbackIntent)) { try { startActivity(fallbackIntent) } catch (_: Exception) {} } } } private fun openRegularUri(uri: Uri): Boolean { val intent = Intent(Intent.ACTION_VIEW, uri) .addCategory(Intent.CATEGORY_BROWSABLE) val resolveInfo = resolveActivity(intent) val shouldStartActivity = resolveInfo != null && when (uri.scheme) { \"http\", \"https\" -> shouldStartActivityForHttpUri(uri, resolveInfo) else -> true } if (shouldStartActivity) { try { startActivity(intent) return true } catch (_: Exception) {} } return false } private fun resolveActivity(intent: Intent): ResolveInfo? { return packageManager.resolveActivity( intent, PackageManager.MATCH_DEFAULT_ONLY ) } private fun canStartActivity(intent: Intent): Boolean { return resolveActivity(intent) != null } private fun shouldStartActivityForHttpUri( resolveInfo: ResolveInfo ): Boolean { // Only open http(s) links in external apps // if the intent filter is a \"good\" match. // Requiring a matching host in the intent filter // is the most reasonable generic choice, but // you can exercise more fine-grained control here // if you wish. val matchCategory = resolveInfo.match and IntentFilter.MATCH_CATEGORY_MASK return matchCategory >= IntentFilter.MATCH_CATEGORY_HOST } ``` ## Getting Back from External Applications In some cases on Android, getting back from the external application requires no further setup. In particular, this is the case with BankID, if the web page launches it in the recommended manner. In other cases, including any scenario on iOS, the external app will attempt to return to the payment by opening the `paymentUrl`. Assuming the `paymentUrl` is an https url, it would normally be opened in the browser application (usually Safari or Chrome), so we need to build a system that gets it back to the application where the payment is being processed in a web view. ### Using a Custom-Scheme paymentUrl Perhaps the simplest way of making `paymentUrl` open in the application is to make it a custom-scheme url rather than an https url. This does come with a few disadvantages, though: * On iOS, the system will show a confirmation popup, which cannot be customized, before opening a custom-scheme url * Related to the above, there is no way of making sure your application is the only one installed that handles the scheme * `paymentUrl` is passed to systems outside Swedbank Pay; systems that may only be compatible with http(s) urls It is somewhat of a Quick and Dirty solution. We do not recommend this approach. ### iOS: Make paymentUrl a Universal Link On iOS, the recommended way of assigning urls to apps is to use [Universal Links][ios-universal-links]. This fits our use-case quite well, and indeed it is what the SDK is designed to do too. When an external app executes the `UIApplication.shared.open(\"https://example.com/perform-payment\")`, then, assuming Universal Links are configured correctly, that url will not be opened in Safari, but will instead be opened in the application. You must then examine the url, determine that it is a `paymentUrl` from your app, and reload the `paymentUrl` in your web view. The payment process should then continue normally. Make sure that any navigation listeners and JavaScript hooks are in place before loading the `paymentUrl`. Now, Universal Links depend on correct configuration, and during development you may find yourself with a broken configuration from time to time. But perhaps even more importantly, Universal Links cannot really be 100% guaranteed to work every time. Please see the iOS SDK documentation for some discussion, but also note that even with correct configuration, the system could fail to retrieve your apple-app-site-association file for any given installation, which could render your universal links temporarily inoperable on that device. This means that your `paymentUrl` needs to show some sensible content in case it is opened in Safari. There are a few ways of going at this, but one possibility, assuming you have a working implementation for web in place, is to show your regular payment page, allow the payment to complete there, and then try to launch your application, perhaps by a custom-scheme url, or a universal link to a separate domain. Take a look at [what the SDK does][sdk-paymenturl] to not be trapped by unhappy circumstances. Note that the Universal Links documentation is not explicit on which `UIApplicationDelegate` method is called when an application opens a universal link with `UIApplication.open(_:options:completionHandler:)` (i.e. `application(_:open:options:)` or `application(_:continue:restorationHandler:)`). It is probably best to implement both. Universal Links opened from Safari will callback to `application(_:continue:restorationHandler:)`. ### Android: Add an Intent Filter for paymentUrl Android has always supported apps handling urls matching a pattern. Therefore, it seems sensible to just create an intent filter matching any `paymentUrl` you might create. As `paymentUrl`s are entirely under your control, you can design a system where they fit a pattern that can be realized as an intent filter. You then receive the url in the relevant app component in the normal manner, and proceed to reload the `paymentUrl` in your web view. The payment process will then continue normally. The downsides of this are: * You are restricted in how you can change the way you form `paymentUrl`s * There are other apps that can also handle the `paymentUrl`, namely the browser Because of the latter, when an external application opens `paymentUrl`, there are three things that can happen: * `paymentUrl` is opened in your app * `paymentUrl` is opened in another app, e.g. Chrome * an app chooser is shown The second one is obviously undesirable. The last one is also not great. The user is not expecting to \"open a url\", and may well make the \"wrong\" choice here, and it is anyway a bad user experience. #### Autoverify to the Rescue? Since Android 6.0 it has been possible to use a [mechanism][android-autoverify] very similar to Apple's Universal Links to \"strongly\" assing http(s) urls to applications. This works by adding an `android:autoVerify=\"true\"` attribute to the intent filter, plus a `.well-known/assetlinks.json` file to the server. This could solve the problems above, but it has its own issues, namely: * Requires Android 6.0 * Is really quite cumbersome to setup The SDK does not use this method. ### Android: Have paymentUrl Redirect to an Intent Url Another option on Android is to allow the https `paymentUrl` to be opened in Chrome normally, but have that url redirect to an [intent url][android-intent-scheme]. That intent url can be made specific to your application, making it so that unless the user has installed an application with the same package id (from a non-Google-Play source, presumably), it will always be opened in your app. This is what the SDK does. The SDK does this by having `paymentUrl` return an html page that immediately redirects. In some cases the redirect will be blocked, so the page also contains a link to the same url, so the user can manually follow the redirect. Now, as here we seem to want to have `paymentUrl` be the url loaded in the WebView, this does not work out-of-the-box. One option is to override `shouldInterceptRequest` in your `WebViewClient`, and special-case the loading of `paymentUrl`. Another solution could be loading `paymentUrl` normally, but adding a script to the page that checks for a JavaScript interface you provide in the WebView, and it is not there, then it would issue the redirect to the intent url. For reference, the way the SDK handles `paymentUrl`s on Android looks like this from the perspective of the backend: {:.code-view-header} **Request** ```http GET /perform-payment HTTP/1.1 Host: example.com ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: text/html Swedbank Pay Payment Back to app ``` It uses an action defined by the SDK, and the package name of the containing application, making sure the intent is routed to the correct application, and to the correct SDK component. Note that the uri of the resulting intent is the `paymentUrl`. ## Dealing with Picky Web Pages Testing has shown, that on iOS some 3D-Secure pages do not like being opened in a web view. It does seem that this is mostly related to BankID integrations. We believe the problem stems from a configuration that sets a cookie in the browser, launches BankID, then BankID opens a different web page (not the `paymentUrl`), which expects to find that cookie. Now, if the first page was opened in a web view, the cookie is in that web view, but as the second page will be opened in Safari, the cookie will be nowhere to be found. Furthermore, at least in one instance, the original page in the web view will not receive any notification on the BankID process, despite being launched from there. We have not encountered this on Android, but it is quite possible for a similar situation to happen there also. Now, all of the above is speculation, and not really worth getting too deep into. The end result, however, is that some 3DS pages must be opened in Safari on iOS. The jury is still out if the same is true on Android. As we already have a way of getting back to the app (ref. `paymentUrl`), the simple thing to do would be to open any url not tested to work in Safari. Unfortunately, matters are further complicated by some pages not working if we do _that_. The two pages found in testing are now added to the list of known good pages (as the do work in the web view), but others may be out there. The current best solution is therefore to open the _current_ page in Safari if it tries to navigate to an unknown page. This is what the SDK does: if it encounters a navigation that does not match the goodlist, it will take the current page url of the web view, and open that with `UIApplication.shared.open(url)` and call the `decisionHandler` with `.cancel`. (It will never happen in practice, but if the payment menu would be the current page in this situation, it will load the new url instead). The payment will eventually navigate to `paymentUrl` in Safari, and should return to the app. It should be noted, though, that in many cases the initial navigation to `paymentUrl` will be opened in Safari instead of the app in these cases. This acerbates the need for fallback mechanisms. The iOS (and possibly Android) SDKs will contain a list of known-good 3DS pages. Feel free to use this as a resource in your own implementation. {% include iterator.html prev_href=\"process-diagrams\" prev_title=\"Process Diagrams\" %} [ios-universal-links]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content [sdk-paymenturl]: /modules-sdks/mobile-sdk/ios#payment-url-and-external-applications [android-autoverify]: https://developer.android.com/training/app-links/verify-site-associations [android-intent-scheme]: https://developer.chrome.com/multidevice/android/intents",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/plain-webview.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/prices.html"
  },{
    "title": "Prices",
    "text": "{% include prices.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/prices.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include mobile-sdk-problems.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/problems.html"
  },{
    "title": "Problems",
    "text": "{% include problems/problems.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/problems.html"
  },{
    "title": "Process Diagrams",
    "text": "{% capture disclaimer %} The SDK is at an early stage of development and is not supported as of yet by Swedbank Pay. It is provided as a convenience to speed up your development, so please feel free to play around. However, if you need support, please wait for a future, stable release. {% endcapture %} {% include alert.html type=\"warning\" icon=\"warning\" header=\"Unsupported\" body=disclaimer %} ## Initialization To use the SDK, you must have a valid `Configuration` for it. The API for this is a bit different in Android and iOS, but generally you will only need one `Configuration` for your app. On Android set it to `PaymentFragment.defaultConfiguration`; on iOS store it in a convenient variable. If you are using a backend implementing the Merchant Backend API, there is a Configuration ready for you in the SDK. If you are designing your own backend API, you will need to create the Configuration yourself. ```mermaid sequenceDiagram alt Using Merchant Backend alt Android App ->> SDK: MerchantBackendConfiguration.Builder(backendUrl)...build() SDK -->> App: configuration App ->> SDK: PaymentFragment.defaultConfiguration = configuration else iOS App ->> SDK: SwedbankPaySDK.MerchantBackendConfiguration.init(backendUrl: backendUrl) SDK -->> App: configuration end else Using Custom Backend alt Android App ->> App: class MyConfiguration : Configuration() App ->> SDK: PaymentFragment.defaultConfiguration = configuration else iOS App ->> App: struct/class MyConfiguration : SwedbankPaySDK.Configuration end end ``` When you want to make a payment, create a `PaymentFrament` or `SwedbankPaySDKController`. `SwedbankPaySDKController`'s designated initializer takes all the required arguments; for `PaymentFrament` you should use `PaymentFragment.ArgumentsBuilder` to create the arguments bundle. The meaning of the arguments depends on your Configuration. If you are using `MerchantBackendConfiguration`, you will always need a `PaymentOrder` argument. A very important part of the `PaymentOrder` is the `urls` field. The SDK has convenience methods for creating one; unless your use-case is advanced, you should use these. On Android use the `PaymentOrderUrls(context, backendUrl, [callbackUrl], [termsOfServiceUrl])` constructor; on iOS use the `PaymentOrderUrls.init(configuration:language:[callbackUrl:][termsOfServiceUrl:])` initializer. In both cases the convenience method depends on your `MerchantBackendConfiguration` (`backendUrl`is part of the `MerchantBackendConfiguration`), so be careful if you have multiple MerchantBackendConfigurations in your app. Additionally, you may construct a `Consumer` if you wish to identify the payer. This enables saving payment details for further payments. If you are using a custom Configuration, you may use the `PaymentOrder` or `Consumer` arguments if you wish. Additionally you can use a generic data argument (of type `Any`, though on Android it must implement either `Parcelable` or `Serializable`). By default, the existence of the `Consumer` argument controls whether the consumer identfication happens, but you can also specify it explicitly. ```mermaid sequenceDiagram participant User participant App participant SDK User ->> App : Begin payment rect rgba(138, 205, 195, 0.1) note right of App: Build Payment Order alt Android App ->> SDK: PaymentOrder(...) or PaymentOrder.Builder()...build() SDK -->> App: paymentOrder else iOS App ->> SDK: SwedbankPaySDK.PaymentOrder.init(...) SDK -->> App: paymentOrder end end opt Build Consumer alt Android App ->> SDK: Consumer(...) SDK -->> App: consumer else iOS App ->> SDK: Consumer.init(...) SDK -->> App: consumer end end rect rgba(138, 205, 195, 0.1) note right of App: Create and configure payment UI component alt Android App ->> SDK: PaymentFragment.ArgumentsBuilder()...build() SDK -->> App: arguments App ->> SDK: PaymentFragment() SDK -->> App: paymentFragment App ->> SDK: paymentFragment.arguments = arguments App ->> SDK: activity.paymentViewModel.[rich]state.observe(...) else iOS App ->> SDK: SwedbankPaySDKController.init(...) SDK -->> App: swedbankPaySDKController App ->> SDK: swedbankPaySDKController.delegate = ... end end App ->> App : Show payment UI component ``` ## Merchant Backend: Discover Endpoints This is an implementation detail of the Merchant Backend configuration; it is not necessary to replicate this step in a your own systems. The Merchant Backend is specified with a single static entry point; other interfaces are accessed by following links from previous responses. A request to the static entry point currently returns links to the `consumers` and `paymentorders` endpoints. In most cases the response to this request can be cached, and thus only needs to be made once per App session. ```mermaid sequenceDiagram participant SDK participant Backend SDK ->> Backend: GET / Backend -->> SDK: { \"consumers\": \"[consumers]\", \"paymentorders\": \"[paymentorders]\" } ``` ## Optional Checkin Optionally, the payment beings with a \"checkin\" flow, where the payer is identified. This allows for saving payment details for later payments. The checkin flow is simple: first a request is made to begin a checkin session, then an html page is constructed using the script link received from that request, and when that page successfully identifies the payer, a javascript callback is received. The `consumerProfileRef` received from that callback is then used when creating the payment order in the next step. ```mermaid sequenceDiagram participant Conf as Configuration participant SDK participant Backend participant SwedbankPay as Swedbank Pay participant WebView participant User SDK ->> Conf: postConsumers alt Merchant Backend Conf ->> Backend: POST [consumers] { \"operation\": \"initiate-consumer-session\", ... } else Custom Backend Conf ->> Backend: Custom protocol end Backend ->> SwedbankPay: POST /psp/consumers/ { \"operation\": \"initiate-consumer-session\", ... } SwedbankPay -->> Backend: { \"operations\": [{ \"rel\": \"view-consumer-identification\", \"href\": \"[consumer-script]\" }] } alt Merchant Backend Backend -->> Conf: { \"operations\": [{ \"rel\": \"view-consumer-identification\", \"href\": \"[consumer-script]\" }] } else Custom Backend Backend -->> Conf: Custom protocol end Conf --> SDK: ViewConsumerIdentificationInfo SDK ->> WebView: ......payex.hostedView.consumer(...)... WebView ->> User: Show checkin UI User ->> WebView: Enter personal details WebView ->> SDK: onConsumerIdentified({ \"consumerProfileRef\" : \"...\" }) SDK ->> SDK: store consumerProfileRef for checkout ``` ## Begin Checkout With the Payment Order ready, the SDK begins the \"checkout\" flow, where the actual payment is made. The checkout flow begins similarly to the checkin flow: a request is made to create a Payment Order, then an html page is constructed and displayed to the user. In the case of the \"create Payment Order\" request, however, it is expected that the Merchant Backend processes the request and response: Setting of `payeeId` and `paymentReference` in particular seems better left to the backend; similarly the backend is probably interested in storing the `id` of the created Payment Order for capture and other possible operations. At this point the user is interacting with the payment menu; the next step depends on the exact payment method chosen. ```mermaid sequenceDiagram participant Conf as Configuration participant SDK participant Backend participant SwedbankPay as Swedbank Pay participant WebView participant User SDK ->> Conf: postPaymentorders alt Merchant Backend Conf ->> Backend: POST [paymentorders] { paymentorder: {...} } else Custom Backend Conf ->> Backend: Custom protocol end Backend ->> Backend: Preprocess payment order (e.g. create payeeReference) Backend ->> SwedbankPay: POST /psp/paymentorders/ { paymentorder: {...} } SwedbankPay -->> Backend: { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... } Backend ->> Backend: Postprocess payment order (e.g. store id) alt Merchant Backend Backend -->> Conf: { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... } else Custom Backend Backend ->> Conf: Custom protocol end Conf -->> SDK: ViewPaymentOrderInfo SDK ->> WebView: ......payex.hostedView.paymentMenu(...)... WebView ->> User: Show checkout UI User ->> WebView: Choose payment method and enter details ``` ## External Content While some payments may be completed inside the payment menu in their entirety, others will require interaction with some external web page, and/or application. In most cases external web pages can be opened in the same web view used to show the payment menu, and when they want to return to the payment menu, they signal this by attempting to navigate to the url set as `paymentUrl` in the Payment Order. We intercept this navigation, and reload the payment menu, as appropriate. When an external application is launched, the flow signals the return to the payment menu by again opening `paymentUrl`. This time, however, we cannot intercept it. The system then handles opening that url the usual way. For maximum compatibility, `paymentUrl` is a regular https url. On iOS, `paymentUrl` is designed to be in format that is registered as a [Universal Link][ios-universal-links] to the app, which causes the system to open `paymentUrl` in the app. The example backend serves a `/.well-known/apple-app-site-association` file that assigns the paths under `/sdk-callback/` to be Universal Links to the application set in the configuration. The SDK defaults to building `paymentUrl` under this path. Combined with the proper configuration in the app and backend, this makes `paymentUrl`s be Universal Links. On Android 6.0 and later it is possible to do a similar thing, but it is much more difficult to set up on the server side, and we need a solution for earlier versions anyway. Therefore, on Android, `paymentUrl` will be opened in the browser. Finally, in our testing, we have seen that certain external pages used with certain payment instruments do not work correctly inside a web view, and must be shown in the browser instead. If we determine that the external page is one of these pages, it is opened in the browser. Again, return to the payment menu is signaled by a navigation to `paymentUrl`, which will, in this case be opened in the browser on both platforms (but see below for iOS details). ```mermaid sequenceDiagram participant App participant SDK participant WebView participant System participant Browser participant Ext as External App participant User WebView ->> SDK: Navigate to another page alt Navigation is to a regular http(s) URL SDK ->> SDK: Check web view compatibility alt Compatible with Web Wiew SDK ->> WebView: Proceed with navigation normally ① WebView ->> SDK: Navigate to paymentUrl ② SDK ->> SDK: Recognize paymentUrl SDK ->> WebView: Cancel navigation else Not Compatible with Web Wiew SDK ->> WebView: Cancel navigation SDK ->> System: Open URL System ->> Browser: Open URL in Browser User ->> Browser: Handle external flow Browser ->> User: Handle external flow Browser -> Browser: Open paymentUrl in Browser end else Navigation is to an app-specific URL (custom scheme, Android Deep Link/App Link, iOS Universal Link) SDK ->> WebView: Cancel navigation SDK ->> System: Open URL System ->> Ext: Launch URL-appropriate app User ->> Ext: Handle external flow Ext ->> User: Handle external flow Ext ->> System: Open paymentUrl alt Android System ->> Browser: Open paymentUrl in Browser ③ else iOS System ->> App: Launch app with paymentUrl ④ end end ``` * ① The same check is repeated for any further navigation inside the WebView * ② All properly configured authentication flows must end up here * ③ On Android, paymentUrl is an https URL that redirects to an Android Intent URL. * ④ On iOS, paymentUrl is a Universal Link. When an app open a Universal Link to another app, it should be routed to that app instead of the Browser. However, Univeral Links are finicky things, and it is not impossible that it gets opened in the Browser instead. In that case, the flow continues with \"paymentUrl opened in Browser\" below instead. ### Return from Browser If the external flow ended with `paymentUrl` opened in the browser, we need a way to get back to the app. On Android, this is simple to accomplish by redirecting to an [Android Intent Uri][android-intent-scheme]; the SDK and backend work together to construct the Intent Uri to point to the correct app. This Intent will cause the app to be brought back into focus, and the PaymentFragment will recognize the `paymentUrl` and reload the payment menu. We still need to have an actual html page served at `paymentUrl`, though, as the redirect may be blocked in some scenarios. If that happens, the page will also contain a link the user can tap on, which opens the same Intent Uri. On iOS, the situation is more complicated. As mentioned above, `paymentUrl` is a Universal Link, and navigation to it should be routed to the app. However, Universal Links are a bit unreliable, in that they require certain conditions to be fulfilled; otherwise, they are opened in the browser like regular links. Unfortunately, one of the conditions, namely that the navigation originated from the user pressing on a link, is often not fulfilled in the external pages used by payment methods. Therefore, we must have a system that works correctly, even if `paymentUrl` is opened in the browser. On iOS, we use the following system: * `paymentUrl` redirects (301) to a trampoline page hosted at a different domain * the trampoline page has a button * pressing that button navigates to `paymentUrl` but with an extra parameter * `paymentUrl` with the extra parameter redirects to a custom-scheme url The trampoline page is on a different domain due to another requirement of Universal Links: they are only routed to the app if opened from a different domain. Now, both `paymentUrl` and `paymentUrl` with the extra parameter are Universal Links, and as the second navigation is \"forced\" to originate from User Interaction, it should be routed to the app. However, if something still goes sideways, and experience says it can, and even this \"augmented\" `paymentUrl` is opened in the browser, then we finally redirect to a custom-scheme url, which has no choice but to be routed to the app. The reason we do not do this immediately is because using custom schemes triggers a confirmation dialog the developer has no control over, and we want to avoid that. When the app is then launched with `paymentUrl`, the augmented `paymentUrl`, or the custom-scheme url constructed from `paymentUrl`, the Application Delegate must then forward the url to the SDK using the SwedbankPaySDK.open(url:) or SwedbankPaySDK.continue(userActivity:) method, as the case may be. The SDK will then proceed to reload the payment menu as appropriate. This system does have the drawback of requiring a custom url scheme, which will almost always be left unused. As we gather more data, we may be able to remove the requirement in the future. Please see this diagram for an illustration of the different steps in the process: ```mermaid sequenceDiagram participant User participant Browser participant Backend participant Trampoline as Universal Link Trampoline participant System participant SDK participant App alt Android Browser ->> Merchant: Load paymentUrl Merchant -->> Browser: Html document that redirects to an Intent URL ⑤ Browser ->> Browser: Parse Android Intent URL Browser ->> System: Start activity with the parsed Intent, where the Intent Uri is paymentUrl System ->> SDK: Start callback activity SDK ->> SDK: Recognize paymentUrl else iOS alt Happiest Path Browser ->> Browser: Recognize that paymentUrl is a Universal Link for App Browser ->> System: Launch app with paymentUrl ⑥ else Less Happy Path Browser ->> Merchant: Load paymentUrl Merchant -->> Browser: 301 Moved Permanently ⑦ Browser ->> Trampoline: Load trampoline page Browser ->> User: Show trampoline page ⑧ User ->> Browser: Press \"Return to App\" button Browser ->> Browser: Navigate to paymentUrl&fallback=true alt Less Happy Path (contd.) Browser ->> Browser : Recognize that paymentUrl&fallback=true is a Universal Link for App Browser ->> System : Launch app with paymentUrl&fallback=true else Sad Path ⑨ Browser ->> Merchant: Load paymentUrl&fallback=true Merchant -->> Browser: 301 Moved Permanently ⑩ Browser ->> User: Show confirmation dialog User ->> Browser: Accept app launch Browser ->> System: Launch app with customscheme://[paymentUrl-without-scheme]&fallback=true end end System ->> App: Call URL handler ⑪ App ->> SDK: SwedbankPaySDK.open(url:) or SwedbankPaySDK.continue(userActivity:) SDK ->> SDK: Recognize paymentUrl or modified paymentUrl end ``` * ⑤ `intent://[paymentUrl-without-scheme]/#Intent;scheme=[paymentUrl-scheme];action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=[app-package];end;` * ⑥ Universal Links have certain conditions for them to be activated. One of these is that the navigation must have started from a user interaction. As many 3D-Secure pages have an automatic redirect, this can cause the link to be opened in the Browser instead. Therefore the chance for this path to be taken is low. (N.B. It does seem than iOS 13.4 has made some change to the logic, causing this happiest path to be hit more often.) * ⑦ Location: `https://ecom.stage.payex.com/externalresourcehost/trampoline?target=paymentUrl%26fallback=true` * ⑧ The \"Trampoline Page\" has a button, which links back to paymentUrl, but with an additional query parameter (actually this extra parameter is added by the backend when generating the redirect to the trampoline page). Importantly, the Trampoline is on a different domain than paymentUrl, as Universal Links are only forwarded to the app if they are opened from a different domain than the link's domain. * ⑨ All cases should be caught by one of these two flows. However, Universal Links remain finicky, and therefore it is good to provide one final fallback. * ⑩ Location: `customscheme://[paymentUrl-without-scheme]&fallback=true`. `customscheme` is a URL scheme unique to the App. * ⑪ Universal links result in a call to `UIApplicationDelegate.application(_:continue:restorationHandler:)`, while custom-scheme links result in a call to `UIApplicationDelegate.application(_:open:options:)`. ## Payment Completion When the payment is completed, possibly after reloading the payment menu after a navigation to `paymentUrl`, the payment menu will report success by attempting to navigate to `completeUrl`. The SDK intercepts this and invokes a callback to your app. It is your app's responsibility to then remove the payment UI from view and notify the user. Similarly, if the payment is canceled, the SDK intercepts the navigation to `cancelUrl` and reports the cancellation status to your app. ```mermaid sequenceDiagram participant User participant App participant SDK participant WebView SDK ->> WebView: Reload ......payex.hostedView.paymentMenu(...)... WebView ->> SDK: Navigate to completeUrl SDK ->> WebView: Cancel navigation alt Android SDK ->> SDK: PaymentViewModel.state > App: Observer.onChanged(SUCCESS) else iOS SDK ->> App: SwedbankPaySDKDelegate.paymentComplete() end App ->> App: Remove payment UI component App ->> User: Report payment result ``` {% include iterator.html prev_href=\"other-features\" prev_title=\"Back: Other Features\" next_href=\"plain-webview\" next_title=\"Using a Web View Instead\" %} [android-intent-scheme]: https://developer.chrome.com/multidevice/android/intents [ios-universal-links]: https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/process-diagrams.html"
  },{
    "title": "Public Migration Key",
    "text": "* **Key size**: 4096 bits * **RealName**: `SwedbankPay` * **UserID**: `SwedbankPay ` * **Fingerprint**: `49BE 1843 4104 3DC6 DB36 9F77 67F0 0E68 7F80 104A` * **Key ID**: `67F0 0E68 7F80 104A` To encrypt files with Swedbank Pay's Public Migration Key, you need copy and paste it from below and save it to a file called `SwedbankPay.key`. {:.code-view-header} **Public Key** ```text -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBF9kf58BEADlsQpmtsDwieUC/Zw0Vrfsc5/wT3BpIwJoMEK5YkjwrX4vx3yC pVi7+fJgpZ8DZjmkZf+i5MiFCbS8myJ/2een3ngOhEoMVjbWP01nQbW4MVoGL1yk nB3TOs/oC6xg/Aa0WlpOTrqoSvXLtrUKnWySmXgCBiUVKBaN1rfHYS4A39AXlL/H g1n1OiW4u9psgJk3GRBXXV2WE+J+qMuDUI1kwj+IbB/CDCXJ0ULXHHLY3QoSmAoy zRAJzq470jcrygaotgXvFmq3HJxXTquonxDtXXr7GqctsFVAeXvJM9JHZoOP/t3/ lvZiiNQU42yfzOZJkNXoyPopsdWHynBUiAEy3GQdjwapgRIO2Jm6LDuWUI98n+mI 5dXrTVGXKzoqzBFMdvJ8GBMMeGBW8WxjWF8eiqI5foMex8GS150aor930VIFlOk/ PapmhjXEjvmR7fNuNqeD23CtSR+/vViD7VnCmpVtwvPiQlIFsPy94Se6IL0Rnxke iStodqloOXbxtYAzTEcdxZykm6NK6UTyB1kL0h4+2D32p7FRXdbYhXj6nUF1THaO X/EaNThP+8m3eoeiVIDYW3TPAfVwFfWFSVOc1HG3osSPZ9TkneBlzglhQKkvyTcq yxvnhIpS3k8lvKoUllx6H6TWndAD3aLXvv7wS3UugCuCzUzK9yAy0+YXNQARAQAB tCRTd2VkYmFua1BheSA8c3VwcG9ydC5lY29tQHBheWV4LmNvbT6JAk4EEwEIADgW IQRJvhhDQQQ9xts2n3dn8A5of4AQSgUCX2R/nwIbAwULCQgHAgYVCgkICwIEFgID AQIeAQIXgAAKCRBn8A5of4AQShebEADJ9cfBbgNQb9IydtM2Nz+KClwO9sHls7vh XQL0C7m2CRNGa2efSyqYpSoieXoDi+2nOT079aI8bfqK0TQr9F2Ygy1udPrAzOER xxBPIMfGbWnkiE1L6e1apVXy1EBmxnN3l6SK70iJ7bfQzddQjVn1FvNlPL6Iqim5 FNsK7wf+4TR20BjrYfTJ8/5ANQGl9vdqTqsEih1i3M1Td4cUhRrs4Q0vsxeiSwcJ 8lcZ9vTEvumJXIF2JJlN1y7hGINgHlpOYV6HpxkZcl4akXv0AtqHem4+FGR8xFnI XYhR0vaPSx6b2PPWGjIRuUqfSW271pZn4aPh55aJzxhe7md+zLwjU2/pbtqgIrBm BB8zmYT6N7GByLSqPlFxZJLf3CJT47vXzX6CqWxQZyVE4XdexYEG9ZHUc2hsrBEP Cn130r7qMArGWg7PCDQ3SQmWzjetgqb4LJNv1M5skNDEG9IOXeMAgu1NGQlSbR4I Wwspc+SdicXk/s19vdY+aQTCSQmqWiD/oNUy8UI9JruiX3aLzlYCjr9lhfLY0eYw UIRWgugbOwJTLM0Cth2OWAc8vPBaFXRpptL0UuzvcJAklLdmX40ataH1EznqFsaf qk52sqiyzX1qSUp6C3JkBrZioHUoo3eggPFFLJJF18ViCNhLGRhCVNx3jY5u+7BF 0Ojs1omadLkCDQRfZH+fARAAzh3fVoxL1xALjcPgwJjkZG0nmwFo7xDmw3makyzx ptNfRZrW/7xgN9V5txCMEe6A1ztUSPZe6AxKDkNADjfKRc+IV2gd/Nk3rVec7jHV WSvFCPm59NzoWT08F380AfMQtvddyq/ZfOrfg/HgdoXr0Uzz+SoPBqXueK+m7xYl zTsJ/5JJvU8ujlsFJSjXFVomyu6+I0+kECDWip/FcwbQWMlfYNHMFMa6mW13rE1y 1XDILnlnULIEx7do0fZxEUSmX8zRHrYRb9M4Iwe/azvBuYFYRtr2ZKcYfH+tYafp IXwOqlCUwwMNdufJ8XnGywARC2uMtSW5K1lr3UoJBgUbUV+llJ/oqhUaOUHYjw6F UXHScC7MYphYbz87M8HnTdZ6RJ6puRgVSIfWoHMVHSLsDyKUh6yrf5CYUOd/GTFu xxcJywmpKemYYin4Uv6N9Uy2gt8bXuz9km0KS7jG1wXqS0QH/Bdg6k2UBnBfDEHi tNf2XQ8hHr+GP3wmzhtmcGi0TcRk8K+H02NZoKiH88cjCwmyW9QIPM8BgwaJKiM2 pWUZ4rz1KVKtfLJp0nVCS/JlWsWyAhAEkrEbeOCmw9ByhvlX7KP2MW4Wbfsbown2 5CNf64QxXwLfyOqbXMymIxFUj3G4e/XIeMcs7eir6WShIEQL1UBeVhw/JBtv0RuZ 5TkAEQEAAYkCNgQYAQgAIBYhBEm+GENBBD3G2zafd2fwDmh/gBBKBQJfZH+fAhsM AAoJEGfwDmh/gBBKDd4QAK6WChVNivQTu0K3mZmljAS1fKBEaLpeLTl5D0tDhtgm yFslqqfyOmNeSg0G0FJgh1dbjRObCmHrSAerD9rGE+kNlwwsXdX7kFEEvNA7prew x9BdOs9yV5sWk/lRh6Eup/IaTRgu/0U/B6TwfKCmI/+dQeDtTsfO0ULR5tyEp0rg aBTkB+3fSSQx/hgWMzk9h1iTxT2DgcQMTiWVCm+mSiA7RBrsYkt/w0QnH1kib37k sIHM5t67tlIph7AhJS0LOzWZSsZ6aC72IoixcBp3AyKj0TnkrgTtyp8QucpFCcJv xjklcYBt4dGIFGid1iPDz2yN+NkQKKtEZbC581H4jkyI1XTZEgXImr/ZtEYigqNS ucSWraT8bRvB2NvuChXtq8qGVcK6A+8X4eVfKEgB0bwsqxOJcV95XnIBxXc/B8JH 2fsAviMGJpok8cLWC0HzMP+Q4zYNxdZqJbYm07gQWU71ToSVGMGS1Ccm0EB48eQ9 A3IrhvMv++B5QhtUgPkc9AviShBb/GIkctH9SL/JhOQCHaNgGwQjDaMku5bt9A5S 3rEYz2sYb76Z9YPSH6hQfn7o6p5YOyPCxViXQVYMOYD7wi+TG593ME7gslvkvDqu mhehY+P6ozgVKhPQOIXmV+449jvBnL7Wn4wKIaRK55jGo0J1RfW9oZR7CrYWGyxv =U4Wq -----END PGP PUBLIC KEY BLOCK----- ``` To encrypt files with Swedbank Pay's Public Migration Key, you must import it with the following command: {:.code-view-header} **Import Key** ```sh gpg2 --import SwedbankPay.key ``` After this is imported, you should verify the key with comparing the fingerprint on key, with the fingerprint on this information site. If this is a match, you should mark the key as trusted with the following command: {:.code-view-header} **Trust Key** ```sh gpg2 --edit-key SwedbankPay ``` Select `trust` and `5` You can now encrypt files with Swedbank Pay's Public Migration Key with the following command: {:.code-view-header} **Encrypt File** ```sh gpg2 --armor --encrypt -r SwedbankPay CARDDATA.csv ``` When the above command has executed, the `gpg` tool will have created a file named `CARDDATA.csv.asc`, which contains the encrypted data.",
    "tags": "",
    "url": "/resources/public-migration-key.html"
  },{
    "title": "Purchase",
    "text": "{% include purchase.md full_reference=true %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/purchase.html"
  },{
    "title": "Purchase Payments",
    "text": "{% include mobile-sdk-purchase.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/core/purchase.html"
  },{
    "title": "Purchase",
    "text": "{% include gift-card-purchase.md %}",
    "tags": "",
    "url": "/gift-cards/features/core/purchase.html"
  },{
    "title": "Purchase",
    "text": "{% include purchase.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/purchase.html"
  },{
    "title": "Purchase",
    "text": "{% include purchase.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/purchase.html"
  },{
    "title": "Purchase",
    "text": "{% include purchase.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/purchase.html"
  },{
    "title": "Purchase",
    "text": "{% include purchase.md full_reference=true %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/purchase.html"
  },{
    "title": "Recur",
    "text": "{% include recurring-card-payments.md %} {% include recur.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md api_resource=\"swish\" documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/recur.html"
  },{
    "title": "Recur",
    "text": "{% include recur.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/recur.html"
  },{
    "title": "Redirect",
    "text": "## MobilePay Online redirect integration flow * When you have prepared your merchant/webshop site, you make a `POST` request towards Swedbank Pay with your Purchase information. * You will receive a Redirect URL, leading to a secure Swedbank Pay hosted environment, in response. * You need to redirect the browser of the payer to that URL so that he or she may enter their MobilePay details. * When the payment is completed, Swedbank Pay will redirect the browser back to your merchant/webshop site. * Finally you need to make a `GET` request towards Swedbank Pay with the `paymentID` received in the first step, which will return the purchase result. {:.text-center} ![screenshot of the Swedbank Pay landing page][swedbankpay-landing-page]{:height=\"425px\" width=\"475px\"} {:.text-center} ![mobilepay enter number][mobilepay-screenshot-1]{:height=\"700px\" width=\"475px\"} {:.text-center} ![mobilepay approve payment][mobilepay-screenshot-2]{:height=\"600px\" width=\"600px\"} {% include alert.html type=\"success\" icon=\"link\" body=\"**Defining `callbackUrl`**: When implementing a scenario, it is strongly recommended to set a `callbackUrl` in the `POST` request. If `callbackUrl` is set, Swedbank Pay will send a `POST` request to this URL when the payer has fulfilled the payment.\" %} ## Step 1: Create a Purchase When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. This will generate a payment with a unique `id`. See the `POST`request example below. {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/mobilepay/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"DKK\", \"prices\": [ { \"type\": \"MobilePay\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"da-DK\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4598765432\" } }, \"mobilepay\": { \"shoplogoUrl\": \"https://example.com/shop-logo.png\" } } ``` {:.table .table-striped} | Required | Field | Data type | Description | | :--------------- | :------------------------------ | :----------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The payment object. | | {% icon check %} | └➔&nbsp;`operation` | `string` | `Purchase` | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization` | | {% icon check %} | └➔&nbsp;`currency` | `string` | `NOK`, `SEK`, `DKK`, `USD` or `EUR`. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The prices object. | | {% icon check %} | └─➔&nbsp;`type` | `string` | `MobilePay` (for supporting all card types configured at Swedbank Pay). If you need to specify what card brands you want to support you may specify this by sending in the card brand, e.g `Dankort` (for card type Dankort), `Visa` (for card type Visa), `MasterCard` (for card type Mastercard), | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"DKK\" %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"DKK\" %} | | | └─➔&nbsp;`feeAmount` | `integer` | If the amount given includes Fee, this may be displayed for the user in the payment page (redirect only). | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The URLs object containing the urls used for this payment. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | {% icon check %} | └─➔&nbsp;`cancelUrl` | `string` | The URI that Swedbank Pay will redirect back to when the user presses the cancel button in the payment page. | | | └─➔&nbsp;`callbackUrl` | `string` | The URI that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | {% icon check %} | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | This object contains the identificators of the payee of this payment. | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on MobilePay's page, if valid. Only Danish and Finnish phone numbers are supported. The country code prefix is +45 and +358 respectively. | | {% icon check %} | └➔&nbsp;`mobilepay.shoplogoUrl` | `string` | URI to the logo that will be visible at MobilePay Online. For it to be displayed correctly in the MobilePay app, the image must be 250x250 pixels, a png or jpg served over a secure connection using https, and be publicly available. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"prices\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/prices\" }, \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}\", \"number\": 75100000121, \"created\": \"2018-09-11T10:58:27.4236127Z\", \"updated\": \"2018-09-11T10:58:30.8254419Z\", \"instrument\": \"MobilePay\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"DKK\", \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"da-DK\", \"transactions\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/transactions\" }, \"urls\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payers\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/mobilepay/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/mobilepay/payments/authorize/{{ page.transaction_id }}\", \"rel\": \"redirect-authorization\" } ] } ``` ## Step 2: Get the transaction status Finally you need to make a `GET` request towards Swedbank Pay with the `id` of the payment received in the first step, which will return the purchase result. {:.code-view-header} **Request** ```http GET /psp/mobilepay/payments/{{ page.payment_id }}/ HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"DKK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"da-DK\", \"prices\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/prices\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payers\" } \"urls\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/urls\" }, \"transactions\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/transactions\" }, \"authorizations\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/authorizations\" }, \"captures\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/mobilepay/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/mobilepay/core/scripts/client/px.mobilepay.client.js?token={{ page.payment_token }}&operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/mobilepay/payments/authorize/{{ page.transaction_id }}\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/mobilepay/payments/{{ page.payment_id }}/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/psp/mobilepay/{{ page.payment_id }}/paid\", \"rel\": \"paid-payment\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/psp/mobilepay/{{ page.payment_id }}/failed\", \"rel\": \"failed-payment\", \"contentType\": \"application/problem+json\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :----------------------- | :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The `payment` object contains information about the specific payment. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md %} | | └➔&nbsp;`number` | `integer` | The payment number , useful when there's need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. | | └➔&nbsp;`created` | `string` | The ISO-8601 date of when the payment was created. | | └➔&nbsp;`updated` | `string` | The ISO-8601 date of when the payment was updated. | | └➔&nbsp;`state` | `string` | `Ready`, `Pending`, `Failed` or `Aborted`. Indicates the state of the payment, not the state of any transactions performed on the payment. To find the state of the payment's transactions (such as a successful authorization), see the `transactions` resource or the different specialized type-specific resources such as `authorizations` or `sales`. | | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | └➔&nbsp;`prices.id` | `string` | {% include field-description-id.md resource=\"prices\" %} | | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | └➔&nbsp;`userAgent` | `string` | The [user agent][user-agent] string of the payer's browser. | | └➔&nbsp;`language` | `string` | {% include field-description-language.md api_resource=\"mobile-pay\" %} | | └➔&nbsp;`urls` | `string` | The URI to the urls resource where all URIs related to the payment can be retrieved. | | └➔&nbsp;`payeeInfo` | `string` | {% include field-description-payeeinfo.md %} | | └➔&nbsp;`payers` | `string` | The URI to the `payer` resource where the information about the payer can be retrieved. | | `operations` | `array` | The array of possible operations to perform | | └─➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └─➔&nbsp;`href` | `string` | The target URI to perform the operation against. | | └─➔&nbsp;`rel` | `string` | The name of the relation the operation has to the current resource. | ## Purchase flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The diagram also shows in high level, the sequence of the process of a complete purchase. ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay participant MobilePay_API as MobilePay API participant MobilePay_App as MobilePay App Payer->>Merchant: start purchase (pay with MobilePay) activate Merchant Merchant->>SwedbankPay: POST note left of Merchant: First API request activate SwedbankPay SwedbankPay-->>Merchant: payment resource deactivate SwedbankPay SwedbankPay -->> SwedbankPay: Create payment Merchant-->>Payer: Redirect to payment page note left of Payer: redirect to MobilePay Payer-->>SwedbankPay: enter mobile number activate SwedbankPay SwedbankPay-->>MobilePay_API: Initialize MobilePay Online payment activate MobilePay_API MobilePay_API-->>SwedbankPay: response SwedbankPay-->>Payer: Authorization response (State=Pending) note left of Payer: check your phone deactivate Merchant MobilePay_API-->>MobilePay_App: Confirm Payment UI MobilePay_App-->>MobilePay_App: Confirmation Dialogue MobilePay_App-->>MobilePay_API: Confirmation MobilePay_API-->>SwedbankPay: make payment activate SwedbankPay SwedbankPay-->>SwedbankPay: execute payment SwedbankPay-->>MobilePay_API: response deactivate SwedbankPay deactivate MobilePay_API SwedbankPay-->>SwedbankPay: authorize result SwedbankPay-->>Payer: authorize result Payer-->>Merchant: Redirect to merchant note left of Payer: Redirect to merchant activate Merchant SwedbankPay-->>Merchant: Payment Callback Merchant-->>SwedbankPay: GET note left of Merchant: Second API request SwedbankPay-->>Merchant: Payment resource deactivate SwedbankPay Merchant-->>Payer: Display authorize result deactivate Merchant ``` {% include iterator.html prev_href=\"index\" prev_title=\"Back: Introduction\" next_href=\"seamless-view\" next_title=\"Seamless View\" %} [callback]: /payment-instruments/mobile-pay/features/technical-reference/callback [complete-url]: /payment-instruments/mobile-pay/features/technical-reference/complete-url [mobilepay-screenshot-1]: /assets/img/payments/mobilepay-redirect-en.png [mobilepay-screenshot-2]: /assets/img/payments/mobilepay-approve-en.png [user-agent]: https://en.wikipedia.org/wiki/User_agent [swedbankpay-landing-page]: /assets/img/payments/sbp-mobilepaylandingpage-en.png",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/redirect.html"
  },{
    "title": "Redirect",
    "text": "When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. You will receive a **redirect URL** to a Swedbank Pay payment page. ## Step 1: Create a Purchase A `Purchase` payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated `POST` request is provided below. Each individual field of the JSON document is described in the following section. An example of an expanded `POST` request is available in the [other features section][purchase]. {% include alert-callback-url.md %} {% include alert-risk-indicator.md %} {% include alert-gdpr-disclaimer.md %} {% include purchase.md %} When you receive the redirect url from Swedbank Pay, you redirect the payer there to complete the payment. This ensures that card details and other personal information is entered in a secure environment. Swedbank Pay handles all authentication during this phase. After an attempted payment, Swedbank Pay will redirect the Payer to one of two specified URLs: `completeUrl` or `cancelUrl`. If the payer cancel at any point, the payer will be redirected to the `cancelUrl`. If the payment is followed through completely the payer will reach the `completeUrl`. {% include alert.html type=\"informative\" icon=\"info\" body=\"Important: Both successful and rejected payments are labeled as `completed`.\" %} This means that when you reach this point, you need to make sure that the payment has gone through before you let the payer know that the payment was successful. You do this by doing a `GET` request. This request has to include the payment Id generated from the initial `POST` request, so that you can receive the state of the transaction. If you have chosen Seamless View, the `completeUrl` and `cancelUrl` will display directly inside the iframe. This is how the payment window should look: {:.text-center} ![screenshot of the redirect card payment page][card-payment]{:height=\"570px\" width=\"475px\"} Transactions in the currency SEK might look like this, with a debit/credit selection available: {:.text-center} ![screenshot of the swedish redirect card payment page][swedish-card-payment]{:height=\"605px\" width=\"475px\"} ### Purchase flow ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: start purchase activate Merchant Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay note left of Payer: First API request SwedbankPay-->>-Merchant: rel: redirect-authorization ① activate Merchant Merchant-->>-Payer: Redirect to authorization page activate Payer Payer->>-SwedbankPay: Access authorization page activate SwedbankPay note left of Payer: redirect to SwedbankPay ② SwedbankPay-->>-Payer: Display purchase information activate Payer Payer->>Payer: Input creditcard information ③ Payer->>-SwedbankPay: Submit creditcard information opt If 3-D Secure required note left of Payer: Authentication Challenge ④ SwedbankPay-->>Payer: Redirect to IssuingBank activate Payer Payer->>-IssuingBank: 3-D Secure authentication process activate IssuingBank IssuingBank-->>-Payer: 3-D Secure authentication process response activate Payer Payer->>-SwedbankPay: Access authentication page activate SwedbankPay end SwedbankPay-->>-Payer: Redirect to CompleteUrl ⑤ activate Payer Payer->>-Merchant: Access CompleteUrl alt Callback is set activate SwedbankPay SwedbankPay->>SwedbankPay: Payment is updated SwedbankPay->>-Merchant: POST Payment Callback end activate Merchant Merchant->>-SwedbankPay: GET ⑥ activate SwedbankPay note left of Payer: Second API request SwedbankPay-->>-Merchant: Payment result activate Merchant Merchant-->>-Payer: Display purchase result ``` ### Explanations * ① `rel: redirect-authorization` is the name of one of the operations, sent as a response from Swedbank Pay to the Merchant. The `href` in this operation is the **redirect URL** to a Swedbank Pay payment page. * ② The payer is redirected to a secure Swedbank Pay hosted page * ③ The payment window is presented and the payer can enter card information for authorization. * ④ If needed, the payer must go through an authorization challenge to verify his or hers identity. * ⑤ The Payer reaches the CompleteUrl which you defined in the initial POST request. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. * ⑥ Send a GET request with the `paymentId` to check the state of the transaction. Click the link for [a complete list of payment and transaction states][payment-transaction-states]. ### 3-D Secure {% include card-general.md %} Swedbank Pay will handle 3-D Secure authentication when this is required. When dealing with card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: 1. 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. 2. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"seamless-view\" next_title=\"Seamless View\" %} [card-payment]: /assets/img/payments/card-payment.png [payment-transaction-states]: /payment-instruments/card/features/technical-reference/payment-transaction-states [purchase]: /payment-instruments/card/features/core/purchase [swedish-card-payment]: /assets/img/payments/swedish-card-payment.png",
    "tags": "",
    "url": "/payment-instruments/card/redirect.html"
  },{
    "title": "Redirect",
    "text": "## Introduction * When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a `POST` request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. You will receive a **redirect URL** to a Swedbank Pay payment page. * You need to redirect the payer's browser to that specified URL so that the payer can enter the invoice details in a secure Swedbank Pay environment. * Swedbank Pay will redirect the payer's browser to - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. * When you detect that the payer reach your `completeUrl` , you need to do a `GET` request to receive the state of the transaction, containing the `paymentID` generated in the first step, to receive the state of the transaction. ## Step 1: Create a payment * An invoice payment is always two-phased based - you create an `Authorize` transaction, that is followed by a `Capture` or `Cancel` request. {% include alert-callback-url.md %} {% include alert-gdpr-disclaimer.md %} To initiate the payment process, you need to make a `POST` request to Swedbank Pay. Our `payment` example below uses the [`FinancingConsumer`] [financing-consumer] value. All valid options when posting a payment with operation equal to `FinancingConsumer`, are described in [features][financing-consumer]. {:.text-center} ![screenshot of the first Invoice redirect page][fincon-invoice-redirect]{:height=\"725px\" width=\"475px\"} {:.text-center} ![screenshot of the second Invoice redirect page][fincon-invoice-approve]{:height=\"500px\" width=\"475px\"} ### Financing Consumer {:.code-view-header} **Request** ```http POST /psp/invoice/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generateReccurenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", } \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :-------------------------------- | :------------ | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The [`FinancingConsumer`][financing-consumer] operation is used in our example. Take a look at the Other Feature section for a full examples of the following `operation` options: [FinancingConsumer][financing-consumer], [Recur][recur], [Verify][verify] | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization` is the only intent option for invoice. Reserves the amount, and is followed by a [cancellation][cancel] or [capture][capture] of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | NOK, SEK, DKK, USD or EUR. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the `Invoice` type here | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └➔&nbsp;`generateRecurrenceToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | | └─➔&nbsp;`hostUrl` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only `cancelUrl` or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`paymentUrl` | `string` | This Parameter is used when the payer is redirected out of the Seamless View (the iframe) and sent back after completing the payment. It should point to the page of where the Payment Order Seamless View is hosted. Read more about [paymentUrl][payment-url]. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md describe_receipt=true %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"instrument\": \"Invoice\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"amount\": 0, \"remainingCaptureAmount\": 1000, \"remainingCancellationAmount\": 1000, \"remainingReversalAmount\": 500, \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/prices\" }, \"transactions\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/transactions\" }, \"authorizations\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/authorizations\" }, \"captures\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/cancellations\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payers\" }, \"urls\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/urls\" }, \"settings\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/settings\" }, \"approvedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\" }, \"maskedApprovedLegalAddress\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/maskedapprovedlegaladdress\" } }, \"operations\": [ { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\" }, { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/authorizations\", \"rel\": \"create-authorize\", \"method\": \"POST\" }, { \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"method\": \"POST\" } ] } ``` ## Invoice flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The diagram also shows the process of a complete purchase in high level. ```mermaid sequenceDiagram Payer->>Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant->>-Swedbank Pay: POST (operation=FinancingConsumer) activate Swedbank Pay Swedbank Pay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: authorization page activate Payer note left of Payer: redirect to Swedbank Pay Payer->>-Swedbank Pay: enter Payer details activate Swedbank Pay Swedbank Pay-->>-Payer: redirect to merchant activate Payer note left of Payer: redirect back to Merchant Payer->>-Merchant: access merchant page activate Merchant note left of Merchant: Second API request Merchant->>-Swedbank Pay: GET activate Swedbank Pay Swedbank Pay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: display purchase result ``` ## Options after posting a payment Head over to [after payment][after-payment] to see what you can do when a payment is completed. Here you will also find info on `Cancel`, and `Reversal`. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"seamless-view\" next_title=\"Seamless View\" %} [after-payment]: /payment-instruments/invoice/after-payment [callback]: /payment-instruments/invoice/features/technical-reference/callback [complete-url]: /payment-instruments/invoice/features/technical-reference/complete-url [payment-url]: /payment-instruments/invoice/features/technical-reference/payment-url [cancel]: /payment-instruments/invoice/after-payment#cancellations [capture]: /payment-instruments/invoice/capture [financing-consumer]: /payment-instruments/invoice/other-features#financing-consumer [recur]: /payment-instruments/invoice/features/optional/recur [user-agent]: https://en.wikipedia.org/wiki/User_agent [verify]: /payment-instruments/invoice/features/optional/verify [fincon-invoice-redirect]: /assets/img/payments/fincon-invoice-redirect-first-en.png [fincon-invoice-approve]: /assets/img/payments/fincon-invoice-redirect-second-en.png",
    "tags": "",
    "url": "/payment-instruments/invoice/redirect.html"
  },{
    "title": "Redirect",
    "text": "## Introduction * When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. This will generate a payment object with a unique `paymentID`. You either receive a Redirect URL to a hosted page or a JavaScript source in response. * You need to redirect the payer to the payment page to enter the Swish registered mobile number. This triggers the initiation of a sales transaction. * Swedbank Pay handles the dialogue with Swish and the payer confirms the purchase in the Swish app. * Swedbank Pay will redirect the payer's browser to - or display directly in the iFrame - one of two specified URLs, depending on whether the payment session is followed through completely or cancelled beforehand. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. The payer is redirected to Swedbank Pay hosted pages and prompted to insert her phone number to initiate the sales transaction. Swish is a one-phase payment instrument that is based on sales transactions **not** involving `capture` or `cancellation` operations. {:.text-center} ![Paying with Swish using Swedbank Pay][swish-redirect-image]{:width=\"475px\" height=\"400px\"} {% include alert-callback-url.md %} ## Step 1: Create a Purchase All valid options when posting in a payment with operation equal to `Purchase`. The `Purchase` example shown below. {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/swish/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"paymentUrl\": \"https://example.com/perform-payment\", \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"ref-123456\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-123456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+46739000001\" } }, \"swish\": { \"enableEcomOnly\": false, \"paymentRestrictedToAgeLimit\": 18, \"paymentRestrictedToSocialSecurityNumber\": \"{{ page.consumer_ssn_se }}\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------------------------- | :------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The `Purchase` operation is used in our example. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Sale`. | | {% icon check %} | └➔&nbsp;`currency` | `string` | `SEK`. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` array lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | `Swish`. | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └─➔&nbsp;`paymentAgeLimit` | `integer` | Positive number sets required age limit to fulfill the payment. | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only cancelUrl or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback-url] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `string(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `string(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object holding information which, when available, will be prefilled on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length. | | | └➔&nbsp;`swish` | `object` | An object that holds different scenarios for Swish payments. | | | └─➔&nbsp;`enableEcomOnly` | `boolean` | `true` if to only enable Swish on browser based transactions.; otherwise `false` to also enable Swish transactions via in-app payments. | | | └─➔&nbsp;`paymentRestrictedToAgeLimit` | `integer` | Positive number that sets the required age needed to fulfill the payment. To use this feature it has to be configured in the contract. | | | └─➔&nbsp;`paymentRestrictedToSocialSecurityNumber` | `string` | When provided, the payment will be restricted to a specific social security number to make sure its the same logged in customer who is also the payer. Format: yyyyMMddxxxx. To use this feature it has to be configured in the contract. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"instrument\": \"Swish\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"amount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"Mozilla/5.0.\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/prices\" }, \"transactions\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/transactions\" }, \"captures\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/cancellations\" }, \"urls\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/payers\" }, \"settings\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/settings\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/swish/payments/{{ page.payment_id }}/sales\", \"rel\": \"create-sale\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/swish/payments/authorize/{{ page.payment_token }}\", \"rel\": \"redirect-sale\", }, { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/swish/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, ] } ``` ## Redirect Purchase flow The sequence diagram below shows the requests you have to send to Swedbank Pay to make a purchase. The Callback response is a simplified example in this flow. Go to the [Callback][callback-url] section to view the complete flow. ```mermaid sequenceDiagram activate Browser Browser->>-Merchant: Start purchase activate Merchant Merchant->>-SwedbankPay: POST (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment resource activate Merchant Merchant-->>-Browser: Response with redirectUrl activate Browser Browser->>-SwedbankPay: Redirect to Payment page note left of SwedbankPay: Redirect to Swedbank Pay activate Browser Browser->>-SwedbankPay: Enter mobile number activate Merchant Merchant->>-SwedbankPay: POST activate SwedbankPay SwedbankPay-->>-Merchant: Transaction Resource activate SwedbankPay SwedbankPay--x-Browser: Tell payer to open Swish app Swish_API->>Swish_App: Ask for payment confirmation activate Swish_App Swish_App-->>-Swish_API: Payer confirms payment activate Swish_API alt Callback Swish_API-->>-SwedbankPay: Payment status activate SwedbankPay SwedbankPay-->>-Swish_API: Callback response activate Swish_API SwedbankPay-->-Merchant: Transaction callback end activate SwedbankPay SwedbankPay->>-Browser: Redirect to merchant activate Browser Browser-->>-Merchant: Redirect activate Merchant Merchant->>-SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant-->>-Browser: Payment Status ``` {% include iterator.html prev_href=\"direct\" prev_title=\"Direct\" next_href=\"seamless-view\" next_title=\"Seamless View\" %} [callback-url]: /payment-instruments/swish/features/technical-reference/callback [complete-url]: /payment-instruments/swish/features/technical-reference/complete-url [swish-redirect-image]: /assets/img/payments/swish-redirect-number-input-en.png [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/swish/redirect.html"
  },{
    "title": "Redirect",
    "text": "## Introduction * When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a `POST` request towards Swedbank Pay with your Purchase information. This will generate a `payment` resource with a unique `id`. You will receive a **redirect URL** to a Swedbank Pay payment page (`redirect-sale` operation). * You need to redirect the payer's browser to that specified URL so that the payer can enter the payment details in a secure Swedbank Pay environment. * Swedbank Pay will redirect the payer's browser to one of two specified URLs, depending on whether the payment session is followed through completely. Please note that both a successful and rejected payment reach completion. * When you detect that the payer reach your `completeUrl`, you need to do a `GET` request to receive the state of the transaction, containing the `id` URI generated in the first step, to receive the state of the transaction. ## Step 1: Create a payment {% include alert-callback-url.md %} {% include alert-gdpr-disclaimer.md %} To initiate the payment process, you need to make a `POST` request to Swedbank Pay. {:.code-view-header} **Request** ```http POST /psp/trustly/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Trustly\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"hostUrls\": [ \"https://example.com\" ], \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"firstName\": \"Ola\", \"lastName\": \"Nordmann\" } } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :----------------------- | :----------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. For Trustly, this will always be `Purchase` as it is currently the only available operation. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Sale` is the only intent option for Trustly. Performs the payment when the payer gets redirected and completes the payment, and is followed by a [reversal][reversal] of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | `SEK`, `EUR`. The currency of the provided `amount`. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the `Trustly` type here | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `array` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only `cancelUrl` or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`hostUrl` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless View. If not supplied, view-operation will not be available. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └─➔&nbsp;`prefillInfo` | `object` | Object representing information of what the UI text fields should be populated with | | | └─➔&nbsp;`firstName` | `string` | Prefilled value to put in the first name text box. | | | └─➔&nbsp;`lastName` | `string` | Prefilled value to put in the last name text box. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}\", \"number\": 99590008046, \"created\": \"2020-05-26T12:31:19.3106483Z\", \"updated\": \"2020-05-26T12:31:19.4513673Z\", \"instrument\": \"Trustly\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.25.0\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/prices\" }, \"urls\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payers\" }, \"metadata\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/trustly/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/trustly/payments/{{ page.payment_id }}/sales\", \"rel\": \"create-sale\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/trustly/payments/sales/8f3ba6c8f4e3f6125ae6c18bec15c612747cf2c35dc5cac35d4bebc10cf7317e\", \"rel\": \"redirect-sale\" } ] } ``` ## Trustly flow This is an example of the Redirect scenario. For other integrations, take a look at the respective sections. The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. Swedbank Pay Trustly Payments uses the [`Deposit`][deposit] to perform a payment. After this, the payer will be presented with the returned `iframe` URL in order to perform the payment with their prefered bank. Once the user has completed the payment, Swedbank Pay will receive a notification asynchronously from Trustly, hence why the UI will initiate polling toward our back-end. The payment status after being redirect to `completeUrl` will then indicate if the payment was successful or not, or if the payment is still in progress. If the payment is still in progress, when reaching `completeUrl`, the Swedbank Pay has then not received a notification from Trustly that the payment has gone through yet. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay participant Merchant participant Consumer participant Trustly Consumer->>Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant->>-SwedbankPay: POST (operation=Purchase) activate SwedbankPay SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Consumer: authorization page activate Consumer note left of Consumer: redirect to Swedbank Pay Consumer->>-SwedbankPay: enter consumer details activate SwedbankPay SwedbankPay-->-Trustly: perform payment in Trustly activate Trustly Trustly-->>-Consumer: redirect to merchant activate Consumer note left of Consumer: redirect back to Merchant Consumer->>-Merchant: access merchant page activate Merchant note left of Merchant: Second API request Merchant->>-SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Consumer: display purchase result ``` ## Options after posting a payment Head over to [after payment][after-payment] to see what you can do when a payment is completed. Here you will also find info on `Abort` and `Reversal`. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"seamless-view\" next_title=\"Seamless View\" %} [complete-url]: /payment-instruments/trustly/features/technical-reference/complete-url [deposit]: https://trustly.com/en/developer/api#/deposit [after-payment]: /payment-instruments/trustly/after-payment [callback]: /payment-instruments/trustly/features/technical-reference/callback [reversal]: /payment-instruments/trustly/features/core/reversal [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/trustly/redirect.html"
  },{
    "title": "Redirect",
    "text": "## Introduction * When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected `Purchase` information. * This will generate a payment object with a unique `paymentID`. * You will receive a Redirect URL to a hosted page. * You need to [redirect][reference-redirect] the payer to the Redirect payment where the payer must push the payment button. This triggers a `POST` towards Swedbank Pay. * The payer is redirected to a Vipps payment page to enter the mobile number. * Swedbank Pay handles the dialogue with Vipps and the payer confirms the purchase in the Vipps app. * To receive the state of the transaction you need to do a `GET` request containing the `paymentID` generated in the first step. You redirect the payer to collect the payer's mobile number. ![steps of the vipps purchase flow][vipps-purchase-flow]{:width=\"1200px\" :height=\"500px\"} ## Step 1: Create a Purchase {% include alert-callback-url.md %} {% include alert-gdpr-disclaimer.md %} A `Purchase` payment is a straightforward way to charge the the payer. Below you will see the `POST` request you will need to send to collect the purchase information. {:.code-view-header} **Request** ```http POST /psp/vipps/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"https://example.net\" ], \"completeUrl\": \"https://example.net/payment-completed\", \"cancelUrl\": \"https://example.net/payment-canceled\", \"callbackUrl\": \"https://example.net/payment-callback\", \"logoUrl\": \"https://example.net/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.net/payment-terms.pdf\", }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4792345678\" } } } ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/prices\" }, \"transactions\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/transactions\" }, \"authorizations\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/authorizations\" }, \"reversals\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/cancellations\" }, \"urls\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payers\" }, \"settings\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/settings\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/vipps/payments/{{ page.transaction_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/vipps/payments/authorize/8fb05a835f2fc227dc7bca9abaf649b919ba8a572deb448bff543dd5806dacb7\", \"rel\": \"redirect-authorization\" } ] } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :------------------------- | :------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The `Purchase` operation is used in our example. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization`. Reserves the amount, and is followed by a [cancellation][cancel] or [capture][capture] of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | NOK | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"NOK\" %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"NOK\" %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only cancelUrl or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback] for details. | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on payment page, if valid. Only Norwegian phone numbers are supported. The country code prefix is +47 | ## Step 2: Authorization To create an authorization in the redirect flow, simply perform an HTTP redirect of the payer towards the URL in the `href` of the `redirect-authorization` operation found in the list of `operations` in the response from the creation of the payment. Once the payment is successfully authorized, the payer is returned to either the `completeUrl` or the `cancelUrl`; depending on the action performed. On the page as well as in the `callbackUrl` you need to perform an HTTP `GET` request towards the `id` of the payment to inspect its status. ## Step 3: Get the transaction state The `GET`request below will give you the transaction state of the payment. The `paymentId` used below was provided in the fist step when creating a purchase. {:.code-view-header} **Request** ```http GET /psp/vipps/payments/{{ page.payment_id }}/ HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json ``` {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"amount\": 1500, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/prices\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}/payers\" }, \"urls\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/urls\" }, \"transactions\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/transactions\" }, \"authorizations\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/authorizations\" }, \"captures\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/cancellations\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/vipps/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/core/scripts/client/px.vipps.client.js?token={{ page.payment_token }}&operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/core/scripts/client/px.vipps.client.js?token={{ page.payment_token }}&operation=authorize\", \"rel\": \"view-payment\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/payments/authorize/{{ page.transaction_id }}\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/vipps/payments/{{ page.payment_id }}/captures\", \"rel\": \"create-capture\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/psp/vipps/{{ page.payment_id }}/paid\", \"rel\": \"paid-payment\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.api_url }}/psp/vipps/{{ page.payment_id }}/failed\", \"rel\": \"failed-payment\", \"contentType\": \"application/problem+json\" } ] } ``` {:.table .table-striped} | Field | Type | Description | | :----------------------- | :----------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `payment` | `object` | The `payment` object contains information about the specific payment. | | └➔&nbsp;`id` | `string` | {% include field-description-id.md %} | | └➔&nbsp;`number` | `integer` | The payment number , useful when there's need to reference the payment in human communication. Not usable for programmatic identification of the payment, for that id should be used instead. | | └➔&nbsp;`created` | `string` | The ISO-8601 date of when the payment was created. | | └➔&nbsp;`updated` | `string` | The ISO-8601 date of when the payment was updated. | | └➔&nbsp;`state` | `string` | `Ready`, `Pending`, `Failed` or `Aborted`. Indicates the state of the payment, not the state of any transactions performed on the payment. To find the state of the payment's transactions (such as a successful authorization), see the `transactions` resource or the different specialized type-specific resources such as `authorizations` or `sales`. | | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | └➔&nbsp;`prices.id` | `string` | {% include field-description-id.md resource=\"prices\" %} | | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | └➔&nbsp;`payers` | `string` | The URI to the `payer` resource where the information about the payer can be retrieved. | | └➔&nbsp;`userAgent` | `string` | The [user agent][user-agent] string of the payer's browser. | | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | └➔&nbsp;`urls` | `string` | The URI to the urls resource where all URIs related to the payment can be retrieved. | | └➔&nbsp;`payeeInfo` | `string` | {% include field-description-payeeinfo.md %} | | `operations` | `array` | The array of possible operations to perform | | └─➔&nbsp;`method` | `string` | The HTTP method to use when performing the operation. | | └─➔&nbsp;`href` | `string` | The target URI to perform the operation against. | | └─➔&nbsp;`rel` | `string` | The name of the relation the operation has to the current resource. | ## Vipps Redirect integration flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. ```mermaid sequenceDiagram participant Browser participant Merchant participant SwedbankPay as Swedbank Pay participant VippsApi as Vipps API participant VippsApp as Vipps App Browser->>Merchant: Start purchase (pay with Vipps) activate Browser activate Merchant Merchant->>SwedbankPay: POST activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>Merchant: Payment resource deactivate SwedbankPay Merchant-->>Browser: Redirect to payment page deactivate Merchant note left of Browser: Redirect to Swedbank Pay Browser->>SwedbankPay: Redirect activate SwedbankPay SwedbankPay-->>VippsApi: Initialize Vipps payment activate VippsApi VippsApi-->>SwedbankPay: Response activate SwedbankPay SwedbankPay-->>-Browser: Display payment page activate Browser Browser->>Browser: Enter mobile number SwedbankPay-->>Browser: Authorization response (State=Pending) note left of Browser: Check your phone VippsApi-->>VippsApp: Confirm Payment UI activate VippsApp VippsApp-->>VippsApp: Confirmation dialogue VippsApp-->>VippsApi: Confirmation deactivate VippsApp VippsApi-->>SwedbankPay: Make payment activate SwedbankPay SwedbankPay-->>SwedbankPay: Execute payment SwedbankPay-->>VippsApi: Response deactivate SwedbankPay deactivate VippsApi SwedbankPay-->>SwedbankPay: Authorize result SwedbankPay-->>Browser: Authorize result deactivate SwedbankPay Browser-->>Merchant: Redirect to merchant activate Merchant note left of Browser: Redirect to merchant alt Callback activate SwedbankPay SwedbankPay-->>-VippsApi: Callback response SwedbankPay->>-Merchant: Transaction callback end activate SwedbankPay Merchant-->>SwedbankPay: GET note left of Merchant: Second API request SwedbankPay-->>Merchant: Payment resource Merchant-->>Browser: Display purchase result deactivate SwedbankPay deactivate Merchant deactivate Browser ``` You will later (i.e. if a physical product, when you are ready to ship the purchased products) have to make a [Capture][capture] or [Cancel][cancel] request. {% include iterator.html prev_href=\"./\" prev_title=\"Introduction\" next_href=\"seamless-view\" next_title=\"Seamless view\" %} [callback]: /payment-instruments/vipps/features/technical-reference/callback [cancel]: /payment-instruments/vipps/features/core/cancel [capture]: /payment-instruments/vipps/after-payment#captures [complete-url]: /payment-instruments/vipps/features/technical-reference/complete-url [reference-redirect]: /payment-instruments/vipps/redirect [user-agent]: https://en.wikipedia.org/wiki/User_agent [vipps-purchase-flow]: /assets/img/payments/vipps-purchase-flow.png",
    "tags": "",
    "url": "/payment-instruments/vipps/redirect.html"
  },{
    "title": "Redirect",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/basic/redirect.html"
  },{
    "title": "Release Notes",
    "text": "{% include alert.html type=\"informative\" icon=\"info\" header=\"Version numbers\" body=\"The version numbers used in headers on this page refers to the version of this very documentation, not to a version of any APIs described by it.\" %} ## 19 May 2021 ### Version 2.2.1 * Added payment link option for [Trustly][trustly-payment-link] * Added information about invoice capture in [Checkout v2][checkout-invoice-capture] and [Payment Menu][payment-menu-invoice-capture] * Added MobilePay `shoplogoUrl` in the [Checkout v2][checkout-items] and [Payment Menu][payment-menu-items] items section * Added [Delete Token section][card-delete-token] in Card's technical reference * Fixed minor typos and bugs ## 30 Apr 2021 ### Version 2.2.0 * Restructured Features sections for all implementations into [core features][core-features], [optional features][optional-features] and [technical reference][technical-reference] * Renamed Checkout to [Checkout v2][Checkout-v2] * Added [TRA exemption][tra-exemption] section * Fixed a handful of typos and bugs ## 28 Jan 2021 ### Version 2.1.2 * Updated Theme version to 1.9.9 * Updated Design Guide Version to 5.0.1 ## 26 Jan 2021 ### Version 2.1.0 * Updated theme with visual fixes * Search icon is now clickable * Various bug fixes * Various corrections and typo fixes * Re-worded [split settlement][split-settlement] * Clarified that [callback][callback] is a fail-safe * Updated tables and code examples with payerReference in various places, like [card purchase][card-purchase] * Updated Mobile SDK configurations for both [iOS][ios-configuration] and [Android][android-configuration] to include integration with custom backends * Updated GitHub references for Mobile SDK * Re-wrote [Prices][prices] section ## 01 Dec 2020 ### Version 2.0.2 * Various bug fixes * Various corrections and typo fixes * Corrected information about [3D-Secure][card-3ds-info] * Added paragraphs about different consumer flows in [Checkin][Checkin] * Added link to gift card on the [front page][frontpage] ## 12 Nov 2020 ### Version 2.0.1 * Added section for [MobilePay Seamless View][mobilepay-seamless-view] * Split [MobilePay Capture][mobilepay-capture] to a separate page * Code examples for digital products added in [Checkin][Checkin] ## 11 Nov 2020 ### Version 2.0.0 Launched new developer portal theme: * New design * New menu structure * Reading time Other changes: * Added GDPR disclaimer. * Added custom 404 page. * Added section about [Transaction On File][transaction-on-file] * Added Seamless View for [Trustly][trustly-payments]. * Added documentation about payment and transaction states. See [Card Other Features][card-transaction-states] for example. * Added event override warning for Seamless View Events, see [Card Seamless View Events][card-seamless-view] for example. * Added section regarding [MOTO][moto-payment-card] in Card Other Features. * Deleted Merchant Identified Payer in [Checkout][checkout]. * Renamed Merchant Authenticated Consumer to [Delegated Strong Consumer Authentication][dsca]. * Updated `payer`/`consumer`/`end-user` naming for most sections. * Updated expiry date for test cards in [test data][test-data]. * Updated [callback][checkout-callback] documentation. * Updated regex pattern for `orderItems.class`. ## 04 Sep 2020 ### Version 1.13.3 * Added documentation on deprecated operations in [Checkout][checkout-payment-order-purchase]. * Updated `instrument` description in [Checkout][checkout]. * Updated `payeeReference` description. * Clarified `msisdn` and `shoplogoUrl` in [MobilePay Online Payments][mobile-pay]. * Updated [Test data][test-data] in [Resources][resources]. * Documented problems in [Trustly Payments][trustly-payments]. * Added an alert for two-phase payments in Capture pages. ## 28 Aug 2020 ### Version 1.13.2 * Added description on `metadata` for all payment instruments. * Updated files in [Settlement & Reconciliation][settlement-reconcilitation]. * Added information on token deletion in [Card Payments][card] and [Invoice Payments][invoice]. * Updated the documentation on `paymentRestrictedToAgeLimit` and `paymentRestrictedToSocialSecurityNumber` in [Swish Payments][swish]. * Added documentation on guest checkout in [Checkout][checkout]. * Updated information about `logourl` in [Checkout][checkout]. * Added a list of accepted banks in [Trustly Payments][trustly-payments]. * Updated the `UpdateOrder` description in [Checkout][checkout]. ## 21 Aug 2020 ### Version 1.13.1 * Removed documentation for [Trustly Payments][trustly-payments] Seamless View. * Updated `reOrderPurchaseIndicator` description. * Updated [Other Features][trustly-features] in [Trustly Payments][trustly-payments]. * Updated [Test Data][test-data] for Vipps Payments. * Added updated documentation on the `transaction` operation. ## 17 Jul 2020 ### Version 1.13.0 * Added documentation on Mobile SDK in [Modules & SDKs][modules-sdks] section. * Added tables for mapping API fields to settlement files in [Settlement and Reconciliation][settlement-reconcilitation]. ## 10 Jul 2020 ### Version 1.12.1 * Corrected the documentation by removing `generatePaymentToken` and `paymentToken` from [Checkout][checkout]. ## 07 Jul 2020 ### Version 1.12.0 * Added information on 3-D Secure 2 for [Checkout][checkout-3ds2] and [Card Payments][card-3ds2]. * Updated reconciliation files in [Settlement & Reconciliation][settlement-reconcilitation]. * Added test card for Forbrugsforeningen in [Test data][test-data]. * Documented `paid`, `failed` and `aborted` across all resources. * Added additional information on `payerReference`, `generateRecurrenceToken`, `paymentToken`, `generatePaymentToken`, `recurrenceToken` and `instrument` for the `paymentorder` resource in [Checkout][checkout]. * Corrected and updated `view-` operations for all resources. * Updated [Seamless View Events][seamless-view-events-card] for all resources. * Described `nonPaymentToken` and `externalNonPaymentToken` in [Card Payments][card]. * Small corrections to [Swish Payments][swish] documentation. * Clarified the [`updateOrder`][update-order-checkout] documentation. ## 04 Jun 2020 ### Version 1.11.1 * Added additional information on the settlement files in [Settlement & Reconciliation][settlement-reconcilitation] for all Payments. * Corrected [Card Payments Redirect][card-redirect] and [Card Payments Seamless View][card-seamless-view] sequence diagrams. * Added [Abort][swish-abort] in [Swish Payments][swish]. ## 29 May 2020 ### Version 1.11.0 * Added a new [Trustly Payments][trustly-payments] section. * Added information about [Storing URIs][storing-uri] in the [Technical Information][home-technical-information] section. ## 22 May 2020 ### Version 1.10.1 * Updated [Swish Redirect][swish-redirect] requests. * Added `orderReference` information in Payment Order Callback in [Checkout Other features][checkout-callback]. ## 14 May 2020 ### Version 1.10.0 * Added a new [Gift Cards][gift-cards] section with descriptions of our Gift Cards API. * Added a new section [Co-badge Card Choice for Dankort][co-badge-card] in [Card Payments][card-payment-url]. ## 07 May 2020 ### Version 1.9.2 * Corrected table in [payments page][payments]. ### Version 1.9.1 * Corrected sequence diagrams in [Swish Payments][swish] and [Vipps Payments][vipps]. * The `description` field is now more thoroughly described for all requests it's present in. * The `language` field is now better described for all requests it's present in. * All broken links should now be unbroken. ## 22 Apr 2020 ### Version 1.9.0 * Added a new section [SDKs and Modules][sdk-modules] in Resources. * Corrected problem `type` URIs for [Card Payments][card], [Checkout][checkout] and [Swish Payments][swish]. * Required checkmarks have a new, fresh look: {% icon check %} * Flags now also sport a new look: {% flag no %} {% flag se %} {% flag dk %} {% flag fi %} {% flag lt %} {% flag lv %} {% flag ee %} ## 15 Apr 2020 ### Version 1.8.3 * Bug fixes to Mermaid diagram and alert styling, plus improvements to code block styling after the update to [Swedbank Pay Design Guide][design-guide] 4.5.0. * Added examples with screenshots of the effects of [Delegated Strong Consumer Authentication][dsca-checkout]. ### Version 1.8.2 * Added a more thorough description on `paymentUrl` and `completeUrl` in all relevant payments. * Updated `orderItems` to be required in all requests and responses. * Clean up of [Swish Payments][swish] * Removed `pageStripDown` in [Vipps Redirect][vipps]. * Updated [Card Payments Direct][card-direct] to have a correct integration flow. * Updated the [main page][frontpage] to be more welcoming. * Updated information on [Delegated Strong Consumer Authentication][dsca-checkout]. ## 31 Mar 2020 ### Version 1.8.1 * Documented allowed characters in `orderItem.class`. * Added `receiptReference` in [Invoice Payments][invoice] and [Payment Order][payment-orders] in capture and reversal. * Callback is now moved to Other features in all payments intruments. * Clean up of [MobilePay][mobile-pay]. * Corrected the address of Leia Ahlström in [Test Data][test-data]. * Updated the documentation in [Card Payments][card-payment-url] to recommend using `shippingAddress`. * Updated `payeeReference` to have an unique description for Payment Order and every Payment Instrument. ## 18 Mar 2020 ### Version 1.8.0 * Updated [Invoice Payments Direct][invoice-direct] where `approvedLegalAddress` should now be use for all countries. * Small text changes and clarifications. * Restructured [Invoice Payments][invoice] and [Card Payments][card]. ### Version 1.7.7 This change contains build updates for the page. :octocat: ## 04 Mar 2020 ### Version 1.7.6 * Several links has been corrected. The chance of 404 is now much lower. * Other small text changes and clarifications. ## 03 Mar 2020 ### Version 1.7.5 * New page! Technical reference into has been moved from the front page to [technical information][home-technical-information]. * Front page got a slimmer look. :swimmer: * Abort reference is back in [credit card reference][credit-card-abort]. * Swish error code reference got a face lift, check it out [here][swish-api-errors] :candy:. ### Version 1.7.4 * Described the M-Commerce flow for [Swish Direct][swish-direct-mcom]. * Alphabetize the terms in [Terminology][terminology]. ## 27 Feb 2020 ### Version 1.7.3 * Expanded information about the field `restrictedToInstruments`. * Added information about the field `receiptReference`. * Added information about [direct integration in Credit card][card-direct]. * Added and fixed several missing headings in template files. * Expanded information about `verify`. * Created new page for [Checkout Capture][checkout-capture]. * Mobile Pay Online was previously only refered to as Mobile Pay, this has been corrected. ## 7 Feb 2020 ### Version 1.7.2 * Removed several duplicate headers in features pages. * Added unscheduled purchase information in [card payments][card-unscheduled-purchase]. * We have added card logos when selecting card in payment menu. See [updated screenshot of payment menu][checkout-payment-menu-frontend]. ## 6 Feb 2020 ### Version 1.7.1 All sections have been released. :trophy: ### Version 1.7.0 * README is updated with info about includes. * Added several includes. * Updated payeeReference description in Checkout and Invoice section. * Using snake case consistently. * Added section for unscheduled purchase in Card section. * Fixed JavaScript example in Checkin section. * Added info about mobile verification in Swish Other Features. * Added section about Authenticated Merchants in Checkout section. * Cleanup in `Vipps` Other Features. * `paymentRestrictedToAgeLimit` and `paymentRestrictedToSocialSecurityNumber` added to `swish` object in [Swish Redirect][swish-redirect]. `paymentAgeLimit` , `socialSecurityNumber` added to the new `payerInfo` object in [Swish Seamless View][swish-seamless-view]. Properties added in `Swish`. * Added section about migration key in Resources section. ## 29 Jan 2020 ### Version 1.6.3 * `restrictedToInstruments` added back to [Payment Order purchase requests][checkout-payment-order-purchase]. * `Direct Debit` section and mentions in various includes removed. * Various improvements and fixes. ### Version 1.6.2 * The [Payments][payments] and [Card Payments][card] sections are reviewed and released. ### Version 1.6.1 * `email`, `msisdn`, `workPhoneNumber` and `homePhoneNumber` added to the `payer` object in [Payment Order requests][payment-orders]. * `cardholder` added to [Card Payments Purchase requests][card-purchase]. * Various improvements and fixes. ## 27 Jan 2020 ### Version 1.6.0 * [Credit Payments][credit] (née \"Credit Account\") sections have been deleted from the Swedbank Pay Developer Portal. * The [Swish Payments][swish] and [Vipps Payments][vipps] have received a few updates and are now ready for another round of review. * [MobilePay Online Payments][mobile-pay] is now ready for review. * `paymentAgeLimit` is now added in [Swish Payments][swish]. * The [Terminology page][terminology] is updated and _3-D Secure 2.0 (3DS2)_ , _PSD2_ and _SCA_ explanations are added. * Added descriptions for Payment States And Transaction States everywhere appropriate. * Google Analytics has been added to Developer Portal. ## 16 Jan 2020 ### Version 1.5 * The review of [Invoice Payments][invoice] is complete and as such the section is now released and ready for use. * The [Card Payments][card] section has received an overhaul, inching it closer to release. * The [Swish Payments][swish] and [Vipps Payments][vipps] sections are ready for review. * The Direct Debit, [MobilePay Online Payments][mobile-pay] and [Credit Payments][credit] (née \"Credit Account\") sections have received a few updates, inching them all closer to review. ## 09 Jan 2020 ### Version 1.4 * Updated [Swish Redirect][swish-direct] and [Swish Direct][swish-direct] sections in preparations for review and the transition from PayEx Developer Portal. * Added [Data Protection][data-protection] section. * Payment Orders now support `orderItems` in all operations. * Added [Terminology page][terminology]. * Clarified what the `awaitingActivity` state means for different payment instruments. * Removed erroneous `noCVC` in examples for [One-Click Card Payments][one-click] section. * Added description for the `onBillingDetailsAvailable` event in the [Checkin Front End section][checkout-checkin-front-end]. ## 22 Dec 2019 ### Update in checkin module We have added support for specifying language as input in checkin module, `language`. Supported languages are Norwegian, Swedish and English. Consumers outside Sweden and Norway can now purchase in our Checkout service. You can specify supported countries for shipment in a new input parameter, `shippingAddressRestrictedToCountryCodes`, in our checkin module. Updated API specification can be found [here][initiate-consumer-session]. The parameters `language` and `shippingAddressRestrictedToCountryCodes` have replaced the former `consumerCountryCode`. The parameters `msisdn` and `email` have been made obsolete due to GDPR rules. This information cannot be sent in without the explicit consent of the payer. {% comment %} TODO: Release this when the Swish Redirect section is released with the correct screenshot. Change the link below when this is ready. ### Improved purchase experience in Swish We now show the flag connected to the origin of the phone number the payer uses in Swish during payment. See updated screenshot of payment pages in [[Swish ecom redirect>>doc:Main.ecommerce.payex-payment-instruments.swish-payments.swish-e-commerce-redirect.WebHome]] model. {% endcomment %} ## 01 Nov 2019 ### Welcome, Swedbank Pay Developer Portal PayEx' Commerce offerings are being rebranded to **Swedbank Pay** and as a result of that rebranding, PayEx Checkout is now known as Swedbank Pay Checkout and its documentation can be found on [here][checkout]. {% comment %} TODO: Ref discussion about the m-commerce flow. Should we expose this feature given the challenges we have? ### Support m-com flow for Swish payments We have added support for m-com flow in [[Swish>>doc:Main.ecommerce.technical-reference.core-payment-resources.swish-payments.WebHome]]. In redirect flow this is supported without any changes in your integration. But a configuration on your swish agreement needs to be updated. Contact our support in order to activate this. If you use our seamless view-solution we have added the URL field called paymentUrl (previously added for CreditCard, Vipps and Payment Order), that will be used when the user is returned from the Swish application. See further information regarding paymentUrl at: [[PaymentUrl in CreditCard>>doc:Main.ecommerce.release-information.WebHome||anchor=\"HPaymentUrlCreditCard\"]] {% endcomment %} ### Support international phone numbers in Swish We have added support for sending in international phone numbers in the request. Check our Swish documentation [here][swish-features]. This is supported in API, and when payer's enter their phone number on the payment page. ### Order Items The input parameter `quantity` in OrderItems-node is now updated to decimal. You may send up to 4 decimals. See updated documentation [here][payment-orders] {% comment %} TODO: This is currently only used by ICA. Should we have the documentation available? Check Jira-task DX-511. ### Payment order We have added support for restricting payment instruments available in payment menu. The input parameter is ##restrictedToInstruments## in Payment order. See updated documentation [[here>>doc:Main.ecommerce.technical-reference.payment-orders-resource.WebHome]] {% endcomment %} ## 01 Oct 2019 ### Payment Url Credit Card We have added the URL field called `paymentUrl` for [Card Seamless View][card-payment-url] (previously added for Vipps and Checkout), that will be used when the user is returned from 3rd party. The URL should represent the page in where the payment Seamless View was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, `paymentUrl` should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added, in order to initiate the payment. Please note that the `paymentUrl` must be able to invoke the same JavaScript URL from the same Payment as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment stored. When the JavaScript is invoked after return of the payer, he or she will either be redirected to the `completeUrl` (event onPaymentCompleted) or if payment has failed, see an error-message and get the option to retry the payment. ## 01 Aug 2019 ### Order Items in payment orders On [Payment Orders][payment-orders], `itemDescriptions` and `vatSummary` has been replaced with the more versatile and powerful `orderItems`. While `itemDescriptions` will continue to work, it is recommended that all integrations switch over to `orderItems` as soon as possible. When `orderItems` is used, `itemDescriptions` must be removed from all requests as the two cannot be used simultaneously. ### Payment Url For our Seamless Views (currently [Vipps][vipps-payment-url] or in [Checkout][checkout-payment-url]), we have added a new URL field called `paymentUrl` that will be used when user is returned from 3rd party. The URL should represent the page of where the payment seamless view was hosted originally, such as the checkout page, shopping cart page, or similar. Basically, `paymentUrl` should be set to the same URL as that of the page where the JavaScript for the hosted payment view was added to in order to initiate the payment. Please note that the `paymentUrl` must be able to invoke the same JavaScript URL from the same Payment or Payment Order as the one that initiated the payment originally, so it should include some sort of state identifier in the URL. The state identifier is the ID of the order, shopping cart or similar that has the URL of the Payment or Payment Order stored. When the JavaScript is invoked after return of the payer, he or she will either be redirected to the `completeUrl`, or, if payment failed, see an error message and get the option to retry the payment. If `paymentUrl` is not implemented, retry of payments will not be possible in either individual payment instruments such as [Vipps][vipps-payment-resource] or in [Checkout][payment-orders]. It makes it more tedious to retry payment as the whole process including the creation of the payment or payment order needs to be performed again. With paymentUrl in place, the retry process becomes much more convenient for both the integration and the payer. [android-configuration]: /modules-sdks/mobile-sdk/configuration#android [callback]: /payment-instruments/card/features/technical-reference/callback [card-delete-token]: /payment-instruments/card/features/technical-reference/delete-token [card-direct]: /payment-instruments/card/direct [card-payment-url]: /payment-instruments/card/features/technical-reference/payment-url [card-purchase]: /payment-instruments/card/redirect#step-1-create-a-purchase [card-unscheduled-purchase]: /payment-instruments/card/features/optional/unscheduled-purchase [card-transaction-states]: /payment-instruments/card/features/technical-reference/payment-transaction-states [card]: /payment-instruments/card [card-3ds-info]: /payment-instruments/card#purchase-flow [card-3ds2]: /payment-instruments/card/features/core/3d-secure-2 [card-redirect]: /payment-instruments/card/redirect [card-seamless-view]: /payment-instruments/card/seamless-view [checkin]: /checkout/v2/checkin [checkout-capture]: /checkout/v2/capture [checkout-invoice-capture]: /checkout/v2/capture#invoice [checkout-checkin-front-end]:/checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [checkout-payment-menu-frontend]: /checkout/v2/checkin#step-2-display-swedbank-pay-checkin-module [checkout-payment-order-purchase]: /checkout/v2/payment-menu#request [checkout-payment-url]: /checkout/v2/features/technical-reference/payment-url [checkout]: /checkout [checkout-v2]: /checkout/v2/ [checkout-items]: /checkout/v2/features/technical-reference/items [checkout-3ds2]: /checkout/v2/features/core/3d-secure-2 [checkout-callback]: /checkout/v2/features/technical-reference/callback [co-badge-card]: /payment-instruments/card/features/optional/cobadge-dankort#co-badge-card-choice-for-dankort [core-features]: /checkout/v2/features/core/ [credit-card-abort]: /payment-instruments/card/after-payment#abort [credit]: /payment-instruments/card [data-protection]: /resources/data-protection [design-guide]: https://design.swedbankpay.com/ [dsca]: /checkout/v2/features/optional/dsca [frontpage]: https://developer.swedbankpay.com/ [gift-cards]: /gift-cards [home-technical-information]: /introduction [initiate-consumer-session]: /checkout/v2/checkin#step-1-initiate-session-for-consumer-identification [invoice-direct]: /payment-instruments/invoice/direct [invoice]: /payment-instruments/invoice [ios-configuration]: /modules-sdks/mobile-sdk/configuration#ios [dsca-checkout]: /checkout/v2/features/optional/dsca [mobile-pay]: /payment-instruments/mobile-pay [mobilepay-seamless-view]: /payment-instruments/mobile-pay/seamless-view [mobilepay-capture]: /payment-instruments/mobile-pay/capture [modules-sdks]: /modules-sdks [moto-payment-card]: /payment-instruments/card/features/optional/moto [one-click]: /payment-instruments/card/features/optional/one-click-payments [optional-features]: /checkout/v2/features/optional/ [payment-orders]: /checkout/v2/payment-menu#step-3-create-payment-order [payment-menu-invoice-capture]:/payment-menu/capture#invoice [payment-menu-items]: /payment-menu/features/technical-reference/items [payments]: /payment-instruments [prices]: /checkout/v2/features/technical-reference/prices [update-order-checkout]: /checkout/v2/features#update-order [resources]: /resources/ [settlement-reconcilitation]: /payment-instruments/card/features/core/settlement-reconciliation [sdk-modules]: /modules-sdks [split-settlement]: /payment-instruments/card/features/core/settlement-reconciliation#split-settlement [storing-uri]: /introduction#storing-uris [swish-api-errors]: /payment-instruments/swish/features/technical-reference/problems [swish-direct-mcom]: /payment-instruments/swish/direct#step-2b-create-m-commerce-sale-transaction [swish-direct]: /payment-instruments/swish/direct [swish-features]: /payment-instruments/swish/features [swish-redirect]: /payment-instruments/swish/redirect [swish-seamless-view]: /payment-instruments/swish/seamless-view [seamless-view-events-card]: /payment-instruments/card/features/technical-reference/seamless-view-events [swish]: /payment-instruments/swish [swish-abort]: /payment-instruments/swish/after-payment#abort [technical-reference]: /checkout/v2/features/technical-reference/ [terminology]: /resources/terminology [test-data]: /resources/test-data [transaction-on-file]: /payment-instruments/card/features/optional/transaction-on-file [tra-exemption]: /checkout/v2/features/optional/tra [trustly-payments]: /payment-instruments/trustly [trustly-payment-link]: /payment-instruments/trustly/features/optional/payment-link [trustly-features]: /payment-instruments/trustly/features [vipps-payment-resource]: /payment-instruments/vipps/features/technical-reference/payment-resource [vipps-payment-url]: /payment-instruments/vipps/features/technical-reference/payment-url [vipps]: /payment-instruments/vipps",
    "tags": "",
    "url": "/resources/release-notes.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md api_resource=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/reversal.html"
  },{
    "title": "Reversal",
    "text": "{% include reversal.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/reversal.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md api_resource=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View Events",
    "text": "{% include seamless-view-events.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/seamless-view-events.html"
  },{
    "title": "Seamless View",
    "text": "## Step 1: Create a purchase When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a `POST` request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. An example of an abbreviated `POST` request is provided below. You will receive a response in which you can find the **JavaScript source** in the `view-payment` operation. {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/mobilepay/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"DKK\", \"prices\": [ { \"type\": \"MobilePay\", \"amount\": 1500, \"vatAmount\": 0, } ], \"description\": \"MobilePay Test\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"da-DK\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"payeeReference\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4598765432\" } }, \"mobilepay\": { \"shoplogoUrl\": \"https://example.com/shoplogourl.png\" } } ``` {:.table .table-striped} | Required | Field | Data type | Description | | :--------------- | :------------------------------ | :----------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The payment object. | | {% icon check %} | └➔&nbsp;`operation` | `string` | `Purchase` | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization` | | {% icon check %} | └➔&nbsp;`currency` | `string` | `NOK`, `SEK`, `DKK`, `USD` or `EUR`. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The prices object. | | {% icon check %} | └─➔&nbsp;`type` | `string` | `MobilePay` (for supporting all card types configured at Swedbank Pay). If you need to specify what card brands you want to support you may specify this by sending in the card brand, e.g `Dankort` (for card type Dankort), `Visa` (for card type Visa), `MasterCard` (for card type Mastercard) and `Maestro` (for card type Maestro).| | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"DKK\" %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"DKK\" %} | | | └─➔&nbsp;`feeAmount` | `integer` | If the amount given includes Fee, this may be displayed for the user in the payment page (redirect only). | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent`string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The URLs object containing the urls used for this payment. | | {% icon check %} | └➔&nbsp;`hosturls` | `array` | The array of URIs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URI that Swedbank Pay will redirect back to when the payment page is completed. This does not indicate a successful payment, only that it has reached a completion state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | {% icon check %} | └─➔&nbsp;`cancelUrl` | `string` | The URI that Swedbank Pay will redirect back to when the user presses the cancel button in the payment page. | | | └─➔&nbsp;`paymentUrl` | `string` | The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both `cancelUrl` and `paymentUrl` is sent, the `paymentUrl` will used. | | | └─➔&nbsp;`callbackUrl` | `string` | The URI that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | {% icon check %} | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | This object contains the identificators of the payee of this payment. | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on MobilePays page, if valid. Only Danish and Finnish phone numbers are supported. The country code prefix is +45 and +358 respectivly. | | {% icon check %} | └➔&nbsp;`mobilepay.shoplogoUrl` | `string` | URI to logo that will be visible at MobilePay Online. For it to display correctly in the MobilePay app, the image must be 250x250 pixels, a png or jpg served over a secure connection using https, and be publicly available. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"MobilePay\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"DKK\", \"amount\": 0, \"description\": \"MobilePay Test\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"da-DK\", \"prices\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/prices\" }, \"urls\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/mobilepay/payments/{{ page.payment_id }}/payers\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/mobilepay/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/mobilepay/core/scripts/client/px.mobilepay.client.js?token={{ page.payment_token }}&Culture=da-DK\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/mobilepay/core/scripts/client/px.mobilepay.client.js?token={{ page.payment_token }}&Culture=da-DK\", \"rel\": \"view-payment\", \"contentType\": \"application/javascript\" } ] } ``` The key information in the response is the `view-payment` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **JavaScript** ```js ``` ## MobilePay Online Seamless View flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. ```mermaid sequenceDiagram participant Merchant participant SwedbankPay as Swedbank Pay participant MobilePayApp as MobilePay App participant MobilePayApi as MobilePay API activate Merchant Merchant->>-SwedbankPay: POST /psp/mobilepay/payments activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment response with rel: view-payment activate Merchant Merchant->>-SwedbankPay: Script init of iFrame activate SwedbankPay SwedbankPay-->>-Merchant: Display Payment Page activate Merchant Merchant->>Merchant: Init payment Merchant->>-SwedbankPay: Init request activate SwedbankPay SwedbankPay->>+MobilePayApi: POST activate MobilePayApi MobilePayApi-->>+SwedbankPay: Response activate SwedbankPay SwedbankPay-->>-Merchant: Display instructions page MobilePayApi-->>-MobilePayApp: Confirm Payment UI activate MobilePayApp MobilePayApp-->>MobilePayApp: Confirmation Dialogue MobilePayApp-->>-MobilePayApi: Confirmation activate MobilePayApi MobilePayApi->>-SwedbankPay: Authorize Payment activate SwedbankPay SwedbankPay-->>-SwedbankPay: Process Payment activate SwedbankPay SwedbankPay-->>-MobilePayApi: Process Payment Response activate MobilePayApi MobilePayApi-->>-MobilePayApp: Transaction Status activate Merchant Merchant->>- SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant-->>-Merchant: Display payment Status ``` 1. When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. 2. `rel: view-payment` is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. 3. `Open iFrame` creates the Swedbank Pay Seamless View. The Seamless View displays the payment page as content inside of the `iFrame`. 4. A `POST` request is sent to the MobilePay API with the mobile number (optional) for authorization. 5. Swedbank Pay handles the dialogue with MobilePay and the payer confirms the purchase in the MobilePay app. 6. After the purchase has been authorized, the payer will be redirected back to the merchant, where the status can be checked to ensure the payment was successful. {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"after-payment\" next_title=\"After Payment\" %} [callback]: /payment-instruments/mobile-pay/features/technical-reference/callback [complete-url]: /payment-instruments/mobile-pay/features/technical-reference/complete-url [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "## Introduction Seamless View provides an integration of the payment process directly on your website. This solution offers a smooth shopping experience with Swedbank Pay payment pages seamlessly integrated in an `iframe` on your website. The payer does not need to leave your webpage, since we are handling the payment in the `iframe` on your page. {:.text-center} ![screenshot of the seamless view card payment page][seamless-view-card]{:height=\"255px\" width=\"475px\"} For payments in the currency SEK, radio buttons for selecting debit or credit card will appear. {:.text-center} ![screenshot of the swedish seamless view card payment page][swedish-seamless-view-card]{:height=\"305px\" width=\"475px\"} ## Step 1: Create Payment A `Purchase` payment is a straightforward way to charge the card of the payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated `POST` request is provided below. Each individual field of the JSON document is described in the following section. An example of an expanded `POST` request is available in the [other features section][purchase]. {% include alert-risk-indicator.md %} When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a POST request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. You will receive a **JavaScript source** in response. {% include alert-gdpr-disclaimer.md %} {% include purchase.md seamless_view=true %} The key information in the response is the `view-authorization` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **JavaScript** ```html ``` When a user actively attempts to perform a payment, the `onPaymentCreated` event is raised with the following event argument object: {:.code-view-header} **onPaymentCreated event object** ```json { \"id\": \"/psp/creditcard/payments/{{ page.payment_id }}\", \"instrument\": \"creditcard\", } ``` {:.table .table-striped} | Field | Type | Description | | :----------- | :------- | :------------------------------------ | | `id` | `string` | {% include field-description-id.md %} | | `instrument` | `string` | `creditcard` | ## Purchase Flow ```mermaid sequenceDiagram participant Payer participant Merchant participant SwedbankPay as Swedbank Pay activate Payer Payer->>-Merchant: Start purchase activate Merchant note left of Payer: First API request Merchant->>-SwedbankPay: POST /psp/creditcard/payments activate SwedbankPay SwedbankPay-->>-Merchant: rel: view-authorization ① activate Merchant Merchant-->>-Payer: Authorization page activate Payer note left of Payer: Open iframe ② Payer->>Payer: Input creditcard information Payer->>-SwedbankPay: Show Consumer UI page in iframe - Authorization ③ activate SwedbankPay opt If 3-D Secure is required SwedbankPay-->>-Payer: Redirect to IssuingBank activate Payer Payer->>IssuingBank: 3-D Secure authentication process activate IssuingBank IssuingBank-->>-Payer: 3-D Secure authentication process response Payer->>-IssuingBank: Access authentication page activate IssuingBank IssuingBank -->>+Payer: Redirect to PaymentUrl Payer->>-Merchant: Redirect back to PaymentUrl (merchant) end alt Callback is set activate SwedbankPay SwedbankPay->>SwedbankPay: Payment is updated SwedbankPay->>-Merchant: POST Payment Callback end SwedbankPay-->>Merchant: Event: OnPaymentComplete ④ activate Merchant note left of Merchant: Second API request. Merchant->>-SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: rel: view-payment activate Merchant Merchant-->>-Payer: Display purchase result activate Payer ``` ### 3-D Secure {% include card-general.md %} Swedbank Pay will handle 3-D Secure authentication when this is required. When dealing with credit card payments, 3-D Secure authentication of the cardholder is an essential topic. There are two alternative outcomes of a credit card payment: 1. 3-D Secure enabled - by default, 3-D Secure should be enabled, and Swedbank Pay will check if the card is enrolled with 3-D Secure. This depends on the issuer of the card. If the card is not enrolled with 3-D Secure, no authentication of the cardholder is done. 2. Card supports 3-D Secure - if the card is enrolled with 3-D Secure, Swedbank Pay will redirect the cardholder to the autentication mechanism that is decided by the issuing bank. Normally this will be done using BankID or Mobile BankID. ### Explanations * ① `rel: view-authorization` is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. * ② `Open iframe` creates the Swedbank Pay hosted iframe. * ③ `Show Payer UI page in iframe` displays the payment window as content inside of the iframe. The payer can enter card information for authorization. * ④ `Event: OnPaymentComplete` is when a payment is complete. Please note that both successful and rejected payments reach completion, in contrast to a cancelled payment. {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"capture\" next_title=\"Capture\" %} [purchase]: /payment-instruments/card/features/core/purchase [seamless-view-card]: /assets/img/payments/seamless-view-card.png [swedish-seamless-view-card]: /assets/img/payments/swedish-seamless-view-card.png",
    "tags": "",
    "url": "/payment-instruments/card/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "## Introduction Seamless View provides an integration of the payment process directly on your website. This solution offers a smooth shopping experience with Swedbank Pay payment pages seamlessly integrated in an `iframe` on your website. The payer does not need to leave your webpage, since we are handling the payment in the `iframe` on your page. {:.text-center} ![screenshot of the invoice payment window][invoice-payment]{:height=\"525px\" width=\"475px\"} {% include alert-callback-url.md %} ## Step 1: Create the payment {% include alert-gdpr-disclaimer.md %} A `FinancingConsumer` payment is a straightforward way to invoice a payer. It is followed up by posting a capture, cancellation or reversal transaction. An example of an abbreviated `POST` request is provided below. Each individual field of the JSON document is described in the following section. An example of an expanded `POST` request is available in the [other features section][financing-consumer]. When properly set up in your merchant/webshop site and the payer starts the invoice process, you need to make a POST request towards Swedbank Pay with your invoice information. This will generate a payment object with a unique `paymentID`. You will receive a **JavaScript source** in response. {:.code-view-header} **Request** ```http POST /psp/invoice/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Invoice\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Invoice\", \"userAgent\": \"Mozilla/5.0...\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"paymentToken\": \"\" \"language\": \"sv-SE\", \"urls\": { \"hosturls\": [ \"https://example.com\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"callbackUrl\": \"https://example.com/payment-callback\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\" }, \"payer\": { \"payerReference\": \"AB1234\", }, }, \"invoice\": { \"invoiceType\": \"PayExFinancingSe\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :-------------------------------- | :------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The [`FinancingConsumer`][financing-consumer] operation is used in our example. Take a look at the [create `payment` section][create-payment] for a full examples of the following `operation` options: [FinancingConsumer][financing-consumer], [Recur][recur], and [Verify][verify] | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization`. Reserves the amount, and is followed by a [cancellation][cancel] or [capture][capture] of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | NOK or SEK. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the invoice value [See the Prices resource and prices object types for more information][price-resource]. | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └➔&nbsp;`generatePaymentToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a paymentToken for future use as One Click. | | | └➔&nbsp;`generateRecurrenceToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The`urls`resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`hostUrls` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A`GET`request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with`paymentUrl`; only cancelUrl or`paymentUrl`can be used, not both. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md describe_receipt=true %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md documentation_section=\"invoice\" %} | | {% icon check %} | └─➔&nbsp;`invoiceType` | `String` | `PayExFinancingSe`, `PayExFinancingNo` or `PayExFinancingFi` depending on which country you're doing business with Swedbank Pay in. (Other external financing partner names must be agreed upon with Swedbank Pay.) | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"instrument\": \"Invoice\", \"created\": \"YYYY-MM-DDThh:mm:ssZ\", \"updated\": \"YYYY-MM-DDThh:mm:ssZ\", \"operation\": \"FinancingConsumer\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"SEK\", \"prices\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/prices\" }, \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/3.0.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/payers\" }, \"metadata\": { \"id\": \"/psp/invoice/payments/{{ page.payment_id }}/metadata\" } }, \"operations\": [ { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/approvedlegaladdress\", \"rel\": \"create-approved-legal-address\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}/authorizations\", \"rel\": \"create-authorization\", \"contentType\": \"application/json\" }, { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/invoice/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"contentType\": \"application/json\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/invoice/payments/authorize/{{ page.payment_token }}\", \"rel\": \"redirect-authorization\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/invoice/core/scripts/client/px.invoice.client.js?{{ page.payment_token }}&operation=authorize\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" } ] } ``` The key information in the response is the `view-authorization` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **HTML** ```html ``` ## Purchase Flow The sequence diagram below shows a high level description of the invoice process. ```mermaid sequenceDiagram Payer->>Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant->>-SwedbankPay: POST /psp/invoice/payments ① activate SwedbankPay SwedbankPay-->>-Merchant: rel: view-authorization ② activate Merchant Merchant-->>-Payer: Display all details and final price activate Payer note left of Payer: Open iframe ③ Payer->>Payer: Input email and mobile number Payer->>-Merchant: Confirm purchase activate Merchant note left of Merchant: Second API request Merchant->>-SwedbankPay: Post psp/invoice/authorization ④ activate SwedbankPay SwedbankPay-->>-Merchant: Transaction result activate Merchant note left of Merchant: Third API request Merchant->>-SwedbankPay: GET ⑤ activate SwedbankPay SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Payer: Display result ``` {% include alert.html type=\"informative\" icon=\"info\" body=\" Note that the invoice will not be created/distributed before you have made a `capture` request.\" %} {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"direct\" next_title=\"Direct\" %} [callback]: /payment-instruments/invoice/features/technical-reference/callback [cancel]: /payment-instruments/invoice/after-payment#cancellations [capture]: /payment-instruments/invoice/capture [complete-url]: /payment-instruments/invoice/features/technical-reference/complete-url [create-payment]: /payment-instruments/invoice/features/technical-reference/create-payment [financing-consumer]: /payment-instruments/invoice/other-features#financing-consumer [invoice-payment]: /assets/img/checkout/invoice-seamless-view.png [price-resource]: /payment-instruments/invoice/features/technical-reference/prices [recur]: /payment-instruments/invoice/features/optional/recur [user-agent]: https://en.wikipedia.org/wiki/User_agent [verify]: /payment-instruments/invoice/features/optional/verify",
    "tags": "",
    "url": "/payment-instruments/invoice/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "## Swish Seamless View integration flow 1. When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. `view-sales` is a `rel` value in one of the operations, sent as a response from Swedbank Pay to the Merchant. 2. `Open iframe` creates the Swedbank Pay hosted iframe. 3. `Show payer UI page in iframe` displays the payment window as content inside of the iframe. The payer can insert mobile information for authorization. 4. `Event: OnPaymentComplete` is when the payment is complete. Please note that both a successful and rejected payment reach completion, in contrast to a cancelled payment. 5. To get the transaction result, you need to follow up with a `GET` request using the `paymentID` received in the first step. 6. If CallbackURL is set you will receive a payment callback when the Swish dialogue is completed, and you will have to make a `GET` request to check the payment status. ![screenshot of the seamless view swish payment page][seamless-view-img]{:height=\"215px\" width=\"475px\"} ## Step 1: Create a Purchase A `Purchase` payment is a straightforward way to charge the card of the payer. You need to make a `POST` request towards Swedbank Pay as shown below to create a purchase. An example of an expanded `POST` request is available in the [other features section][purchase]. This will generate a payment object with a unique `paymentID`. You will receive a **JavaScript source** in response. {% include payment-url.md when=\"selecting Swish as payment instrument\" %} {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/swish/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [{ \"type\": \"Swish\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"generatePaymentToken\": false, \"generateRecurrenceToken\": false, \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [ \"https://example.com\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/payment-logo.png\", \"termsOfServiceUrl\": \"https://example.com/payment-terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"CD1234\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or123\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+46987654321\" } }, \"swish\": { \"enableEcomOnly\": false, \"paymentRestrictedToAgeLimit\": 18, \"paymentRestrictedToSocialSecurityNumber\": \"{{ page.consumer_ssn_se }}\" } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------------------------- | :------------ || | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. The [`Purchase`][purchase] operation is used in our example. Take a look at the [create swish `payment` section][create-payment] for a full examples of the following `operation` options: [Purchase][purchase]. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `AutoCapture`. A one phase option that enable capture of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | `SEK` | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the generic type CreditCard if you want to enable all card brands supported by merchant contract. Use card brands like Visa (for card type Visa), MasterCard (for card type Mastercard) and others if you want to specify different amount for each card brand. If you want to use more than one amount you must have one instance in the prices node for each card brand. You will not be allowed to both specify card brands and CreditCard at the same time in this field. [See the Prices resource and prices object types for more information][price-resource]. | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | | └➔&nbsp;`paymentAgeLimit` | `integer` | Positive number sets requried age limit to fulfill the payment. | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`hostUrls` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only cancelUrl or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`paymentUrl` | `string` | The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both `cancelUrl` and `paymentUrl` is sent, the `paymentUrl` will used. See [`paymentUrl`][paymenturl] for details. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on payment page, if valid. The mobile number must have a country code prefix and be 8 to 15 digits in length. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`swish` | `object` | An object that holds different scenarios for Swish payments. | | | └─➔&nbsp;`enableEcomOnly` | `boolean` | `true` if to only enable Swish on browser-based transactions.; otherwise `false` to also enable Swish transactions via mobile app. | | | └─➔&nbsp;`paymentRestrictedToAgeLimit` | `integer` | Positive number that sets the required age needed to fulfill the payment. To use this feature it has to be configured in the contract. | | | └─➔&nbsp;`paymentRestrictedToSocialSecurityNumber` | `string` | When provided, the payment will be restricted to a specific social security number to make sure its the same logged in customer who is also the payer. Format: yyyyMMddxxxx. To use this feature it has to be configured in the contract. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}\", \"number\": 1234567890, \"instrument\": \"Swish\", \"created\": \"2016-09-14T13:21:29.3182115Z\", \"updated\": \"2016-09-14T13:21:57.6627579Z\", \"state\": \"Ready\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"amount\": 0, \"remainingCaptureAmount\": 1500, \"remainingCancellationAmount\": 1500, \"remainingReversalAmount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.20.1\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/prices\" }, \"transactions\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/transactions\" }, \"captures\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/captures\" }, \"reversals\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/reversals\" }, \"cancellations\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/cancellations\" }, \"urls\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/payeeInfo\" }, \"payers\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payers\" }, \"settings\": { \"id\": \"/psp/swish/payments/{{ page.payment_id }}/settings\" } }, \"operations\": [ { \"href\": \"{{ page.api_url }}/psp/swish/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\", \"method\": \"PATCH\", \"contentType\": \"application/json\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/swish/payments/{{ page.payment_id }}/sales\", \"rel\": \"create-sale\" }, { \"href\": \"{{ page.front_end_url }}/swish/payments/authorize/{{ page.payment_token }}\", \"rel\": \"redirect-sale\", \"method\": \"GET\", \"contentType\": \"text/html\" }, { \"method\": \"GET\", \"href\": \"https://ecom.dev.payex.com/swish/core/scripts/client/px.swish.client.js?token={{ page.payment_token }}\", \"rel\": \"view-sales\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/swish/core/scripts/client/px.swish.client.js?token={{ page.payment_token }}\", \"rel\": \"view-payment\", \"contentType\": \"application/javascript\" } ] } ``` The key information in the response is the `view-sales` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **HTML** ```html ``` ## Seamless View Purchase flow The sequence diagram below shows the requests you have to send to Swedbank Pay to make a purchase. The Callback response is a simplified example in this flow. Go to the [Callback][callback] section to view the complete flow. ```mermaid sequenceDiagram activate Browser Browser->>-Merchant: Start Purchase activate Merchant Merchant->>-SwedbankPay: POST (operation=PURCHASE) activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment Response with rel:view-payment activate Merchant Merchant->>Merchant: Build html with view-payment script Merchant-->>-SwedbankPay: Init iFrame activate SwedbankPay SwedbankPay->>-SwedbankPay: Enter mobile number activate SwedbankPay SwedbankPay->>-Merchant: Tell payer to open Swish app Swish_API->>Swish_App: Ask for payment confirmation activate Swish_App Swish_App-->>-Swish_API: Payer confirms payment alt Callback activate SwedbankPay SwedbankPay-->>Swish_API: Callback response SwedbankPay->>-Merchant: Transaction callback end activate Merchant Merchant->>-SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant->>-Browser: Payment Status ``` {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"after-payment\" next_title=\"After Payment\" %} [callback]: /payment-instruments/swish/features/technical-reference/callback [complete-url]: /payment-instruments/swish/features/technical-reference/complete-url [create-payment]: /payment-instruments/swish/features/technical-reference/create-payment [paymenturl]: /payment-instruments/swish/features/technical-reference/payment-url [price-resource]: /payment-instruments/swish/features/technical-reference/prices [purchase]: /payment-instruments/swish/features/technical-reference/create-payment [seamless-view-img]: /assets/img/checkout/swish-seamless-view.png [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/swish/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "{% include jumbotron.html body=\"The Seamless View scenario represents the opportunity to implement Trustly directly in your webshop.\" %} ## Introduction Seamless View provides an integration of the payment process directly on your website. This solution offers a smooth shopping experience with Swedbank Pay Payments seamlessly integrated in an `iframe` on your website. The payer does not need to leave your webpage, since we are handling the payment in the `iframe` on your website. ![screenshot of the Trustly payment window][trustly-payment-embedded-view]{:height=\"425px\" width=\"700px\"} {% include alert-callback-url.md %} ## Step 1: Create the payment A Trustly payment is a straightforward way to perform a direct-bank payment. An example of an abbreviated `POST` request is provided below. Each individual field of the JSON document is described in the following section. An example of an expanded `POST` request is available in [Payment resource] [payment-resource]. When properly set up in your merchant/webshop site and the payer starts the payment process, you need to make a `POST` request towards Swedbank Pay with your payment information. This will generate a `payment` resource with a unique `id` URI. You will receive a **JavaScript source** in response. {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/trustly/payments HTTP/1.1 Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Sale\", \"currency\": \"SEK\", \"prices\": [ { \"type\": \"Trustly\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Test Purchase\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"urls\": { \"hostUrls\": [\"https://example.com\"], \"completeUrl\": \"https://example.com/payment-completed\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"PR123\", \"payeeName\": \"Merchant1\", \"productCategory\": \"PC1234\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"firstName\": \"Ola\", \"lastName\": \"Nordmann\" } } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :--------------------------- | :------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The operation that the `payment` is supposed to perform. For Trustly, this will always be `Purchase` as it is currently the only available operation. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Sale` is the only intent option for Trustly. Performs the payment when the end-user gets redirected and completes the payment. | | {% icon check %} | └➔&nbsp;`currency` | `string` | `SEK`, `EUR`. The currency of the provided `amount`. | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the `Trustly` type here | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md documentation_section=\"trustly\" %} | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the consumer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md api_resource=\"trustly\" %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | | └─➔&nbsp;`hostUrl` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless View. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP `POST` against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md documentation_section=\"trustly\" %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | | └─➔&nbsp;`paymentUrl` | `string` | The URI that Swedbank Pay will redirect back to when the payment menu needs to be loaded, to inspect and act on the current status of the payment. | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md documentation_section=\"trustly\" %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(30*)` | {% include field-description-payee-reference.md documentation_section=\"trustly\" %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed to consumer when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └─➔&nbsp;`prefillInfo` | `object` | Object representing information of what the UI text fields should be populated with | | | └─➔&nbsp;`firstName` | `string` | Prefilled value to put in the first name text box. | | | └─➔&nbsp;`lastName` | `string` | Prefilled value to put in the last name text box. | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}\", \"number\": 99590008046, \"created\": \"2020-05-26T12:31:19.3106483Z\", \"updated\": \"2020-05-26T12:31:19.4513673Z\", \"instrument\": \"Trustly\", \"operation\": \"Purchase\", \"intent\": \"Sale\", \"state\": \"Ready\", \"currency\": \"SEK\", \"amount\": 0, \"description\": \"Test Purchase\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.25.0\", \"userAgent\": \"Mozilla/5.0...\", \"language\": \"sv-SE\", \"prices\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/prices\" }, \"urls\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/payers\" }, \"metadata\": { \"id\": \"/psp/trustly/payments/{{ page.payment_id }}/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/trustly/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"POST\", \"href\": \"{{ page.api_url }}/psp/trustly/payments/{{ page.payment_id }}/sales\", \"rel\": \"create-sale\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/trustly/payments/sales/8f3ba6c8f4e3f6125ae6c18bec15c612747cf2c35dc5cac35d4bebc10cf7317e\", \"rel\": \"redirect-sale\" }, { \"method\": \"GET\", \"href\": \"https://ecom.externalintegration.payex.com/trustly/core/scripts/client/px.trustly.client.js?token=8f3ba6c8f4e3f6125ae6c18bec15c612747cf2c35dc5cac35d4bebc10cf7317e&operation=sale\", \"rel\": \"view-sale\", \"contentType\": \"application/javascript\" } ] } ``` The key information in the response is the `view-sale` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **HTML** ```html ``` ## Purchase Flow The sequence diagram below shows a high level description of the Trustly payment process. ```mermaid sequenceDiagram participant SwedbankPay as Swedbank Pay participant Merchant participant Consumer participant Trustly Consumer->>Merchant: Start purchase activate Merchant note left of Merchant: First API request Merchant->>-SwedbankPay: POST /psp/trustly/payments activate Merchant Merchant-->>-Consumer: Display all details and final price activate Consumer note left of Consumer: Open iframe ③ Consumer->>Consumer: Input first name and last name Consumer->>-SwedbankPay: Confirm purchase activate SwedbankPay SwedbankPay->>-Trustly: Perform payment activate Trustly Trustly-->>-Merchant: Transaction result activate Merchant note left of Merchant: Second API request Merchant->>-SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: payment resource activate Merchant Merchant-->>-Consumer: Display result ``` {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"after-payment\" next_title=\"After Payment\" %} [callback]: /payment-instruments/trustly/features/technical-reference/callback [complete-url]: /payment-instruments/trustly/features/technical-reference/complete-url [payment-resource]: /payment-instruments/trustly/features/technical-reference/payment-resource [trustly-payment-embedded-view]: /assets/screenshots/trustly/consumer-information-input.png [user-agent]: https://en.wikipedia.org/wiki/User_agent",
    "tags": "",
    "url": "/payment-instruments/trustly/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "![steps of the vipps purchase flow][vipps-purchase-flow]{:width=\"1200px\" :height=\"500px\"} ## Step 1: Create a Purchase When properly set up in your merchant/webshop site and the payer starts the purchase process, you need to make a `POST` request towards Swedbank Pay with your Purchase information. This will generate a payment object with a unique `paymentID`. An example of an abbreviated `POST` request is provided below. You will receive a response in which you can find the **JavaScript source** in the `view-payment` operation. {% include payment-url.md when=\"selecting Vipps as payment instrument\" %} {% include alert-risk-indicator.md %} {% include alert-gdpr-disclaimer.md %} {:.code-view-header} **Request** ```http POST /psp/vipps/payments HTTP/1.1 Host: {{ page.api_host }} Authorization: Bearer Content-Type: application/json { \"payment\": { \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"currency\": \"NOK\", \"prices\": [ { \"type\": \"Vipps\", \"amount\": 1500, \"vatAmount\": 0 } ], \"description\": \"Vipps Test\", \"userAgent\": \"Mozilla/5.0\", \"language\": \"nb-NO\", \"urls\": { \"hostUrls\": [ \"https://example.com\", \"https://example.net\" ], \"completeUrl\": \"https://example.com/payment-completed\", \"cancelUrl\": \"https://example.com/payment-canceled\", \"paymentUrl\": \"https://example.com/perform-payment\", \"callbackUrl\": \"https://example.com/payment-callback\", \"logoUrl\": \"https://example.com/path/to/logo.png\", \"termsOfServiceUrl\": \"https://example.com/terms.pdf\" }, \"payeeInfo\": { \"payeeId\": \"{{ page.merchant_id }}\", \"payeeReference\": \"payeeReference\", \"payeeName\": \"Merchant1\", \"productCategory\": \"A123\", \"orderReference\": \"or-12456\", \"subsite\": \"MySubsite\" }, \"payer\": { \"payerReference\": \"AB1234\", }, \"prefillInfo\": { \"msisdn\": \"+4798765432\" } } } ``` {:.table .table-striped} | Required | Field | Type | Description | | :--------------: | :-------------------------------- | :------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | {% icon check %} | `payment` | `object` | The `payment` object contains information about the specific payment. | | {% icon check %} | └➔&nbsp;`operation` | `string` | The `Purchase` operation is used in our example. Take a look at the [create `payment` section][create-payment] for a full example of the `Purchase` `operation`. | | {% icon check %} | └➔&nbsp;`intent` | `string` | `Authorization`. Reserves the amount, and is followed by a [cancellation][cancellations] or [capture][captures] of funds. | | {% icon check %} | └➔&nbsp;`currency` | `string` | NOK | | {% icon check %} | └➔&nbsp;`prices` | `object` | The `prices` resource lists the prices related to a specific payment. | | {% icon check %} | └─➔&nbsp;`type` | `string` | Use the Vipps value. [See the Prices resource and prices object types for more information][price-resource]. | | {% icon check %} | └─➔&nbsp;`amount` | `integer` | {% include field-description-amount.md currency=\"NOK\" %} | | {% icon check %} | └─➔&nbsp;`vatAmount` | `integer` | {% include field-description-vatamount.md currency=\"NOK\" %} | | {% icon check %} | └➔&nbsp;`description` | `string(40)` | {% include field-description-description.md %} | | | └➔&nbsp;`generatePaymentToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a paymentToken for future use as One Click. | | | └➔&nbsp;`generateRecurrenceToken` | `boolean` | `true` or `false`. Set this to `true` if you want to create a recurrenceToken for future use Recurring purchases (subscription payments). | | {% icon check %} | └➔&nbsp;`userAgent` | `string` | The [`User-Agent` string][user-agent] of the payer's web browser. | | {% icon check %} | └➔&nbsp;`language` | `string` | {% include field-description-language.md %} | | {% icon check %} | └➔&nbsp;`urls` | `object` | The `urls` resource lists urls that redirects users to relevant sites. | | {% icon check %} | └─➔&nbsp;`hostUrls` | `array` | The array of URLs valid for embedding of Swedbank Pay Seamless Views. If not supplied, view-operation will not be available. | | {% icon check %} | └─➔&nbsp;`completeUrl` | `string` | The URL that Swedbank Pay will redirect back to when the payer has completed his or her interactions with the payment. This does not indicate a successful payment, only that it has reached a final (complete) state. A `GET` request needs to be performed on the payment to inspect it further. See [`completeUrl`][complete-url] for details. | | | └─➔&nbsp;`cancelUrl` | `string` | The URI to redirect the payer to if the payment is canceled. Only used in redirect scenarios. Can not be used simultaneously with `paymentUrl`; only cancelUrl or `paymentUrl` can be used, not both. | | | └─➔&nbsp;`paymentUrl` | `string` | The URI that Swedbank Pay will redirect back to when the view-operation needs to be loaded, to inspect and act on the current status of the payment. Only used in Seamless Views. If both `cancelUrl` and `paymentUrl` is sent, the `paymentUrl` will used. | | | └─➔&nbsp;`callbackUrl` | `string` | The URL that Swedbank Pay will perform an HTTP POST against every time a transaction is created on the payment. See [callback][callback] for details. | | | └─➔&nbsp;`logoUrl` | `string` | {% include field-description-logourl.md %} | | | └─➔&nbsp;`termsOfServiceUrl` | `string` | {% include field-description-termsofserviceurl.md %} | | {% icon check %} | └➔&nbsp;`payeeInfo` | `object` | {% include field-description-payeeinfo.md %} | | {% icon check %} | └─➔&nbsp;`payeeId` | `string` | This is the unique id that identifies this payee (like merchant) set by Swedbank Pay. | | {% icon check %} | └─➔&nbsp;`payeeReference` | `string(50*)` | {% include field-description-payee-reference.md %} | | | └─➔&nbsp;`payeeName` | `string` | The payee name (like merchant name) that will be displayed when redirected to Swedbank Pay. | | | └─➔&nbsp;`productCategory` | `string` | A product category or number sent in from the payee/merchant. This is not validated by Swedbank Pay, but will be passed through the payment process and may be used in the settlement process. | | | └─➔&nbsp;`orderReference` | `String(50)` | The order reference should reflect the order reference found in the merchant's systems. | | | └─➔&nbsp;`subsite` | `String(40)` | {% include field-description-subsite.md %} | | | └➔&nbsp;`payer` | `string` | The `payer` object, containing information about the payer. | | | └─➔&nbsp;`payerReference` | `string` | {% include field-description-payer-reference.md %} | | | └➔&nbsp;`prefillInfo` | `object` | An object that holds prefill information that can be inserted on the payment page. | | | └─➔&nbsp;`msisdn` | `string` | Number will be prefilled on payment page, if valid. Only Norwegian phone numbers are supported. The country code prefix is +47 | {:.code-view-header} **Response** ```http HTTP/1.1 200 OK Content-Type: application/json { \"payment\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}\", \"number\": 72100003079, \"created\": \"2018-09-05T14:18:44.4259255Z\", \"instrument\": \"Vipps\", \"operation\": \"Purchase\", \"intent\": \"Authorization\", \"state\": \"Ready\", \"currency\": \"NOK\", \"amount\": 0, \"description\": \"Vipps Test\", \"initiatingSystemUserAgent\": \"PostmanRuntime/7.2.0\", \"userAgent\": \"Mozilla/5.0 weeeeee\", \"language\": \"nb-NO\", \"prices\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/prices\" }, \"urls\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/urls\" }, \"payeeInfo\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payeeinfo\" }, \"payers\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/payers\" }, \"metadata\": { \"id\": \"/psp/vipps/payments/{{ page.payment_id }}/metadata\" } }, \"operations\": [ { \"method\": \"PATCH\", \"href\": \"{{ page.api_url }}/psp/vipps/payments/{{ page.payment_id }}\", \"rel\": \"update-payment-abort\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/payments/authorize/{{ page.payment_token }}\", \"rel\": \"redirect-authorization\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/core/scripts/client/px.vipps.client.js?token={{ page.payment_token }}&Culture=sv-SE\", \"rel\": \"view-authorization\", \"contentType\": \"application/javascript\" }, { \"method\": \"GET\", \"href\": \"{{ page.front_end_url }}/vipps/core/scripts/client/px.vipps.client.js?token={{ page.payment_token }}&Culture=sv-SE\", \"rel\": \"view-payment\", \"contentType\": \"application/javascript\" } ] } ``` The key information in the response is the `view-payment` operation. You will need to embed its `href` in a ` ``` The previous two steps gives this HTML: {:.code-view-header} **HTML** ```html Swedbank Pay Seamless View is Awesome! ``` Lastly, initiate the Seamless View with a JavaScript call to open the `iframe` embedded on your website. {:.code-view-header} **JavaScript** ```html ``` This is what the result should look like: {:.text-center} ![Vipps seamless view][vipps-screenshot-1]{:width=\"475px\" :height=\"150px\"} ## Vipps Seamless View integration flow The sequence diagram below shows the two requests you have to send to Swedbank Pay to make a purchase. The links will take you directly to the API description for the specific request. ```mermaid sequenceDiagram activate Merchant Merchant->>-SwedbankPay: POST /psp/vipps/payments activate SwedbankPay note left of Merchant: First API request SwedbankPay-->>-Merchant: Payment response with rel: view-payment activate Merchant Merchant->>-SwedbankPay: script init of iFrame activate SwedbankPay SwedbankPay-->>-Merchant: Display Payment Page activate Merchant Merchant->>Merchant: Enter mobile number Merchant ->>- SwedbankPay: Mobile number activate SwedbankPay SwedbankPay->>+Vipps_API: POST activate Vipps_API Vipps_API-->>+SwedbankPay: Response activate SwedbankPay SwedbankPay-->>-Merchant: Display to instructions page Vipps_API-->>-Vipps_App: Confirm Payment UI activate Vipps_App Vipps_App-->>Vipps_App: Confirmation Dialogue Vipps_App-->>-Vipps_API: Confirmation activate Vipps_API Vipps_API->>-SwedbankPay: Make payment activate SwedbankPay SwedbankPay-->>-SwedbankPay: Execute payment activate SwedbankPay SwedbankPay-->>-Vipps_API: Make Payment Response alt Callback activate SwedbankPay SwedbankPay-->>-Vipps_API: Callback response activate SwedbankPay SwedbankPay->>-Merchant: Transaction Callback end activate Merchant Merchant->>- SwedbankPay: GET activate SwedbankPay SwedbankPay-->>-Merchant: Payment response activate Merchant Merchant-->>-Merchant: Display payment Status ``` 1. When the payer starts the purchase process, you make a `POST` request towards Swedbank Pay with the collected Purchase information. 2. `rel: view-payment` is a value in one of the operations, sent as a response from Swedbank Pay to the Merchant. 3. `Open iframe` creates the Swedbank Pay Seamless View. The Seamless View displays the payment page as content inside of the `iframe`. The payer can enter their mobile phone number for authorization. 4. A `POST` request is sent to the Vipps API with the mobile number for authorization. 5. The response will contain the state of the transaction. It will normally be `AwaitingActivity` in this phase of the payment, meaning we are awaiting a response from Vipps. 6. Swedbank Pay handles the dialogue with Vipps and the payer confirms the purchase in the Vipps app. {% include iterator.html prev_href=\"redirect\" prev_title=\"Redirect\" next_href=\"capture\" next_title=\"Capture\" %} [callback]: /payment-instruments/vipps/features/technical-reference/callback [cancellations]: /payment-instruments/vipps/features/core/cancel [captures]: /payment-instruments/vipps/after-payment#captures [complete-url]: /payment-instruments/vipps/features/technical-reference/complete-url [create-payment]: /payment-instruments/vipps/features/technical-reference/create-payment [price-resource]: /payment-instruments/vipps/features/technical-reference/prices [user-agent]: https://en.wikipedia.org/wiki/User_agent [vipps-purchase-flow]: /assets/img/payments/vipps-purchase-flow.png [vipps-screenshot-1]: /assets/img/payments/vipps-seamless-view.png",
    "tags": "",
    "url": "/payment-instruments/vipps/seamless-view.html"
  },{
    "title": "Seamless View",
    "text": "",
    "tags": "",
    "url": "/checkout/v3/basic/seamless-view.html"
  },{
    "title": "Search",
    "text": "",
    "tags": "",
    "url": "/search.html"
  },{
    "title": "Security",
    "text": "## OAuth2 The Gift Card API requires an OAuth2 access token for interaction. This application automatically handles token fetching and refreshing by using [Spring Security][spring-security]. Configuration values are set in [application.yml][application-yml]: ```yaml # \"XXX\" Should be replaced by value provided by Swebank Pay # CLIENT_ID/CLIENT_SECRET/VAS_AUTH_SERVER_URL can also be set in docker-compose.yml as environment variables if running with docker vas-payment-api: oauth2: client: grantType: client_credentials clientId: \"${CLIENT_ID}:XXX\" clientSecret: \"${CLIENT_SECRET}:XXX\" accessTokenUri: \"${VAS_AUTH_SERVER_URL}:XXX\" scope: publicapi ``` And the implementation of these are located in [Oauth2RestTemplateConfiguration.java][oauth-rest-java]: ```java public class Oauth2RestTemplateConfiguration { //... @Bean @ConfigurationProperties(\"vas-payment-api.oauth2.client\") protected ClientCredentialsResourceDetails oAuthDetails() { return new ClientCredentialsResourceDetails(); } @Bean protected RestTemplate restTemplate() { var restTemplate = new OAuth2RestTemplate(oAuthDetails()); restTemplate.setInterceptors(ImmutableList.of(externalRequestInterceptor())); restTemplate.setRequestFactory(httpRequestFactory()); return restTemplate; } //... } ``` ## HMAC A Hash-based Message Authentication Code ([HMAC][hmac]) is used to verify the data integrity and authenticity of the HTTP requests made towards our API. An HMAC header therefore needs to be present in every request. In this client the HMAC value is automatically calculated by [HmacSignatureBuilder.java][hmac-signature-builder] and added to all outgoing requests in [ExternalRequestInterceptor.java][external-request-interceptor] HMAC is implemented using SHA-512 secure hash algorithm. Expected `Hmac` header format is: ```text HmacSHA512 :: ``` where `digest` is a Base64 formatted HMAC SHA512 digest of the following string: ```text METHOD\\n RESOURCE\\n USER\\ NONCE\\n DATE\\n PAYLOAD\\n ``` {:.table .table-striped} | Required | Field | Description | | :--------------: | :--------- | :-------------------------------------------------------------------------------------------- | | {% icon check %} | `METHOD` | The requested method (in upper case) | | {% icon check %} | `RESOURCE` | The path to desired resource (without hostname and any query parameters) | | {% icon check %} | `NONSE` | A unique value for each request ([UUID][uuid] | | | `DATE` | Same as `Transmission-Time` if provided as seperate header. Uses [ISO8601 standard][iso-8601] | | | `PAYLOAD` | The body of request | Example request: ```bash curl -X POST \\ https://stage-evc.payex.com/payment-api/api/payments/payment-account/balance \\ -H 'Accept: */*' \\ -H 'Agreement-Merchant-Id: XXX' \\ -H 'Authorization: Bearer XXX' \\ -H 'Hmac: HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA==' \\ -H 'Transmission-Time: 2019-06-18T09:19:15.208257Z' \\ -H 'Session-Id: e0447bd2-ab64-b456-b17b-da274bb8428e' \\ -d '{ \"accountIdentifier\": { \"accountKey\": \"7013369000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2019-12-31\", \"instrument\": \"GC\" } }' ``` In this example `USER` is user and `SECRET` is secret. The plain text string to `digest` would then look like the following: ```text POST /payment-api/api/payments/payment-account/balance user 21a0213e-30eb-85ab-b355-a310d31af30e 2019-06-18T09:19:15.208257Z { \"accountIdentifier\": { \"accountKey\": \"7013360000000000000\", \"cvc\": \"123\", \"expiryDate\": \"2020-12-31\", \"instrument\": \"CC\" } } ``` The plain `digest` string is then hashed with `HmacSHA512` algorithm and the `SECRET`. Finally we base 64 encode the hashed value. This is the final `digest` to be provided in the `Hmac` header. Final `Hmac` header value: ```text HmacSHA512 user:21a0213e-30eb-85ab-b355-a310d31af30e:oY5Q5Rf1anCz7DRm3GyWR0dvJDnhl/psylfnNCn6FA0NOrQS3L0fvyUsQ1IQ9gQPeLUt9J3IM2zwoSfZpDgRJA== ``` ### Postman example script for generation HMAC header In pre-request script copy/paste the following snippet. {:.code-view-header} **JavaScript** ```javascript var user = 'Systemtest'; var secret = 'Systemtest'; var transmissionTime = (new Date()).toISOString(); var sessionId = guid(); var hmac = generateHMAC(user, secret, transmissionTime); console.log('hmac: ' + hmac); //Set header values pm.request.headers.add({key: 'Hmac', value: hmac }); pm.request.headers.add({key: 'Transmission-Time', value: transmissionTime }); pm.request.headers.add({key: 'Session-Id', value: sessionId }); function generateHMAC(user, secret, transmissionTime) { var algorithm = \"HmacSHA512\"; var separator = \":\"; var method = request.method.toUpperCase(); var nonce = generateNonce(); //UUID var date = transmissionTime; var uri_path = request.url.trim().replace(new RegExp('^https?://[^/]+/'), '/'); // strip hostname uri_path = uri_path.split(\"?\")[0]; //Remove query paramters var payload = _.isEmpty(request.data) ? \"\" : request.data; var macData = method + '\\n' + uri_path + '\\n' + user + '\\n' + nonce + '\\n' + date + '\\n' + payload + '\\n'; macData = replaceRequestEnv(macData); console.log('data to mac: ' + macData); var hash = CryptoJS.HmacSHA512(macData, secret); var digest = CryptoJS.enc.Base64.stringify(hash); return algorithm + \" \" + user + separator + nonce + separator + digest; } function replaceRequestEnv(input) { //manually set environments to they are populated before hashing return input.replace(/\\{\\{(.*?)\\}\\}/g, function (str, key) { var value = pm.environment.get(key); return value === null ? pm.varables.get(key) : value; }); } function generateNonce() { return guid(); } function guid() { function s4() { return Math.floor((1 + Math.random()) * 0x10000) .toString(16) .substring(1); } return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4(); } ``` ## Security Documentation * [OAuth2][oauth2] * [Client Credentials][client-credentials] * [The RESTful CookBook: HMAC][restful-cookbook-hmac] * [HMAC - Wikipedia][hmac] ## Test client * For more information how to implement the api, see [Test Client][test-client]. {% include iterator.html prev_href=\"operations\" prev_title=\"Operations\" next_href=\"test-client\" next_title=\"Test Client\" %} [application-yml]: https://github.com/SwedbankPay/vas-payment-api-client/blob/master/backend/src/main/resources/application.yml [client-credentials]: https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/ [external-request-interceptor]: https://github.com/SwedbankPay/vas-payment-api-client/blob/master/backend/src/main/java/com/swedbankpay/vas/demo/config/ExternalRequestInterceptor.java [hmac-signature-builder]: https://github.com/SwedbankPay/vas-payment-api-client/blob/master/backend/src/main/java/com/swedbankpay/vas/demo/config/security/HmacSignatureBuilder.java [hmac]: https://en.wikipedia.org/wiki/HMAC [iso-8601]: https://en.wikipedia.org/wiki/ISO_8601 [oauth-rest-java]: https://github.com/SwedbankPay/vas-payment-api-client/blob/master/backend/src/main/java/com/swedbankpay/vas/demo/config/security/Oauth2RestTemplateConfiguration.java [oauth2]: https://oauth.net/2/ [restful-cookbook-hmac]: http://restcookbook.com/Basics/loggingin/ [spring-security]: https://spring.io/projects/spring-security-oauth [test-client]: /gift-cards/test-client [uuid]: https://tools.ietf.org/rfc/rfc4122.txt",
    "tags": "",
    "url": "/gift-cards/security.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/checkout/v2/features/core/settlement-reconciliation.html"
  },{
    "title": "Settlement &amp; Reconciliation",
    "text": "{% include settlement-reconciliation.md %}",
    "tags": "",
    "url": "/payment-menu/features/core/settlement-reconciliation.html"
  },{
    "title": "Terminology",
    "text": "### A {:.table .table-striped} | **Access Token** | The OAauth 2 Access token needed to access Swedbank Pay eCom APIs. Tokens are generated in Swedbank Pay Admin. Learn how to get started in the Admin Manual. Note that it must follow the regex pattern `[\\w-]*`. | | **Account Receivable Consumer** | The [`AccountReceivableConsumer`][invoice-url] API is the fundament for Swedbank Pay [Invoice Payments][invoice-url] service. It is a service where Swedbank Pay helps produce and distribute invoices to payers. | | **Authorization** | The first part of a [two-phase][fundamentals] transaction where a certain amount is blocked on the payer's account. The authorized amount is unavailable for the payer, ensuring that the merchant receives the money during the subsequent capture phase. | ### C {:.table .table-striped} | **Callback** | If `callbackURL` is set, a [Callback][callback-url] is triggered when a change or update from the back-end system is made on a payment or transaction. Swedbank Pay performs an async callback to inform the payee/merchant about this kind of update. | | **Cancellation** | Used to [cancel][cancel-url] authorized and not yet captured transactions. If a cancellation is performed after doing a part-capture, it will only affect the not yet captured authorization amount. | | **Capture** | The second part of a [two-phase][fundamentals] transaction where the authorized amount is sent from the payer to the payee. It is possible to do a part-capture on a subset of the authorized amount. Several captures on the same payment are possible, up to the total authorization amount. | | **Checkin** | Checkin is the first part of the Swedbank Pay [Checkout][checkout-url] flow (prior to displaying the Payment Menu), where the payer is identified by email and mobile phone number. | | **Consumer** | The person doing the purchase, equivalent to Payer. | | **Consumers** | The Consumers resource stores information about the consumer of the sold services or goods. It is the fundament of Checkin in Swedbank Pay [Checkout][checkout-url]. | ### F {:.table .table-striped} | **Financing Consumer** | The `FinancingConsumer` Invoice API is the fundament for Swedbank Pay [Invoice Payments][invoice-url] service. It is a service where Swedbank Pay helps improve cashflow by purchasing merchant invoices. | ### H {:.table .table-striped} | **Header** | An `HTTP` header used to carry information when doing an API Request. All API requests share some [common headers][common-headers]. | ### I {:.table .table-striped} | **Intent** | An `intent` is a payment parameter that determine the possible activity states available for a payment option (e.g. Purchase). Intents differ depening on payment instrument. Creating a payment within a [one-phase][fundamentals] payment flow (Swish, Direct debit) must have the intent to create a [Sale][fundamentals]. This is in contrast to a [two-phase][fundamentals] payment flow that have the intent to create an [Authorization][fundamentals]. Card payments also have specific intents that determine whether an [`AutoCapture`][auto-capture] is implemented (the credit card is charged directly like one-phase transaction). | ### O {:.table .table-striped} | **One-phase payment flow** | A [one-phase][fundamentals] payment is a payment done in one step. The amount is settled in one transactional step. | | **Operation** | A payment operation determines what kind of payment that should be implemented. Available payment operations vary, depending on payment instrument. The most common operation all instruments share is the Purchase operation. Card Payments have several others, such as [Payout][payout], [Verify][verify-url] and [Recur][recur]. | | **Operations** | Operations consist of an array of contextual links / actions that direct the payment flow in a given state of the payment resource (i.e. creating a capture transaction, creating a reversal transaction, returning a redirect URL, etc). Operations are [HATEOAS][hateoas] driven and managed through API calls. | ### P {:.table .table-striped} | **Payee** | The company that receive funds for the payment. | | **Payee ID** | The ID of the company that receive funds for the payment. Also referred to as Merchant ID. | | **Payer** | The person doing the purchase, equivalent to Consumer. | | **Payment** | A payment is the main resource in all of Swedbank Pay [RESTful APIs][restful-api], and a fundamental building block for each payment instrument during the payment process. The payment resource of each payment instrument is architectually similar, although it is tailor-made to manage the specifics of each instrument. It can be in different states and contain several different types of transactions. The state of the payment decides the operations that are available. | | **Payment Menu** | A Seamless View - embedded on a website - showing available payment instruments during payment scenario. The Payment Menu is the second part of the Swedbank Pay [Checkout][checkout-url] flow (after checkin). | | **Payment Orders** | The Payment Orders resource is used when initiating a payment process using the Payment Menu and Swedbank Pay Checkout. What payment instrument the payment order will make use of is up to the payer. The payment order is a container for the payment method object selected, acessed through the sub-resources payments and currentPayment. | | **Payment token** | A payment token is generated through a card purchase or card verification. It contains all necessary payment details to enable subsequent server-to-server payments. Used in One-click payments and recurring payment scenarios (Card, Invoice and Swedbank Pay Checkout). | | **Payout** | The payment option that initiates a payout payment process. A Payout payment is a deposit directly to credit card. | | **PSD2** | PSD2 is the second Payment Services Directive, being the requirement for strong customer authentication. It is performed with multi-factor authentication, on the majority of electronic payments. | | **Purchase** | The payment operation that initiates a purchase payment process. | ### R {:.table .table-striped} | **Recur** | The payment operation that initiates a recurring payment process. It is a payment that references a `recurrenceToken` created through a previous payment in order to charge the same card. | | **Reversal** | Used to reverse a payment. It is only possible to reverse a payment that has been captured and not yet reversed. | ### S {:.table .table-striped} | **Sale** | A [one-phase][fundamentals] transaction where the amount is settled when the transaction has succeded. Payment instruments using sales transactions are Swish and Direct Bank Debit. | | **SCA** | Strong Customer Authentication, which is a requirement from EU Revised Directive on Payment Services (PSD2). This implements the multi-factor authentication, for stronger security of electronic payments. | | **Swedbank Pay Admin** | The eCommerce Admin interface where you perform day to day operations on payments processed by Swedbank Pay. The Admin manual consists of two parts,[Getting Started and Interface and Search. | | **Swedbank Pay Direct API** | A payment flow where the implementer (Swedbank Pay customer) handles all user intreraction and make direct API calls to Swedbank Pay (server-to-server). | | **Swedbank Pay Seamless View** | A payment flow were the payer interacts with pages developed by Swedbank Pay directly through an iframe, directly embedded in the webshop/merchant site. | | **Swedbank Pay Payment Pages** | A payment flow where the payer is redirected to a payment page developed and hosted by Swedbank Pay. | ### T {:.table .table-striped} | **Two-phase payment flow** | A payment done in [two steps] [fundamentals]. Authorization and capture. The most common payment instrument using two-phase payments is card payments. | ### U {:.table .table-striped} | **Unscheduled Purchase** | An unscheduled purchase, also called a Merchant Initiated Transaction (MIT), is a payment which uses an `unscheduledToken` generated through a previous payment in order to charge the same card at a later time. They are done by the merchant without the cardholder being present.. | ### V {:.table .table-striped} | **Verify** | The payment operation that initiates a [verification][verify-url] payment process. It is a payment that lets you post verifications to confirm the validity of card information, without reserving or charging any amount. This option is used to generate a payment- or recurrence token, that can be used in a recurring payments scenarios or for one-clickpayments, without charging the card in the process. | ### 0-9 {:.table .table-striped} | **3-D Secure 2.0 (3DS2)** | The new authentication protocol for online card payments. The protocol is XML-based and designed to be an additional security layer for online credit and debit card transactions. | [auto-capture]: /payment-instruments/card/features/core/capture [callback-url]:/payment-instruments/card/features/technical-reference/callback [cancel-url]: /payment-instruments/card/after-payment#cancellations [checkout-url]: /checkout [common-headers]: /introduction#headers [fundamentals]: /payment-instruments#the-fundamentals [hateoas]: https://en.wikipedia.org/wiki/HATEOAS [invoice-url]: /payment-instruments/invoice/ [payout]: /payment-instruments/card/features/optional/payout [recur]: /payment-instruments/card/features/optional/recur [restful-api]: /introduction#connection-and-protocol [verify-url]: /payment-instruments/card/features/optional/verify",
    "tags": "",
    "url": "/resources/terminology.html"
  },{
    "title": "Test Client",
    "text": "## Prerequisites * Java 11 * VueJS * Maven * Postgres ## Project setup ```text vas-payment-api-client ├─┬ backend → backend module with Spring Boot code │ ├── src │ └── pom.xml ├─┬ frontend → frontend module with Vue.js code │ ├── src │ └── pom.xml └── pom.xml → Maven parent pom managing both modules ``` ## First App run {% include alert.html type=\"informative\" icon=\"informative\" header=\"PostgreSQL\" body=\"The application expects a PostgreSQL server to be running on localhost with a username `test` and password `test` to exist.\" %} The username and password for PostgreSQL can automatically be configured if PostgreSQL server is started in Docker with environment variables `POSTGRES_USER=test` and `POSTGRES_PASSWORD=test` are set (See [docker-compose.yml][docker-compose]). Clone the [Payment Client repository][payment-client] from Github. Inside the root directory, do a: ```bash mvn clean install ``` Run the Spring Boot App: ```bash mvn --projects backend spring-boot:run ``` Now go to `http://localhost:8080/` and have a look at your new client. ## Testing application 1. Add a new Merchant with the details provided by Swedbank Pay. 2. Click on Gift Cards and add a new Gift card. ## Build docker image ```bash mvn --projects backend clean compile jib:dockerBuild ``` ## Deploy to local docker ```bash docker-compose up -d ``` {% include iterator.html prev_href=\"security\" prev_title=\"Security\" next_href=\"other-features\" next_title=\"Features\" %} [docker-compose]: https://github.com/SwedbankPay/vas-payment-api-client/blob/master/docker-compose.yml [payment-client]: https://github.com/SwedbankPay/vas-payment-api-client",
    "tags": "",
    "url": "/gift-cards/test-client.html"
  },{
    "title": "Test Data",
    "text": "## Swedbank Pay Checkout Test Data During a Swedbank Pay Checkout implementation, you can use the test data related to the different payment instruments listed below. To see Swedbank Pay Checkout in action, please visit our [demoshop]({{ page.front_end_url }}/pspdemoshop) To test a checked-in user in the Demo Shop, please use the following test data: ### Checkout test data for Norway {:.table .table-striped} | Type | Data | Description | | :-------------- | :--------------------------- | :-------------------------------------------------------------------- | | `Email` | `olivia.nyhuus@payex.com` | The e-mail address of the payer. | | `Mobile number` | `+47 98765432` | The mobile phone number of the payer. Format Norway: `+47 99999999`. | | `SSN` | `{{ page.consumer_ssn_no }}` | The social security number of the payer. Format Norway: `DDMMYYXXXXX` | | `ZipCode` | `1642` | The city zip code. Format Norway: `XXXX` | ### Checkout test data for Sweden {:.table .table-striped} | Type | Data | Description | | :-------------- | :--------------------------- | :---------------------------------------------------------------------- | | `Email` | `leia.ahlstrom@payex.com` | The e-mail address of the payer. | | `Mobile number` | `+46 739000001` | The mobile phone number of the payer. Format Sweden: `+46 707777777`. | | `SSN` | `{{ page.consumer_ssn_se }}` | The social security number of the payer. Format Sweden: `YYYYMMDDXXXX`. | | `ZipCode` | `17674` | The city zip code. Format Sweden: `XXXXX` | ### Checkout test data for Denmark {:.table .table-striped} | Type | Data | Description | | :-------------- | :------------ | :------------------------------------------------------------------- | | `Mobile number` | `+4522222222` | The mobile phone number of the payer. Format Denmark: `+45 22222222` | ## Credit Card Test Data With regards to card payments, our external integration test environment is connected to our POS system instead of a fake service. It is set up with an internal acquirer. This gives us a production-like test environment, while also giving us sandbox testing opportunities, such as 3-D Secure card enrollment and error scenarios. No payment information will be sent to other acquiring institutions. ### Visa {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :---------------------- | :--- | | `4925000000000004` | After the current month | Any | | `4581097032723517` | After the current month | Any | | `4581099940323133` | After the current month | Any | ### MasterCard {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :---------------------- | :--- | | `5226600159865967` | After the current month | Any | | `5226603115488031` | After the current month | Any | | `5226604266737382` | After the current month | Any | | `5226600156995650` | After the current month | Any | ### American Express {:.table .table-striped} | Card number | Expiry | CVC | Type of test data | | :---------------- | :---------------------- | :------------ | :---------------- | | `377601000000000` | After the current month | Any (4 digits) | Amex & loopback | ### JCB {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :---------------------- | :---- | | `3569990010082211` | After the current month | Any | ### Diners {:.table .table-striped} | Card number | Expiry | CVC | | :-------------- | :---------------------- | :---- | | `6148201829798` | After the current month | Any | ### Maestro {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :----------------------- | :---- | | `6764429999947470` | After the current month | Any | ### Dankort {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :----------------------- | :---- | | `5019994016316467` | After the current month | Any | | `5019994001307083` | After the current month | Any | ### Visa/DanKort {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :----------------------- | :---- | | `4571994016401817` | After the current month | Any | | `4571994016471869` | After the current month | Any | ### Forbrugsforeningen {:.table .table-striped} | Card number | Expiry | CVC | | :----------------- | :----------------------- | :---- | | `6007220000000004` | After the current month | Any | ### 3-D Secure {:.table .table-striped} | Card type | Card number | Expiry | CVC | Type of test data | | :--------- | :----------------- | :----------------------- | :-----| :------------------ | | Visa | `4761739001010416` | After the current month | Any | 3-D Secure enrolled | | MasterCard | `5226612199533406` | After the current month | Any | 3-D Secure enrolled | ## Failure Testing There are two different ways of testing Card Payments error scenarios. You can test 3-D Secure errors using our 3-D Secure emulator, or you can use specific amounts set to trigger errors in our test environment. ### 3-D Secure Method First, [create a Card Payment][create-card-purchase] (operation `Purchase`) and visit the URL of the returned `redirect-authorization` operation in a web browser. Use either the Visa or MasterCard listed under 3-D Secure right above this section. After pressing the purchase button you will then be taken to a menu where you can select Authentication status. ![3D-Secure Emulator without dropdown menu][3ds-emulator-no-dropdown]{:width=\"805px\" :height=\"685px\"} ![3D-Secure Emulator with dropdown menu][3ds-emulator-with-dropdown]{:width=\"805px\" :height=\"685px\"} In this menu, there are a few different options to choose from. Choose the status you want to test, click the Continue button and the status you selected will be sent with the payment. ### Amount Error Testing Method We have some preset amounts that will trigger error codes. While creating a payment (operation `purchase`), enter one of the amounts from the list below in the prices object (`\"amount\": `) before submitting a payment. The error message displayed behind the amounts will be sent with your payment in the test environment. The amounts that can be used to trigger error codes (`transactionThirdPartyError`): {:.table .table-striped} | Amount | Error Code | Description | | :------- | :---------------------------------------- | :--------------------------------------- | | `900313` | `REJECTED_BY_ACQUIRER_INVALID_AMOUNT` | Invalid amount, response-code: 13 | | `900330` | `REJECTED_BY_ACQUIRER_FORMAT_ERROR` | Format error, response-code: 30 | | `900334` | `REJECTED_BY_ACQUIRER_POSSIBLE_FRAUD` | Possible fraud, response-code: 34 | | `900343` | `REJECTED_BY_ACQUIRER_CARD_STOLEN` | Card stolen, response-code: 43 | | `900354` | `REJECTED_BY_ACQUIRER_CARD_EXPIRED` | Card expired, response-code: 54 | | `900351` | `REJECTED_BY_ACQUIRER` | Unknown error, response-code: 51 | | `900359` | `REJECTED_BY_ACQUIRER_POSSIBLE_FRAUD` | Possible fraud, response-code: 59 | | `900361` | `REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS` | Insufficient funds, response-code: 61 | | `900362` | `REJECTED_BY_ACQUIRER` | Unknown error, response-code: 62 | | `900391` | `ACQUIRER_HOST_OFFLINE` | Acquirer host offline, response-code: 91 | ## Invoice Test Data ### Invoice test data for Norway {:.table .table-striped} | Type | Data | | :------ | :--------------- | | SSN | 26026708248 | | Name | Olivia Nyhuus | | Address | Saltnestoppen 43 | | City | 1642 Saltnes | ### Invoice test data for Sweden {:.table .table-striped} | Type | Data | Alternative data | | :------ | :-------------- | :---------------------- | | SSN | 600307-1161 | 971020-2392 | | Name | Azra Oliveira | Leia Ahlström | | Address | Helgestavägen 9 | Hökvägen 5 | | City | 19792 Bro | 17674 Järfälla | | MSISDN | | +46739000001 | | email | | leia.ahlstrom@payex.com | ### Invoice test data for Finland {:.table .table-striped} | Type | Data | | :------ | :--------------- | | SSN | 100584-451P | | Name | Järvilehto Kimmo | | Address | Kiannonkatu 88 | | City | 90500 Oulu | ## Invoice Service Test Data Use any name, address etc. ## Vipps Test Data Testing a successful Vipps purchase (in our external integration test environment) can be done using any valid Norwegian mobile number, E.g: `+47 99999999` except within the range: `9999991` - `99999998`, as these will trigger errors according to the table below. Please note that the external integration test environment is using a fake service, which means that no app will be involved. {:.table .table-striped} | Mobile number | Error message | | :------------ | :-------------------------------------------------------------- | | 99999991 | Vipps internal error | | 99999992 | Request Validation error message on paticular request parameter | | 99999993 | Transaction Id already exists in vipps | | 99999994 | PSPID not enrolled in vipps | | 99999995 | Invalid payment model type | | 99999996 | User Vipps App version not supported | | 99999997 | User not Registered with Vipps | | 99999998 | Merchant not available or active | ## Swish Test Data Testing a successful Swish purchase (in our external integration test environment) can be done by using any valid Swedish mobile number. E.g: `+46 739000001`. As with Vipps, the external integration test environment uses a fake service with no app involved. To trigger an error message, set the `description` value in `POST` Create Payment or `Create` Payment Order to one of the following values: {:.table .table-striped} | Description | Simulates | | :---------- | :--------------------------------------------- | | RF07 | Transaction declined | | TM01 | Swish timed out before the payment was started | | BANKIDCL | Payer cancelled BankId signing | [create-card-purchase]: /payment-instruments/card/redirect#step-1-create-a-purchase [3ds-emulator-no-dropdown]: /assets/img/3DS-emulator-no-dropdown.png [3ds-emulator-with-dropdown]: /assets/img/3DS-emulator-with-dropdown.png",
    "tags": "",
    "url": "/resources/test-data.html"
  },{
    "title": "TRA Exemption",
    "text": "{% include tra.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/tra.html"
  },{
    "title": "Transaction On File",
    "text": "{% include transaction-on-file.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/transaction-on-file.html"
  },{
    "title": "Transaction On File",
    "text": "{% include transaction-on-file.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/transaction-on-file.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md api_resource=\"swish\" documentation_section=\"swish\" %}",
    "tags": "",
    "url": "/payment-instruments/swish/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-instruments/trustly/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-instruments/vipps/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/transactions.html"
  },{
    "title": "Transactions",
    "text": "{% include transactions.md %}",
    "tags": "",
    "url": "/payment-menu/features/technical-reference/transactions.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include unscheduled-purchase.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/unscheduled-purchase.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/unscheduled.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/unscheduled.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/unscheduled.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/unscheduled.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/unscheduled.html"
  },{
    "title": "Unscheduled Purchase",
    "text": "{% include payment-order-unscheduled.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/unscheduled.html"
  },{
    "title": "Update Payment Order",
    "text": "{% include update-payment-order.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/update.html"
  },{
    "title": "Urls",
    "text": "{% include urls.md %}",
    "tags": "",
    "url": "/checkout/v2/features/technical-reference/urls.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/payment-instruments/card/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/payment-instruments/invoice/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include mobile-sdk-verify.md %}",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/checkout/v3/basic/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/checkout/v3/standard/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/checkout/v3/dsca/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/checkout/v3/tailored/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/checkout/v2/features/optional/verify.html"
  },{
    "title": "Verify",
    "text": "{% include verify.md %}",
    "tags": "",
    "url": "/payment-menu/features/optional/verify.html"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/after-payment"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobilepay/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/capture"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/checkin"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/direct"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/direct"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/direct"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/mobile-pay/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/card/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/invoice/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/swish/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/trustly/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-instruments/vipps/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/modules-sdks/mobile-sdk/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/resources/sdk-modules"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/gift-cards/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-menu/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payment-menu/other-features"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/mobile-card-payments"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/checkout/payment-menu"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/trustly/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/redirect"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/mobile-pay/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/invoice/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/swish/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/vipps/seamless-view"
  },{
    "title": "",
    "text": "",
    "tags": "",
    "url": "/payments/card/seamless-view"
  }]};
